
package h225;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Choice ( name = "LocationRejectReason" )
    public class LocationRejectReason implements IASN1PreparedElement {
            
        @ASN1Null ( name = "notRegistered" ) 
    
        @ASN1Element ( name = "notRegistered", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject notRegistered = null;
                
  
        @ASN1Null ( name = "invalidPermission" ) 
    
        @ASN1Element ( name = "invalidPermission", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject invalidPermission = null;
                
  
        @ASN1Null ( name = "requestDenied" ) 
    
        @ASN1Element ( name = "requestDenied", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject requestDenied = null;
                
  
        @ASN1Null ( name = "undefinedReason" ) 
    
        @ASN1Element ( name = "undefinedReason", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject undefinedReason = null;
                
  
        
        public org.bn.types.NullObject getNotRegistered () {
            return this.notRegistered;
        }

        public boolean isNotRegisteredSelected () {
            return this.notRegistered != null;
        }

        private void setNotRegistered (org.bn.types.NullObject value) {
            this.notRegistered = value;
        }

        
        public void selectNotRegistered () {
            selectNotRegistered (new org.bn.types.NullObject());
	}
	
        public void selectNotRegistered (org.bn.types.NullObject value) {
            this.notRegistered = value;
            
                    setInvalidPermission(null);
                
                    setRequestDenied(null);
                
                    setUndefinedReason(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getInvalidPermission () {
            return this.invalidPermission;
        }

        public boolean isInvalidPermissionSelected () {
            return this.invalidPermission != null;
        }

        private void setInvalidPermission (org.bn.types.NullObject value) {
            this.invalidPermission = value;
        }

        
        public void selectInvalidPermission () {
            selectInvalidPermission (new org.bn.types.NullObject());
	}
	
        public void selectInvalidPermission (org.bn.types.NullObject value) {
            this.invalidPermission = value;
            
                    setNotRegistered(null);
                
                    setRequestDenied(null);
                
                    setUndefinedReason(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getRequestDenied () {
            return this.requestDenied;
        }

        public boolean isRequestDeniedSelected () {
            return this.requestDenied != null;
        }

        private void setRequestDenied (org.bn.types.NullObject value) {
            this.requestDenied = value;
        }

        
        public void selectRequestDenied () {
            selectRequestDenied (new org.bn.types.NullObject());
	}
	
        public void selectRequestDenied (org.bn.types.NullObject value) {
            this.requestDenied = value;
            
                    setNotRegistered(null);
                
                    setInvalidPermission(null);
                
                    setUndefinedReason(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getUndefinedReason () {
            return this.undefinedReason;
        }

        public boolean isUndefinedReasonSelected () {
            return this.undefinedReason != null;
        }

        private void setUndefinedReason (org.bn.types.NullObject value) {
            this.undefinedReason = value;
        }

        
        public void selectUndefinedReason () {
            selectUndefinedReason (new org.bn.types.NullObject());
	}
	
        public void selectUndefinedReason (org.bn.types.NullObject value) {
            this.undefinedReason = value;
            
                    setNotRegistered(null);
                
                    setInvalidPermission(null);
                
                    setRequestDenied(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(LocationRejectReason.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            
<?xml version="1.0" encoding="UTF-8"?>

<!-- scenario server-->
<scenario>

    <receiveMessageSMPP request="true" type="bind_receiver:1" >
        <parameter name="seqNum" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="connection" operation="protocol.setFromMessage" value="channel.name"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="system_id" operation="protocol.setFromMessage" value="attribute.system_id"/>
        <parameter name="password" operation="protocol.setFromMessage" value="attribute.password"/>
        <parameter name="system_type" operation="protocol.setFromMessage" value="attribute.system_type"/>
        <parameter name="interface_version" operation="protocol.setFromMessage" value="attribute.interface_version"/>
        <parameter name="addr_ton" operation="protocol.setFromMessage" value="attribute.addr_ton"/>
        <parameter name="addr_npi" operation="protocol.setFromMessage" value="attribute.addr_npi"/>
        <parameter name="address_range" operation="protocol.setFromMessage" value="attribute.address_range"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
        <test parameter="[system_id]" condition="string.equals" value="IMSLoader"/>
        <test parameter="[password]" condition="string.equals" value="coucou"/>
        <test parameter="[system_type]" condition="string.equals" value="windows MC"/>
        <test parameter="[interface_version]" condition="string.equals" value="2"/>
        <test parameter="[addr_ton]" condition="string.equals" value="8"/>
        <test parameter="[addr_npi]" condition="string.equals" value="3"/>
        <test parameter="[address_range]" condition="string.equals" value="255.255.255.0"/>
    </receiveMessageSMPP>

    <sendMessageSMPP channel="[connection]">
        <header name="bind_receiver_resp" sequence_number="[seqNum]"/>
        <attribute name="system_id" value="test"/>
        <tlv name="sc_interface_version" length="1" value="6"/>
    </sendMessageSMPP>

    <parameter name="[num]" operation="set" value="1"/>
    <sendMessageSMPP channel="[connection]">
        <header name="deliver_sm" sequence_number="[num]" />
        <attribute name="service_type" value=""/>
        <attribute name="source_addr_ton" value="0"/>
        <attribute name="source_addr_npi" value="0"/>
        <attribute name="source_addr" value=""/>
        <attribute name="dest_addr_ton" value="1"/>
        <attribute name="dest_addr_npi" value="8"/>
        <attribute name="destination_addr" value="172.016.021.207"/>
        <attribute name="esm_class" value="0"/>
        <attribute name="protocol_id" value="0"/>
        <attribute name="priority_flag" value="2"/>
        <attribute name="schedule_delivery_time" value=""/>
        <attribute name="validity_period" value=""/>
        <attribute name="registered_delivery" value="3"/>
        <attribute name="replace_if_present_flag" value="0"/>
        <attribute name="data_coding" value="0"/>
        <attribute name="sm_default_msg_id" value="128"/>
        <attribute name="sm_length" value="0"/>
        <tlv name="message_payload" length="auto" value="[coucou]"/>
    </sendMessageSMPP>

    <receiveMessageSMPP request="false" type="deliver_sm:5" result="0">
        <parameter name="seqNumResp" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="message_id" operation="protocol.setFromMessage" value="attribute.message_id"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
        <test parameter="[seqNumResp]" condition="string.equals" value="[num]"/>
        <test parameter="[message_id]" condition="string.equals" value=""/>
    </receiveMessageSMPP>

    <parameter name="[num]" operation="number.add" value="[num]" value2="1"/>
    <sendMessageSMPP channel="[connection]">
        <header id="5" sequence_number="[num]" />
        <attribute name="service_type" value=""/>
        <attribute name="source_addr_ton" value="0"/>
        <attribute name="source_addr_npi" value="0"/>
        <attribute name="source_addr" value=""/>
        <attribute name="dest_addr_ton" value="1"/>
        <attribute name="dest_addr_npi" value="8"/>
        <attribute name="destination_addr" value="172.016.021.207"/>
        <attribute name="esm_class" value="0"/>
        <attribute name="protocol_id" value="0"/>
        <attribute name="priority_flag" value="2"/>
        <attribute name="schedule_delivery_time" value=""/>
        <attribute name="validity_period" value=""/>
        <attribute name="registered_delivery" value="3"/>
        <attribute name="replace_if_present_flag" value="0"/>
        <attribute name="data_coding" value="0"/>
        <attribute name="sm_default_msg_id" value="128"/>
        <attribute name="sm_length" value="30"/>
        <attribute name="short_message" value="second sms de test à délivrer."/>
    </sendMessageSMPP>

    <receiveMessageSMPP request="false" type="deliver_sm:5" result="0">
        <parameter name="seqNumResp" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="message_id" operation="protocol.setFromMessage" value="attribute.message_id"/>
        <test parameter="[seqNumResp]" condition="string.equals" value="[num]"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
        <test parameter="[message_id]" condition="string.equals" value=""/>
    </receiveMessageSMPP>

    <receiveMessageSMPP request="true" type="enquire_link:15">
        <parameter name="connection" operation="protocol.setFromMessage" value="channel.name"/>
        <parameter name="seqNumResp" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
    </receiveMessageSMPP>

    <sendMessageSMPP channel="[connection]">
        <header name="enquire_link_resp" sequence_number="[seqNumResp]" />
    </sendMessageSMPP>

    <receiveMessageSMPP request="true" type="replace_sm:7">
        <parameter name="seqNum" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="connection" operation="protocol.setFromMessage" value="channel.name"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="message_id" operation="protocol.setFromMessage" value="attribute.message_id"/>
        <parameter name="source_addr_ton" operation="protocol.setFromMessage" value="attribute.source_addr_ton"/>
        <parameter name="source_addr_npi" operation="protocol.setFromMessage" value="attribute.source_addr_npi"/>
        <parameter name="source_addr" operation="protocol.setFromMessage" value="attribute.source_addr"/>
        <parameter name="schedule_delivery_time" operation="protocol.setFromMessage" value="attribute.schedule_delivery_time"/>
        <parameter name="validity_period" operation="protocol.setFromMessage" value="attribute.validity_period"/>
        <parameter name="registered_delivery" operation="protocol.setFromMessage" value="attribute.registered_delivery"/>
        <parameter name="sm_default_msg_id" operation="protocol.setFromMessage" value="attribute.sm_default_msg_id"/>
        <parameter name="sm_length" operation="protocol.setFromMessage" value="attribute.sm_length"/>
        <parameter name="short_message" operation="protocol.setFromMessage" value="attribute.short_message"/>
        <parameter name="[short_message]" operation="binary.toString" value="[short_message]"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
        <test parameter="[message_id]" condition="string.equals" value="1"/>
        <test parameter="[source_addr_ton]" condition="string.equals" value="1"/>
        <test parameter="[source_addr_npi]" condition="string.equals" value="1"/>
        <test parameter="[source_addr]" condition="string.equals" value=""/>
        <test parameter="[schedule_delivery_time]" condition="string.equals" value=""/>
        <test parameter="[validity_period]" condition="string.equals" value=""/>
        <test parameter="[registered_delivery]" condition="string.equals" value="3"/>
        <test parameter="[sm_default_msg_id]" condition="string.equals" value="1"/>
        <test parameter="[sm_length]" condition="string.equals" value="36"/>
        <test parameter="[short_message]" condition="string.equals" value="test sur replace_sm d'envoi d'un sms"/>
    </receiveMessageSMPP>

    <sendMessageSMPP channel="[connection]">
        <header name="replace_sm_resp" sequence_number="[seqNum]" />
    </sendMessageSMPP>

    <receiveMessageSMPP request="true" type="unbind:6">
        <parameter name="[seqNum]" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="connection" operation="protocol.setFromMessage" value="channel.name"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
    </receiveMessageSMPP>
    
    <sendMessageSMPP channel="[connection]">
        <header name="unbind_resp" sequence_number="[seqNum]"/>
    </sendMessageSMPP>

</scenario>

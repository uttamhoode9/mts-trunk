<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>
    <parameter name="[INVITE_flag]" value="false" />
    <parameter name="[INVITE_debug]" operation="list.create" />
    <parameter name="[RTP_flag]" value="false" />
    <parameter name="[RTP_debug]" operation="list.create" />
    <parameter name="[BYE_flag]" value="false" />
    <parameter name="[BYE_debug]" operation="list.create" />

    <createListenpointSIP name="[inviterName]" localHost="[Host-Tester]" localPort="[UAC-sipPort]" /> <!-- transport="TCP"/-->

    <parameter name="[localTag]" operation="number.uid" />
    <parameter name="[newCallId]" operation="number.uid" />
    <parameter name="[newCseqNumber]" operation="number.uid" />
    <parameter name="[newBranchId]" operation="number.uid" />

    <parameter name="[INVITE_debug]" operation="list.addLast" value="[INVITE_debug]" value2="CallId=[newCallId]" />

    <sendMessageSIP name="Send INVITE" listenpoint="[inviterName]" destScenario="[inviteeName]" remoteHost="[GW-Host]" remotePort="[GW-Port]">
<![CDATA[INVITE sip:[serviceName]@[GW-Address] SIP/2.0
To: sip:[serviceName]@[GW-Address]
From: "[inviterName]" <sip:[inviterName]@[UAC-Address]>;tag=[localTag]
Via: SIP/2.0/[transportResponse] [UAC-Address];branch=z9hG4bK[newBranchId]
Call-ID: [newCallId]
CSeq: [newCseqNumber] INVITE
Max-Forwards: 70
Proxy-Authorization: IMS_GPRS_SCHEMA token="999"
Allow: INVITE, ACK, BYE, CANCEL, REFER, MESSAGE, SUBSCRIBE, NOTIFY, PUBLISH
Contact: <sip:[inviterName]@[UAC-Address]>
Supported: timer
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Session-Expires: 3600;refresher=uac
Accept-Contact: +g.poc.talkburst;require;explicit
P-Alerting-Mode: manual
P-Asserted-Identity: "Bruno" <sip:[inviterName]@[domainName]>,<tel:+3381164951574>
P-Charging-Vector: icid-value=0.6645971655716005;ggsn=139.10.69.237;pdp-sig=yes;gcid=60ee19cf;auth-token=0.4849361942495226
P-com.Siemens.MSISDN-ID: 3381164951574
P-com.Siemens.IMSI-ID: 81164951574
P-com.Siemens.SGSN-ID: 139.10.69.237
P-Charging-Function-Addresses: ccf=139.10.99.99;ccf_sec=139.10.99.99
Content-Type: application/sdp
Content-Length: x

v=0
o=[inviterName] 999 999 IN IP4 [inviterHostRTP]
s=-
c=IN IP4 [Host-Tester]
t=0 0
[inviter_AudioSdp_m]
[audioSdp_a]
[audioSdp_a_dtmf]
a=sendrecv
a=maxptime:20
a=ptime:20
a=fmtp:101 0-15,36
]]>
    </sendMessageSIP>

    <parameter name="[INVITE_debug]" operation="list.addLast" value="[INVITE_debug]" value2="REQUEST SENT" />
                
    <receiveMessageSIP request="false" type="INVITE">
        <parameter name="[result]" operation="protocol.setFromMessage" value="message.result"/>
        <test parameter="[result]" condition="string.matches" value="[2-5][0-9][0-9]" />
        <parameter name="[To]" operation="protocol.setFromMessage" value="header.To"/>
        <parameter name="[From]" operation="protocol.setFromMessage" value="header.From"/>
        <parameter name="[CallId]" operation="protocol.setFromMessage" value="header.Call-ID"/>
        <parameter name="[lastCseqNumber]" operation="protocol.setFromMessage" value="header.CSeq.Number"/>
        <parameter name="[contactURI]" operation="protocol.setFromMessage" value="header.Contact.Address.URI"/>
        <parameter name="[RecordRoute]" operation="protocol.setFromMessage" value="header.Record-Route"/>
        <parameter name="[ViaBranch]" operation="protocol.setFromMessage" value="header.Via.Parameter.branch"/>
        <parameter name="[SDPMediaPort0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Port"/>
    </receiveMessageSIP>

    <parameter name="[INVITE_debug]" operation="list.addLast" value="[INVITE_debug]" value2="ANSWER [result] RECEIVED" />
    
    <if>
        <condition>
            <test parameter="[contactURI]" condition="list.isempty" />
        </condition>
        <then>
            <parameter name="[Request-URI]" operation="set" value="[serviceName]@[GW-Address]"/>
        </then>
        <else>
            <parameter name="[Request-URI]" operation="set" value="[contactURI]"/>
        </else>
    </if>
    
    <parameter name="[Route]" operation="list.revert" value="[RecordRoute]"/>
    <parameter name="[newBranchId]" operation="number.uid"/>
	
    <sendMessageSIP name="Send ACK" listenpoint="[inviterName]" destScenario="[inviteeName]" remoteHost="[GW-Host]" remotePort="[GW-Port]">
<![CDATA[ACK [Request-URI] SIP/2.0
To: [To]
From: [From]
Call-ID: [CallId]
CSeq: [lastCseqNumber] ACK
Via: SIP/2.0/[transportResponse] [UAC-Address];branch=z9hG4bK[newBranchId]
Contact: <sip:[inviterName]@[UAC-Address]>
Route: [Route]
Max-Forwards: 70
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Proxy-Authorization: IMS_GPRS_SCHEMA token="999"
Allow: INVITE, ACK, CANCEL, BYE, NOTIFY
Content-Length: 0
]]>
    </sendMessageSIP>

    <parameter name="[INVITE_debug]" operation="list.addLast" value="[INVITE_debug]" value2="ACK SENT" />
	
    <if>
        <condition>
            <test parameter="[result]" condition="number.equals" value="200" />
        </condition>
        <then>
            <parameter name="[INVITE_flag]" value="true" />
        </then>
        <else>
            <exit failed="true" />
        </else>
    </if>

    <parameter name="[RTP_debug]" operation="list.addLast" value="[RTP_debug]" value2="RTP LOCAL PORT = [inviterPortRTP]" />

    <createListenpointRTPFLOW name="[inviterName]" localHost="[inviterHostRTP]" localPort="[inviterPortRTP]" />
		
    <finally>
        <if>
            <condition>
                <test parameter="[INVITE_flag]" condition="boolean.equals" value="true" />
            </condition>
            <then>
                <try>
                    <do>
                        <parameter name="[BYE_debug]" operation="list.addLast" value="[BYE_debug]" value2="WAIT BYE" />
                        <receiveMessageSIP name="Wait BYE" request="true" type="BYE" timeout="120">
                            <parameter name="[To]" operation="protocol.setFromMessage" value="header.To"/>
                            <parameter name="[From]" operation="protocol.setFromMessage" value="header.From"/>
                            <parameter name="[CallId]" operation="protocol.setFromMessage" value="header.Call-ID"/>
                            <parameter name="[CSeq]" operation="protocol.setFromMessage" value="header.CSeq"/>
                            <parameter name="[Contact]" operation="protocol.setFromMessage" value="header.Contact"/>
                            <parameter name="[Via]" operation="protocol.setFromMessage" value="header.Via"/>
                            <parameter name="[RecordRoute]" operation="protocol.setFromMessage" value="header.Record-Route"/>
                        </receiveMessageSIP>

                        <parameter name="[BYE_debug]" operation="list.addLast" value="[BYE_debug]" value2="BYE received" />
                    
                        <sendMessageSIP name="Send 200 OK" listenpoint="[inviterName]" remoteHost="[GW-Host]" remotePort="[GW-Port]">
<!--******************* BEGIN MESSAGE ********************-->
<![CDATA[SIP/2.0 200 OK
To: [To];tag=[localTag]
From: [From]
Via: [Via]
Call-ID: [CallId]
CSeq: [CSeq]
Contact: [Contact]
Record-Route: [RecordRoute]
Proxy-Authorization: IMS_GPRS_SCHEMA token="999"
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Content-Length: 0
]]>
<!--******************** END MESSAGE *********************-->
                        </sendMessageSIP>

                        <parameter name="[BYE_debug]" operation="list.addLast" value="[BYE_debug]" value2="200 OK SENT" />
                        <parameter name="[BYE_flag]" value="true" />
                    </do>
                </try>
              
                <try>
                    <do>
                        <receiveMessageRTPFLOW listenpoint="[inviterName]" type="0" >
                            <parameter name="[flowPayloadBinary]" operation="protocol.setFromMessage" value="flow.payload.player"/>
                            <!--parameter name="[packetLost]" operation="protocol.setFromMessage" value="qos.packetLost"/-->
                            <!--parameter name="[remotePort]" operation="protocol.setFromMessage" value="message.remoteport"/-->
                            <parameter name="[nbReceivedPackets]" operation="protocol.setFromMessage" value="flow.packetNumber"/>
                        </receiveMessageRTPFLOW>
                        
                        <parameter name="[RTP_debug]" operation="list.addLast" value="[RTP_debug]" value2="REMOTE PORT=[SDPMediaPort0]?" />
                        <parameter name="[RTP_flag]" value="true" />



                        <!-- test the nb of received packets -->
                        
                        <!--parameter name="[nbReceivedPackets]" operation="list.size" value="[flowPayloadBinary]"/-->
                        <parameter name="[nbMin]" operation="number.multiply" value="[nbSentPackets]" value2="0.7"/>
                        <parameter name="[missing]" value="1" />
                        <if>
                            <condition>
                                <test parameter="[nbReceivedPackets]" condition="number.lowerthan" value="[nbMin]"/>
                            </condition>
                            <then>
                                <parameter name="[missing]" value="0" />
                            </then>
                        </if>

                        <stats>
                            <histogram name="received_packets" summary="number of received packets" complete="">
                                <newValue>[nbReceivedPackets]</newValue>
                            </histogram>
                            <percent name="missing_OK" summary="percentage of satisfying tests regarding missing packets" complete="">
                                <incValue>[missing]</incValue>
                                <incTotal>1</incTotal>
                            </percent>
                        </stats>
		
	            <!-- test if there are too many empty packets -->
                        <!--parameter name="[empty]" operation="list.findmatches" value="[flowPayloadBinary]" value2="[blankpattern]"/>
                        <parameter name="[nbEmptyPackets]" operation="list.size" value="[empty]"/>
                        <parameter name="[nbMaxEmptyPackets]" operation="number.multiply" value="[nbReceivedPackets]" value2="[blankPktsRate]"/>
                        <parameter name="[empty]" value="1" />
                        <if>
                            <condition>
                                <test parameter="[nbEmptyPackets]" condition="number.greaterthan" value="[nbMaxEmptyPackets]"/>
                            </condition>
                            <then>
                                <parameter name="[empty]" value="0" />
                            </then>
                        </if>

                        <stats>
                            <histogram name="empty_packets" summary="number of empty packets" complete="">
                                <newValue>[nbEmptyPackets]</newValue>
                            </histogram>
                            <percent name="empty_OK" summary="percentage of satisfying tests regarding empty packets" complete="">
                                <incValue>[empty]</incValue>
                                <incTotal>1</incTotal>
                            </percent>
                        </stats-->
                    </do>
                </try>
              
                <try>
                    <do>
                        <removeListenpointRTPFLOW name="[inviterName]" />
                    </do>
                </try>
            </then>
        </if>

        <if>
            <condition>
                <or>
                    <test parameter="[INVITE_flag]" condition="boolean.equals" value="false" />
                    <test parameter="[RTP_flag]" condition="boolean.equals" value="false" />
                    <test parameter="[BYE_flag]" condition="boolean.equals" value="false" />
                </or>
            </condition>
            <then>
                <log level="ERROR">INVITE:[INVITE_flag]
</log>
                <log level="ERROR">INVITE:[INVITE_debug]
</log>
                <log level="ERROR">RTP:[RTP_flag]
</log>
                <log level="ERROR">RTP:[RTP_debug]
</log>
                <log level="ERROR">BYE:[BYE_flag]
</log>
                <log level="ERROR">BYE:[BYE_debug]
</log>
                <exit failed="true" />
            </then>
        </if>

    </finally>
	 
</scenario>

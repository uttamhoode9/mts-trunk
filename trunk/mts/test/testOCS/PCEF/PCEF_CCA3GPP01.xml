<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->
<!-- name="Send 3GPP Ro Credit-Control request (CCR)"-->

<!DOCTYPE Library [
  <!ENTITY sendCCRwithoutUSU SYSTEM "./Library/sendCCRwithoutUSU.xml">
  <!ENTITY sendCCRwithUSU SYSTEM "./Library/sendCCRwithUSU.xml">
]>		

<scenario>
  <!-- The Session-Id AVP is used to identify a specific session. -->
  <parameter name="[Session-Id]" operation="set" value="pcef.mts.devoteam.com;147038400;0003;PCEF_CCA3GPP01"/>

  <!-- The Subscription-Id-Type AVP is used to determine which type of identifier is carried by the Subscription-Id AVP. -->
  <!-- Possible enumerated values : END_USER_E164(0) / END_USER_IMSI(1) / END_USER_SIP_URI(2) / END_USER_NAI(3) / END_USER_PRIVATE(4). -->
  <parameter name="[Subscription-Id-Type]" operation="set" value="0"/>
  <!-- The Subscription-Id-Data AVP is used to identify the end user. -->
  <parameter name="[Subscription-Id-Data]" operation="set" value="33623770003"/>

  <!-- The Service-Identifier AVP contains the identifier of the service. The specific service the request relates to is uniquely identified by the combination of Service-Context-Id and Service-Identifier AVPs. -->
  <parameter name="[Service-Identifier]" operation="set" value="1"/>
  <!-- The Rating-Group AVP contains the identifier of a rating group. -->
  <parameter name="[Rating-Group]" operation="set" value="1"/>
 
  <!-- The CC-Request-Type AVP defines the transfer type: event for event based charging and initial, update, terminate for session based charging. -->
  <!-- Possible enumerated values : INITIAL_REQUEST(1) / UPDATE_REQUEST(2) / TERMINATION_REQUEST(3) / EVENT_REQUEST(4). -->
  <parameter name="[CC-Request-Type]" operation="set" value="1"/>

  <!-- Sending CCR INITIAL_REQUEST. -->
  &sendCCRwithoutUSU;

	<parameter name="[Time-Quota-Threshold]" operation="list.create"/>
	<parameter name="[Volume-Quota-Threshold]" operation="list.create"/>
	<parameter name="[Unit-Quota-Threshold]" operation="list.create"/>
	<parameter name="[Quota-Holding-Time]" operation="list.create"/>
	<parameter name="[Quota-Consumption-Time]" operation="list.create"/>
  <receiveMessageDIAMETER name="Receive Answer 3GPP/Gy/CCA">
		<parameter name="[msccResult-Code]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Result-Code.value"/>
		<parameter name="[grantedCC-Time]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Time.value"/>
		<parameter name="[grantedCC-Total-Octets]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Total-Octets.value"/>
		<parameter name="[grantedCC-Input-Octets]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Input-Octets.value"/>
		<parameter name="[grantedCC-Output-Octets]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Output-Octets.value"/>
		<parameter name="[Time-Quota-Threshold]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Time-Quota-Threshold.value"/>
		<parameter name="[Volume-Quota-Threshold]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Volume-Quota-Threshold.value"/>
		<!--parameter name="[Unit-Quota-Threshold]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Unit-Quota-Threshold.value"/-->
		<parameter name="[Quota-Holding-Time]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Quota-Holding-Time.value"/>
		<parameter name="[Quota-Consumption-Time]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Quota-Consumption-Time.value"/>
  </receiveMessageDIAMETER>
  <if>
    <condition>
      <test parameter="[grantedCC-Time]" condition="list.isEmpty"/>
    </condition>
    <then>
      <parameter name="[grantedCC-Time]" operation="set" value="0"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[grantedCC-Total-Octets]" condition="list.isEmpty"/>
    </condition>
    <then>
      <parameter name="[grantedCC-Total-Octets]" operation="set" value="0"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[grantedCC-Input-Octets]" condition="list.isEmpty"/>
    </condition>
    <then>
      <parameter name="[grantedCC-Input-Octets]" operation="set" value="0"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[grantedCC-Output-Octets]" condition="list.isEmpty"/>
    </condition>
    <then>
      <parameter name="[grantedCC-Output-Octets]" operation="set" value="0"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[msccResult-Code]" condition="number.equals" value="4012"/>
    </condition>
    <then>
      <goto  name="loop" label="TERMINATION_REQUEST" state="true"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:TQTbyOCS]" condition="boolean.equals" value="true"/>
      <test parameter="[Time-Quota-Threshold]" condition="list.isEmpty"/>
    </condition>
    <then>
      <exit failed="true" description="Expected Time-Quota-Threshold AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:TQTbyOCS]" condition="boolean.equals" value="false"/>
      <test parameter="[Time-Quota-Threshold]" condition="list.isEmpty" not="true"/>
    </condition>
    <then>
      <exit failed="true" description="Not expected Time-Quota-Threshold AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[Volume-Quota-Threshold]" condition="list.isEmpty" not="true"/>
    </condition>
    <then>
      <exit failed="true" description="Not expected Volume-Quota-Threshold AVP."/>
    </then>
  </if>
<!--
  <if>
    <condition>
      <test parameter="[Unit-Quota-Threshold]" condition="list.isEmpty"/>
    </condition>
    <then>
      <exit failed="true" description="Expected Unit-Quota-Threshold AVP."/>
    </then>
  </if>
-->
  <if>
    <condition>
      <test parameter="[test:QHTbyOCS]" condition="boolean.equals" value="true"/>
      <test parameter="[Quota-Holding-Time]" condition="list.isEmpty"/>
    </condition>
    <then>
      <exit failed="true" description="Expected Quota-Holding-Time AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:QHTbyOCS]" condition="boolean.equals" value="false"/>
      <test parameter="[Quota-Holding-Time]" condition="list.isEmpty" not="true"/>
    </condition>
    <then>
      <exit failed="true" description="Not expected Quota-Holding-Time AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:QCTbyOCS]" condition="boolean.equals" value="true"/>
      <test parameter="[Quota-Consumption-Time]" condition="list.isEmpty"/>
    </condition>
    <then>
      <exit failed="true" description="Expected Quota-Consumption-Time AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:QCTbyOCS]" condition="boolean.equals" value="false"/>
      <test parameter="[Quota-Consumption-Time]" condition="list.isEmpty" not="true"/>
    </condition>
    <then>
      <exit failed="true" description="Not expected Quota-Consumption-Time AVP."/>
    </then>
  </if>


	<label name="UPDATE_REQUEST"/>
  <pause seconds="2"/>
  <!-- RFC 3588 : The request contains a Session-Id AVP, which is used in subsequent messages relating to the user's session. -->

  <!-- The CC-Request-Type AVP defines the transfer type: event for event based charging and initial, update, terminate for session based charging. -->
  <!-- Possible enumerated values : INITIAL_REQUEST(1) / UPDATE_REQUEST(2) / TERMINATION_REQUEST(3) / EVENT_REQUEST(4). -->
  <parameter name="[CC-Request-Type]" operation="set" value="2"/>

  <!-- The Subscription-Id-Data AVP ([endUserSIP_URI]) is used to identify the end user. -->

  <!-- The CC-Time AVP indicates the length of the requested, granted, or used time in seconds. -->
  <parameter name="[CC-Time]" operation="set" value="[grantedCC-Time]"/>
  <!-- The CC-Total-Octets contains the total number of requested, granted, or used octets regardless of the direction (sent or received). -->
  <parameter name="[CC-Total-Octets]" operation="set" value="[grantedCC-Total-Octets]"/>
  <!-- The CC-Input-Octets AVP contains the number of requested, granted, or used octets that can be/have been received from the end user. -->
  <parameter name="[CC-Input-Octets]" operation="set" value="[grantedCC-Input-Octets]"/>
  <!-- The CC-Output-Octets AVP contains the number of requested, granted, or used octets that can be/have been sent to the end user. -->
  <parameter name="[CC-Output-Octets]" operation="set" value="[grantedCC-Output-Octets]"/>

  <!-- The Service-Identifier AVP ([Service-Identifier]) contains the identifier of the service. The specific service the request relates to is uniquely identified by the combination of Service-Context-Id and Service-Identifier AVPs. -->
  <!-- The Rating-Group AVP contains the identifier of a rating group. -->
 
  <!-- Sending CCR UPDATE_REQUEST. -->
  &sendCCRwithUSU;

	<parameter name="[Time-Quota-Threshold]" operation="list.create"/>
	<parameter name="[Volume-Quota-Threshold]" operation="list.create"/>
	<parameter name="[Unit-Quota-Threshold]" operation="list.create"/>
	<parameter name="[Quota-Holding-Time]" operation="list.create"/>
	<parameter name="[Quota-Consumption-Time]" operation="list.create"/>
  <receiveMessageDIAMETER name="Receive Answer 3GPP/Gy/CCA">
		<parameter name="[msccResult-Code]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Result-Code.value"/>
		<parameter name="[grantedCC-Time]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Time.value"/>
		<parameter name="[grantedCC-Total-Octets]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Total-Octets.value"/>
		<parameter name="[grantedCC-Input-Octets]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Input-Octets.value"/>
		<parameter name="[grantedCC-Output-Octets]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Output-Octets.value"/>
		<parameter name="[Time-Quota-Threshold]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Time-Quota-Threshold.value"/>
		<parameter name="[Volume-Quota-Threshold]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Volume-Quota-Threshold.value"/>
		<!--parameter name="[Unit-Quota-Threshold]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Unit-Quota-Threshold.value"/-->
		<parameter name="[Quota-Holding-Time]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Quota-Holding-Time.value"/>
		<parameter name="[Quota-Consumption-Time]" operation="protocol.setFromMessage" value="avp.Multiple-Services-Credit-Control.Quota-Consumption-Time.value"/>
  </receiveMessageDIAMETER>
  <if>
    <condition>
      <test parameter="[grantedCC-Time]" condition="list.isEmpty"/>
    </condition>
    <then>
      <parameter name="[grantedCC-Time]" operation="set" value="0"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[grantedCC-Total-Octets]" condition="list.isEmpty"/>
    </condition>
    <then>
      <parameter name="[grantedCC-Total-Octets]" operation="set" value="0"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[grantedCC-Input-Octets]" condition="list.isEmpty"/>
    </condition>
    <then>
      <parameter name="[grantedCC-Input-Octets]" operation="set" value="0"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[grantedCC-Output-Octets]" condition="list.isEmpty"/>
    </condition>
    <then>
      <parameter name="[grantedCC-Output-Octets]" operation="set" value="0"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[msccResult-Code]" condition="number.equals" value="4012"/>
    </condition>
    <then>
      <goto  name="loop" label="TERMINATION_REQUEST" state="true"/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:TQTbyOCS]" condition="boolean.equals" value="true"/>
      <test parameter="[Time-Quota-Threshold]" condition="list.isEmpty"/>
    </condition>
    <then>
      <exit failed="true" description="Expected Time-Quota-Threshold AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:TQTbyOCS]" condition="boolean.equals" value="false"/>
      <test parameter="[Time-Quota-Threshold]" condition="list.isEmpty" not="true"/>
    </condition>
    <then>
      <exit failed="true" description="Not expected Time-Quota-Threshold AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[Volume-Quota-Threshold]" condition="list.isEmpty" not="true"/>
    </condition>
    <then>
      <exit failed="true" description="Not expected Volume-Quota-Threshold AVP."/>
    </then>
  </if>
<!--
  <if>
    <condition>
      <test parameter="[Unit-Quota-Threshold]" condition="list.isEmpty"/>
    </condition>
    <then>
      <exit failed="true" description="Expected Unit-Quota-Threshold AVP."/>
    </then>
  </if>
-->
  <if>
    <condition>
      <test parameter="[test:QHTbyOCS]" condition="boolean.equals" value="true"/>
      <test parameter="[Quota-Holding-Time]" condition="list.isEmpty"/>
    </condition>
    <then>
      <exit failed="true" description="Expected Quota-Holding-Time AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:QHTbyOCS]" condition="boolean.equals" value="false"/>
      <test parameter="[Quota-Holding-Time]" condition="list.isEmpty" not="true"/>
    </condition>
    <then>
      <exit failed="true" description="Not expected Quota-Holding-Time AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:QCTbyOCS]" condition="boolean.equals" value="true"/>
      <test parameter="[Quota-Consumption-Time]" condition="list.isEmpty"/>
    </condition>
    <then>
      <exit failed="true" description="Expected Quota-Consumption-Time AVP."/>
    </then>
  </if>
  <if>
    <condition>
      <test parameter="[test:QCTbyOCS]" condition="boolean.equals" value="false"/>
      <test parameter="[Quota-Consumption-Time]" condition="list.isEmpty" not="true"/>
    </condition>
    <then>
      <exit failed="true" description="Not expected Quota-Consumption-Time AVP."/>
    </then>
  </if>
  <goto  name="loop" label="UPDATE_REQUEST" state="true"/>

	<label name="TERMINATION_REQUEST"/>
  <pause seconds="2"/>
  <!-- RFC 3588 : The request contains a Session-Id AVP, which is used in subsequent messages relating to the user's session. -->

  <!-- The CC-Request-Type AVP defines the transfer type: event for event based charging and initial, update, terminate for session based charging. -->
  <!-- Possible enumerated values : INITIAL_REQUEST(1) / UPDATE_REQUEST(2) / TERMINATION_REQUEST(3) / EVENT_REQUEST(4). -->
  <parameter name="[CC-Request-Type]" operation="set" value="3"/>

  <!-- The Subscription-Id-Data AVP ([endUserSIP_URI]) is used to identify the end user. -->

  <!-- The CC-Time AVP indicates the length of the requested, granted, or used time in seconds. -->
  <parameter name="[CC-Time]" operation="set" value="[grantedCC-Time]"/>
  <!-- The CC-Total-Octets contains the total number of requested, granted, or used octets regardless of the direction (sent or received). -->
  <parameter name="[CC-Total-Octets]" operation="set" value="[grantedCC-Total-Octets]"/>
  <!-- The CC-Input-Octets AVP contains the number of requested, granted, or used octets that can be/have been received from the end user. -->
  <parameter name="[CC-Input-Octets]" operation="set" value="[grantedCC-Input-Octets]"/>
  <!-- The CC-Output-Octets AVP contains the number of requested, granted, or used octets that can be/have been sent to the end user. -->
  <parameter name="[CC-Output-Octets]" operation="set" value="[grantedCC-Output-Octets]"/>

  <!-- The Service-Identifier AVP ([Service-Identifier]) contains the identifier of the service. The specific service the request relates to is uniquely identified by the combination of Service-Context-Id and Service-Identifier AVPs. -->
  <!-- The Rating-Group AVP contains the identifier of a rating group. -->
 
  <!-- Sending CCR TERMINATION_REQUEST. -->
  &sendCCRwithUSU;

  <receiveMessageDIAMETER name="Receive Answer 3GPP/Gy/CCA">
  </receiveMessageDIAMETER>

</scenario>

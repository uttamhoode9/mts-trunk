<!--
Function description: Lib_Subscriber

Library traitement des abonnes d extremite et MRFA MRFB

Input parameters:


	
Output parameters :

-->


<stats>
        	<!--counter name="[provider_Port]_ActiveSession" shortDesc="[provider_Port]_ActiveSession" description="[provider_Port]_ActiveSession" longDesc="Count of active sessions"/-->	
        	<counter name="[provider_Port]_INVITEout" shortDesc="[provider_Port]_INV_out" description="[provider_Port]_INVITE outgoing" longDesc="Send an outgoing INVITE"/>        	
		<counter name="[provider_Port]_INVITE2xxin" shortDesc="[provider_Port]_INV2xx_in" description="[provider_Port]_INVITE/2xx incoming" longDesc="Receive an incoming INVITE/2xx OK"/>        
		<counter name="[provider_Port]_ACKout" shortDesc="[provider_Port]_ACK_out" description="[provider_Port]_ACK outgoing" longDesc="Send an outgoing ACK"/>        	   
		<counter name="[provider_Port]_BYEout" shortDesc="[provider_Port]_BYE_out" description="[provider_Port]_BYE outgoing" longDesc="Send an outgoing BYE"/>        	   		
		<counter name="[provider_Port]_BYExxxin" shortDesc="[provider_Port]_BYExxx_in" description="[provider_Port]_BYE/xxx incoming" longDesc="Receive an incoming BYE/XXX OK"/>			
    	</stats>

<stats>
        	<counter name="[provider_Port]_INVITEin" shortDesc="[provider_Port]_INV_in" description="[provider_Port]_INVITE incoming" longDesc="Receive an incoming INVITE"/>
		<counter name="[provider_Port]_ACKin" shortDesc="[provider_Port]_ACK_in" description="[provider_Port]_ACK incoming" longDesc="Receive an incoming ACK"/>        
		<counter name="[provider_Port]_BYEin" shortDesc="[provider_Port]_BYE_in" description="[provider_Port]_BYE incoming" longDesc="Receive an incoming BYE"/>			
</stats>



	<parameter name="[indexUser]" operation="set" value="0"/>    			

	<!-- calculate the range of user from the csv files -->
	<parameter name="[RangeNumberUser]" operation="size" value="[inviteeTab]"/>    		
	<parameter name="[TempRangeNumberUser]" operation="size" value="[inviterTab]"/>    		
	<if>
	    <condition>
		<test parameter="[TempRangeNumberUser]" condition="lowerThan" value="[RangeNumberUser]"/>
	    </condition>
	    <then>
	    	<parameter name="[RangeNumberUser]" operation="set" value="[TempRangeNumberUser]"/>
	    </then>
	</if>
	<parameter name="[RangeNumberUser]" operation="substract" value="[RangeNumberUser]" value2="1"/>    	

	<parameter name="[TempDuration]" operation="set" value="[TryingDuration]"/>    	
	<!--parameter name="[TempDuration]" operation="add" value="[TempDuration]" value2="[T_MRFA_BYE]"/-->    	
	<parameter name="[TempDuration]" operation="add" value="[TempDuration]" value2="[CallDurationSec]"/>    	
	<parameter name="[TempDuration]" operation="add" value="[TempDuration]" value2="40"/>    	

	
	<!-- start main loop -->	
	<label name="begin"/>
	
	<parameter name="[received]" operation="set" value="false"/>		
	<receiveMessage name="wait_SIP_request" timeout="[TempDuration]" failedOnTimeout="false">
		<parameter name="[received]" operation="set" value="true"/>	
		<parameter name="[lastMethod]" operation="setFromMessage" value="message:type"/>	
		<parameter name="[lastIsRequest]" operation="setFromMessage" value="message:request"/>  		
		<parameter name="[lastResult]" operation="setFromMessage" value="message:result"/>  				
		<parameter name="[lastFirstline]" operation="setFromMessage" value="firstline"/>  	
		<parameter name="[lastTo]" operation="setFromMessage" value="header:To"/>  	
		<parameter name="[lastToUser]" operation="setFromMessage" value="header:To:Address:URI:User"/>  	
	  	<parameter name="[lastFrom]" operation="setFromMessage" value="header:From"/>  	
		<parameter name="[lastFromUser]" operation="setFromMessage" value="header:From:Address:URI:User"/>	
	  	<parameter name="[lastFromTag]" operation="setFromMessage" value="header:From:parameter:tag"/>  	  	
	  	<parameter name="[lastCallId]" operation="setFromMessage" value="header:Call-ID"/>		  		  	
	  	<parameter name="[lastCSeq]" operation="setFromMessage" value="header:CSeq"/>
    		<parameter name="[lastCSeqNumber]" operation="setFromMessage" value="header:CSeqNumber"/>   	  	
	  	<parameter name="[lastVia]" operation="setFromMessage" value="header:Via"/>    	
	  	<parameter name="[lastRoute]" operation="setFromMessage" value="header:Route"/>
		<parameter name="[lastRouteUser]" operation="setFromMessage" value="header:Route:Address:URI:User"/>      		  		  	
	  	<parameter name="[lastRecordRoute]" operation="setFromMessage" value="header:Record-Route"/>		  	
	  	<parameter name="[lastContact]" operation="setFromMessage" value="header:Contact"/>		  		  	
    		<parameter name="[lastContactURI]" operation="setFromMessage" value="header:Contact:Address:URI"/>		  		  	
	  	<parameter name="[lastMax-Forwards]" operation="setFromMessage" value="header:Max-Forwards"/>		  		  	
		<parameter name="[lastHeaderOthers]" operation="setFromMessage" value="header:Others"/>		  		  		  	
	  	<parameter name="[lastContent]" operation="setFromMessage" value="content"/>		  		  	
	  	<parameter name="[lastServiceTrigger]" operation="setFromMessage" value="header:ServiceTrigger"/>		  		  		  	
	  	<parameter name="[lastMessage]" operation="setFromMessage" value="message"/>		  		  		  		  	
	</receiveMessage>
	
	<parameter name="[lastRouteUser]" operation="set" value="12345678"/>

	<if>
	    <condition>
		    <test parameter="[received]" condition="equals" value="false"/>		  		  		    		  		  	
	    </condition>
	    <then>
	       <exit name="exit" failed="false"/>
	    </then>	    
	</if>
	
	<if>
	    <condition>
		<test parameter="[lastIsRequest]" condition="equals" value="true"/>		  		  		    
	    	<test parameter="[lastMethod]" condition="equals" value="INVITE"/>		  		  	
	    </condition>
	    <then>
		<goto  name="goto_recINVITE" label="recINVITE" state="true"/>	    	
	    </then>
	</if>

	<if>
	    <condition>
		  <test parameter="[lastIsRequest]" condition="equals" value="true"/>		  		  		    
	    <test parameter="[lastMethod]" condition="equals" value="ACK"/>		  		  	
	    </condition>
	    <then>
	  	<stats>
  		    <counter name="[provider_Port]_ACKin"><increase>1</increase></counter>
    		</stats>
  
<!--
SWESWE 
lancement de la seconde partie du traitement http depuis MRFA apres reception du ACK
-->

<if>
<condition>
<test parameter="[WhichSide]" condition="equals" value="MRFASide"/>	  		  		    		  		  	
</condition>
<then>
&lib_http_MRFA_2;
</then></if>

<if>
<condition>
<test parameter="[WhichSide]" condition="equals" value="MRFBSide"/>	  		  		    		  		  	
</condition>
<then>
&lib_http_MRFB_2;
</then></if>

<!--
SWESWE 
FIN lancement de la seconde partie du traitement http depuis MRFA apres reception du ACK
-->
  
    		
    <!-- SWESWE
    Envoi BYE par le subs_A qd ACK est recu cote SUBS_A
    Envoi BYE par le MRF_B qd ACK est recu cote MRF_B
    -->
    

<parameter name="[temp_value1]" operation="set" value="false"/>
<parameter name="[temp_value2]" operation="set" value="false"/>

<if>
<condition>
<test parameter="[WhichSide]" condition="equals" value="MRFBSide"/>	  		  		    		  		  	
</condition>
	<then>
  <parameter name="[temp_value1]" operation="set" value="true"/>
  <parameter name="[ByeDelay]" operation="set" value="[T_MRFB_BYE]"/>
  </then>
</if>

<if>
<condition>
<test parameter="[WhichSide]" condition="equals" value="SubsASide"/>			    		  		  	
</condition>
	<then>
  <parameter name="[temp_value2]" operation="set" value="true"/>
  <parameter name="[ByeDelay]" operation="set" value="[CallDurationSec]"/>
  </then>
</if>

<parameter name="[SendTheBye]" operation="set" value="false"/>
<parameter name="[SendTheBye]" operation="or" value="[temp_value1]" value2="[temp_value2]"/>
    
 	  <if>
	    <condition>
		<test parameter="[SendTheBye]" condition="equals" value="true"/>		  		  		    		  		  	
	    </condition>
	    <then>
  	<parameter name="[newCseqNumber]" operation="identifier" value="nextInteger" value2="10000000"/>
	  <parameter name="[newBranchId]" operation="identifier" value="newString" value2="10"/>

<!-- SWESWESWE	
Mise en commentaire de l'emission du BYE lors des tests avec Bouchons de charge car BYE non acquite par
les bouchons => reemission parasite du BYE
-->

<!--

<log level="3">Balise lastFrom = [lastFrom]</log>
<log level="3">Balise lastFromUser = [lastFromUser]</log>
-->

<!--

    <sendRequestSIP name="Send BYE" delay="[ByeDelay]" providerName="[provider_Name]">

        <![CDATA[
BYE sip:[Host-Server] SIP/2.0
To: [lastFrom]
From: [lastTo]
Call-ID: [lastCallId]
CSeq: [newCseqNumber] BYE
Max-Forwards: 70
Via: SIP/2.0/UDP [Host-Tester]:[provider_Port];branch=z9hG4bK[newBranchId]
Route: <sip:[Host-Server]:[Port-Server];lr;call=orig>
Contact: <sip:[lastFromUser(0)]@[Adresse-Tester];transport=udp>
Content-Length: 0
        
]]></sendRequestSIP>

-->
<!--
SWESWE: Modification 09022009 suppression du lastFromUser car en charge 
cet indice pouvait de temps a autre etre vide
-->
    <sendRequestSIP name="Send BYE" delay="[ByeDelay]" providerName="[provider_Name]">

        <![CDATA[
BYE sip:[Host-Server] SIP/2.0
To: [lastFrom]
From: [lastTo]
Call-ID: [lastCallId]
CSeq: [newCseqNumber] BYE
Max-Forwards: 70
Via: SIP/2.0/UDP [Host-Tester]:[provider_Port];branch=z9hG4bK[newBranchId]
Route: <sip:[Host-Server]:[Port-Server];lr;call=orig>
Contact: <sip:[Adresse-Tester];transport=udp>
Content-Length: 0
        
]]></sendRequestSIP>


</then></if>
	    
    
    
    
    <!-- FIN SWESWE
    Envoi BYE par le subs_A qd ACK est recu cote SUBS_A
    Envoi BYE par le MRF_A qd ACK est recu cote MRF_A
    -->     
  	    	    	
		<goto  name="goto_begin" label="begin" state="true"/>	    	    		
	    </then>
	</if>

	<if>
	    <condition>
	    	<test parameter="[received]" condition="equals" value="true"/>		  		  		    
		<test parameter="[lastIsRequest]" condition="equals" value="false"/>		  		  		    		
	    	<test parameter="[lastMethod]" condition="equals" value="INVITE"/>
	    	<test parameter="[lastResult]" condition="matches" value="[2-9][0-9][0-9]"/>	    		    	
	    </condition>
	    <then>
		<goto  name="goto_Request" label="recINVITE23456xx" state="true"/>	    	
	    </then>
	</if>

	<if>
	    <condition>
	    	<test parameter="[received]" condition="equals" value="true"/>		  		  		    	    
		<test parameter="[lastIsRequest]" condition="equals" value="true"/>		  		  		    
	    </condition>
	    <then>
		<goto  name="goto_recOTHERS" label="recOTHERS" state="true"/>	    	
	    </then>
	</if>

	<if>
	    <condition>
	    	<test parameter="[received]" condition="equals" value="true"/>		  		  		    
		<test parameter="[lastIsRequest]" condition="equals" value="false"/>		  		  		    		
	    </condition>
	    <then>
		<goto  name="goto_recOTHERSxxx" label="recOTHERSxxx" state="true"/>	    	
	    </then>
	</if>

        <goto  name="goto_begin" label="begin" state="true"/>	    	                        
	<!-- end main loop -->	
		
	<label name="recINVITE"/>	
	
  	<stats>
  	    <counter name="[provider_Port]_INVITEin"><increase>1</increase></counter>
    	</stats>	    	    	

  	<parameter name="[newToTag]" operation="identifier" value="newString" value2="10"/>
  	
 	<sendResponseSIP name="Send 100 Trying" delay="0" providerName="[provider_Name]">
<![CDATA[
SIP/2.0 100 Trying
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Via: [lastVia]
Content-Length: 0

]]>			
  	</sendResponseSIP>



<!-- 
SWESWE
Non envoi du 180 Invite_3(Invite recu par Subs_A) et Invite_4 (2ieme Invite vers Subs_B) 
-->

<parameter name="[ParamTest]" operation="set"    value=":" />
		<parameter name="[ParamTest]" operation="concat" value="[ParamTest]" value2="[Port-Subs_B]" />

<parameter name="[temp_value1]" operation="set" value="false"/>
<parameter name="[temp_value2]" operation="set" value="false"/>

<if>
<condition>
  <test parameter="[WhichSide]" condition="equals" value="SubsBSide"/>
  <test parameter="[lastFirstline]" condition="contains" value="[ParamTest]"/>	  		  		    		  		  	
</condition>
	<then>
  <parameter name="[temp_value1]" operation="set" value="true"/>
  </then>
</if>

<if>
<condition>
  <test parameter="[WhichSide]" condition="equals" value="SubsASide"/>
  <!-- SWESWE Modification 29012009
  <test parameter="[lastContent]" condition="isEmpty"/>
  --> 		  		    		  		  	
</condition>
	<then>
  <parameter name="[temp_value2]" operation="set" value="true"/>
  </then>
</if>

<parameter name="[DoNotSend180]" operation="or" value="[temp_value1]" value2="[temp_value2]"/>

<if>
<condition>
<test parameter="[DoNotSend180]" condition="equals" value="true"/>
</condition>
<then>
</then>
<else>
  
        <sendResponseSIP name="Send 180 Ringing" delay="[TryingDuration]" providerName="[provider_Name]">
<![CDATA[
SIP/2.0 180 Ringing
To: [lastTo];tag=[newToTag]
From: [lastFrom]
Call-ID: [lastCallId]
Contact: <sip:[lastRouteUser(0)]@[Host-Tester]:[provider_Port];transport=udp>
CSeq: [lastCSeq]
Via: [lastVia]
Record-Route: [lastRecordRoute]
Allow: ACK, BYE, CANCEL, INFO, INVITE, OPTIONS, PRACK, REFER, NOTIFY
P-Charging-Vector: icid-value=ffdd90da03ec4107ba5c96d362dfd
P-Charging-Function-Addresses: ccf="aaa://devitimmm1.sip.pfdev.fr:3868;transport=tcp";ccf="aaa://devitimmm1.sip.pfdev.fr:3868;transport=tcp"
Content-Length: 0

]]>			
        </sendResponseSIP>
</else></if> 
<!-- 
FIN SWESWE
Non envoi du 180 Invite_3(Invite recu par Subs_A) et Invite_4 (2ieme Invite vers Subs_B) 
-->





<!-- 
SWESWE
Lancement traitement HTTP MRFA ou MRFB suite a reception de l INVITE
-->

<if>
<condition>
<test parameter="[WhichSide]" condition="equals" value="MRFASide"/>	  		  		    		  		  	
</condition>
<then>

<parameter name="[preSessionId]" operation="regexMatches" value="[lastFirstline]" value2="%3d[^ ]*"/>
<parameter name="[SessionId]" operation="regexReplaces" value="[preSessionId]" value2="%3d" value3=""/>

&lib_http_MRFA_1;

</then></if>

<if>
<condition>
<test parameter="[WhichSide]" condition="equals" value="MRFBSide"/>	  		  		    		  		  	
</condition>
<then>

<parameter name="[preSessionId]" operation="regexMatches" value="[lastFirstline]" value2="%3d[^ ]*"/>
<parameter name="[SessionId]" operation="regexReplaces" value="[preSessionId]" value2="%3d" value3=""/>

&lib_http_MRFB_1;

</then></if>


<!-- 
FIN SWESWE
Lancement traitement HTTP MRFA suite a reception de l IVITE
-->

  	<parameter name="[indexUser]" operation="add" value="[indexUser]" value2="1"/>    			
       	<if>
	    <condition>
		<test parameter="[indexUser]" condition="greaterThan" value="[RangeNumberUser]"/>       	     
    	    </condition>
    	    <then>
		<parameter name="[indexUser]" operation="set" value="0"/>    				    	
	    </then>
	</if>
	
	<parameter name="[tempPortRTP]" operation="multiply" value="[indexUser]" value2="2"/>
	<parameter name="[portRTP]" operation="add" value="[RangePortRTP-UAS]" value2="[tempPortRTP]"/>    			
  
        <sendResponseSIP name="Send 200 OK" delay="[RingingDuration]" providerName="[provider_Name]">
<![CDATA[
SIP/2.0 200 OK
From: [lastFrom]
To: [lastTo];tag=[newToTag]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Via: [lastVia]
Allow: ACK, BYE, CANCEL, INFO, INVITE, OPTIONS, PRACK, REFER, NOTIFY
Accept:multipart/mixed,application/media_control+xml,application/sdp
Contact: <sip:[lastRouteUser(0)]@[Host-Tester]:[provider_Port];transport=udp>
Record-Route: [lastRecordRoute]
P-Charging-Vector: icid-value=ffdd90da03ec4107ba5c96d362dfd;orig-ioi=sip.pfdev.fr;term-ioi=sip.pfdev.fr
P-Charging-Function-Addresses: ccf="aaa://devitimmm1.sip.pfdev.fr:3868;transport=tcp";ccf="aaa://devitimmm1.sip.pfdev.fr:3868;transport=tcp"
Content-Type: application/sdp
Content-Length: x

v=0
o=[lastRouteUser(0)] 2211961014 2211961014 IN IP4 [Host-Tester]
s=VOIP P160SLD 02.11.08
c=IN IP4 [Host-Tester]
t=0 0
m=audio [portRTP] RTP/AVP 0 18 4
a=rtpmap:0 PCMU/8000/1
a=rtpmap:18 G729/8000/1
a=fmtp:18 annexb=no
a=rtpmap:4 G723/8000/1
a=sendrecv
			
]]>			
            		</sendResponseSIP>



	<goto  name="goto_begin" label="begin" state="true"/>	    	

	<label name="recINVITE23456xx"/>	

	<if>
	    <condition>
	    	<test parameter="[lastResult]" condition="matches" value="[3-9][0-9][0-9]"/>	    		    	
	    </condition>
	    <then>
	    	<log type="Main" level="ERROR">
		<![CDATA[	    	
	    	StatusCode = #[lastResult] for the call from "[lastFromUser]" to "[lastToUser]" 
message : [lastMessage]
		]]>		
		</log>
	    </then>
	</if>
	
  	<stats>
  	    	<counter name="[provider_Port]_ACKout"><increase>1</increase></counter>
    	</stats>	    	    			
    
      	<parameter name="[newBranchId]" operation="identifier" value="newString" value2="10"/>
      	
  	<sendRequestSIP name="Send ACK" delay="0" providerName="[provider_Name]">
<![CDATA[
ACK sip:[Host-Server] SIP/2.0
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeqNumber] ACK
Max-Forwards: 70
Via: SIP/2.0/UDP [Adresse-Tester];branch=z9hG4bK[newBranchId]
Route: <sip:[lastToUser]@[Adresse-Server];lr;call=orig>
Route: <sip:[lastToUser]@[Adresse-Tester];lr>
Route: <sip:[lastToUser]@[Adresse-Tester];lr>
Contact: <sip:[lastFromUser(0)]@[Adresse-Tester];transport=udp>
User-Agent: XMLLoader
Content-Length: 0

]]>
  	</sendRequestSIP>

	<if>
	    <condition>
	    	<test parameter="[lastResult]" condition="matches" value="[3-9][0-9][0-9]"/>	    		    	
	    </condition>
	    <then>
	  	<!--stats>
  		    <counter name="[provider_Port]_ActiveSession"><decrease>1</decrease></counter>  	
    		</stats-->	    	    		  
		<goto  name="goto_begin" label="begin" state="true"/>	    	                
	    </then>
	</if>


  	<stats>
  	    	<counter name="[provider_Port]_INVITE2xxin"><increase>1</increase></counter>  	
  	    	<counter name="[provider_Port]_BYEout"><increase>1</increase></counter>
    	</stats>	    	    			

<!-- 
SWESWE: on n envoit plus un BYE systematiquement apres un ACK
-->
<!-- 
      	<parameter name="[newBranchId]" operation="identifier" value="newString" value2="10"/>
  	<parameter name="[newCseqNumber]" operation="identifier" value="nextInteger" value2="10000000"/>
    
  	<sendRequestSIP name="Send BYE" delay="[CallDurationSec]" providerName="[provider_Name]"> 
<![CDATA[
BYE sip:[Host-Server] SIP/2.0
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [newCseqNumber] BYE
Max-Forwards: 70
Via: SIP/2.0/UDP [Adresse-Tester];branch=z9hG4bK[newBranchId]
Route: <sip:[lastToUser]@[Adresse-Server];lr;call=orig>
Route: <sip:[lastToUser]@[Adresse-Tester];lr>
Route: <sip:[lastToUser]@[Adresse-Tester];lr>
Contact: <sip:[lastFromUser(0)]@[Adresse-Tester];transport=udp>
Content-Length: 0

]]>
  	</sendRequestSIP>
-->
<!-- 
FIN SWESWE: on n envoit plus un BYE systematiquement apres un ACK
-->
                
	<goto  name="goto_begin" label="begin" state="true"/>	    	                
	
	<label name="recOTHERS"/>	

	<if>
	    <condition>
	    	<test parameter="[lastMethod]" condition="equals" value="BYE"/>
	    </condition>
	    <then>
	  	<stats>
  		    <counter name="[provider_Port]_BYEin"><increase>1</increase></counter>
    		</stats>	    	    	
	    </then>
	</if>
  
    	<parameter name="[newToTag]" operation="identifier" value="newString" value2="10"/>
    	
        <sendResponseSIP name="Send 200 OK" delay="0" providerName="[provider_Name]">
<![CDATA[
SIP/2.0 200 OK
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Via: [lastVia]
Content-Length: 0

]]>
        </sendResponseSIP>

	<goto  name="goto_begin" label="begin" state="true"/>	    	

        <label name="recOTHERSxxx"/>	

  	<stats>
  	    <!--counter name="[provider_Port]_ActiveSession"><decrease>1</decrease></counter-->  	
  	    <!--
        -->
        <counter name="[provider_Port]_BYExxxin"><increase>1</increase></counter>
    	</stats>	    	    	
	
	<goto  name="goto_begin" label="begin" state="true"/>
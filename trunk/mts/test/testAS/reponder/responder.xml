<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>

  	<createListenpointSIP name="provider" localHost="[Host-Tester]" localPort="[Port-Tester]" transport="UDP"/>

	<parameter name="[indexUser]" operation="set" value="0"/>    			

	<!-- calculate the range of user from the csv files -->
	<parameter name="[RangeNumberUser]" operation="list.size" value="[inviteeTab]"/>    		
	<parameter name="[TempRangeNumberUser]" operation="list.size" value="[inviterTab]"/>    		
	<if>
	    <condition>
		<test parameter="[TempRangeNumberUser]" condition="number.lowerThan" value="[RangeNumberUser]"/>
	    </condition>
	    <then>
	    	<parameter name="[RangeNumberUser]" operation="set" value="[TempRangeNumberUser]"/>
	    </then>
	</if>
	<parameter name="[RangeNumberUser]" operation="number.substract" value="[RangeNumberUser]" value2="1"/>    	

	<parameter name="[TempDuration]" operation="set" value="[TryingDuration]"/>    	
	<parameter name="[TempDuration]" operation="number.add" value="[TempDuration]" value2="[RingingDuration]"/>    	
	<parameter name="[TempDuration]" operation="number.add" value="[TempDuration]" value2="[CallDuration2]"/>    	
	<parameter name="[TempDuration]" operation="number.add" value="[TempDuration]" value2="10"/>    	
	
	<!-- start main loop -->	
	<label name="begin"/>

	<stats>
   	    <counter name="ActiveSession" summary="Act Sess" complete="Count of active sessions"/>	
   	    <counter name="INVITEout" summary="INV_out" complete="Send an outgoing INVITE"/>        	
		<counter name="INVITESessAudit" summary="INV_audit" complete="INVITE send for the Session Audit"/>   	
		<counter name="INVITE2xxin" summary="INV2xx_in" complete="Receive an incoming INVITE/2xx OK"/>        
		<counter name="ACKout" summary="ACK_out" complete="Send an outgoing ACK"/>        	   
		<counter name="BYEout" summary="BYE_out" complete="Send an outgoing BYE"/>        	   		
		<counter name="BYExxxin" summary="BYExxx_in" complete="Receive an incoming BYE/XXX OK"/>			
   	</stats>

	<stats>
        <counter name="INVITElost" summary="INV_lost" complete="INVITE send but not received"/>
		<counter name="ACKlost" summary="ACK_lost" complete="ACK send but not received"/>        		
		<counter name="BYElost" summary="BYE_lost" complete="BYE send but not received"/>			
   	</stats>
	
	<parameter name="[received]" operation="set" value="false"/>		
	<receiveMessageSIP name="wait_SIP_request" timeout="[TempDuration]" failedOnTimeout="false">
		<parameter name="[received]" operation="set" value="true"/>	
		<parameter name="[lastMethod]" operation="protocol.setFromMessage" value="message.type"/>	
		<parameter name="[lastIsRequest]" operation="protocol.setFromMessage" value="message.request"/>  		
		<parameter name="[lastResult]" operation="protocol.setFromMessage" value="message.result"/>  				  	
		<parameter name="[lastTo]" operation="protocol.setFromMessage" value="header.To"/>  	
		<parameter name="[lastToUser]" operation="protocol.setFromMessage" value="header.To.Address.URI.User"/>  	
	  <parameter name="[lastFrom]" operation="protocol.setFromMessage" value="header.From"/>  	
		<parameter name="[lastFromUser]" operation="protocol.setFromMessage" value="header.From.Address.URI.User"/>	
	  	<parameter name="[lastToTag]" operation="protocol.setFromMessage" value="header.To.parameter.tag"/>  	  	
	  	<parameter name="[lastCallId]" operation="protocol.setFromMessage" value="header.Call-ID"/>		  		  	
	  	<parameter name="[lastCSeq]" operation="protocol.setFromMessage" value="header.CSeq"/>
    	<parameter name="[lastCSeqNumber]" operation="protocol.setFromMessage" value="header.CSeq.Number"/>   	  	
	  	<parameter name="[lastVia]" operation="protocol.setFromMessage" value="header.Via"/>    		  	
		<parameter name="[lastRouteUser]" operation="protocol.setFromMessage" value="header.Route.Address.URI.User"/>      		  		  			  			  		  			  		  	
	  	<parameter name="[lastPAssertedIdentity]" operation="protocol.setFromMessage" value="header.P-Asserted-Identity"/>		  		  			  		  		  			  		  			  		  		  	
	  	<parameter name="[lastMessage]" operation="protocol.setFromMessage" value="message"/>		  		  		  		  	
	</receiveMessageSIP>

	<if>
	    <condition>
		    <test parameter="[received]" condition="string.equals" value="false"/>		  		  		    		  		  	
	    </condition>
	    <then>
	       <exit name="exit" failed="false"/>
	    </then>	    
	</if>
	
	<!-- receive initial INVITE request message -->
	<if>
	    <condition>
		    <test parameter="[lastIsRequest]" condition="string.equals" value="true"/>		  		  		    
	    	<test parameter="[lastMethod]" condition="string.equals" value="INVITE"/>		  		  	
	    	<test parameter="[lastToTag]" condition="list.isEmpty"/>
	    </condition>
	    <then>
		<goto  name="goto_recINVITE" label="recINVITE" state="true"/>	    	
	    </then>
	</if>

	<!-- receive session audit INVITE request message -->
	<if>
	    <condition>
		    <test parameter="[lastIsRequest]" condition="string.equals" value="true"/>		  		  		    
	    	<test parameter="[lastMethod]" condition="string.equals" value="INVITE"/>
        <not><test parameter="[lastToTag]" condition="list.isEmpty"/></not>		  		  	
	    </condition>
	    <then>
		<goto  name="goto_recINVITE" label="recINVITESessAudit" state="true"/>	    	
	    </then>
	</if>
	
	<!-- receive initial ACK request message -->
	<if>
	    <condition>
		    <test parameter="[lastIsRequest]" condition="string.equals" value="true"/>		  		  		    
	    	<test parameter="[lastMethod]" condition="string.equals" value="ACK"/>
        <not><test parameter="[Context_SessAudit_[lastCallId]]" condition="list.exists"/></not>
	    </condition>
	    <then>
		    <goto  name="goto_recACK" label="recACK" state="true"/>	    	
	    </then>
	</if>

	<!-- receive session audit ACK request message -->
	<if>
	    <condition>
		    <test parameter="[lastIsRequest]" condition="string.equals" value="true"/>		  		  		    
	    	<test parameter="[lastMethod]" condition="string.equals" value="ACK"/>
        <test parameter="[Context_SessAudit_[lastCallId]]" condition="list.exists"/>
	    </condition>
	    <then>
    		<goto  name="goto_begin" label="begin" state="true"/>	    	    		
	    </then>
	</if>

	<!-- receive final [2-6]XX (exclude provisional one) response message for the INVITE request message -->
	<if>
	    <condition>		  		  		    
    		<test parameter="[lastIsRequest]" condition="string.equals" value="false"/>		  		  		    		
	    	<test parameter="[lastMethod]" condition="string.equals" value="INVITE"/>
	    	<test parameter="[lastResult]" condition="number.greaterEqualThan" value="200"/>	    		    	
	    </condition>
	    <then>
		<goto  name="goto_Request" label="recINVITE23456xx" state="true"/>	    	
	    </then>
	</if>

  <!-- receive OTHER request message (BYE, CANCEL, ...) -->
	<if>
	    <condition>		  		  		    	    
		    <test parameter="[lastIsRequest]" condition="string.equals" value="true"/>	    	  		  		    
	    </condition>
	    <then>
		<goto  name="goto_recOTHERS" label="recOTHERS" state="true"/>	    	
	    </then>
	</if>

	<!-- receive response message for the OTHER request message (BYE, CANCEL, ...) -->
	<if>
	    <condition>		  		  		    
		    <test parameter="[lastIsRequest]" condition="string.equals" value="false"/>    		  		  		    		
	    </condition>
	    <then>
		<goto  name="goto_recOTHERSxxx" label="recOTHERSxxx" state="true"/>	    	
	    </then>
	</if>

        <goto  name="goto_begin" label="begin" state="true"/>	    	                        
	<!-- end main loop -->	
		
  <!-- jump for receive initial INVITE request message -->
	<label name="recINVITE"/>	
	
  	<stats>
  	    <counter name="INVITElost"><decrease>1</decrease></counter>
    	</stats>	    	    	

  	<parameter name="[newToTag]" operation="string.random" value="10"/>
  	
 	<sendMessageSIP name="Send 100 Trying" delay="0" listenpoint="provider" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
SIP/2.0 100 Trying
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Via: [lastVia]
Content-Length: 0

]]>			
  	</sendMessageSIP>
  
        <sendMessageSIP name="Send 180 Ringing" delay="[TryingDuration]" listenpoint="provider" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
SIP/2.0 180 Ringing
To: [lastTo];tag=[newToTag]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Content-Length: 0
Via: [lastVia]
Record-Route: <sip:3Zqkv7%0BaGqiqU5TPKqsip%3A+33975621722%40sip.mobistar.com@scscf.sip.mobistar.fr:7050;lr;maddr=[Adresse-Tester]>
Record-Route: <sip:3Zqkv7%0BaGqiqU5TPL4sip%3A+33975621721%40sip.mobistar.com@scscf.sip.mobistar.fr:7070;lr;maddr=[Adresse-Tester]>
Contact: <sip:[lastFromUser(0)]@[Adresse-Server]>
Allow: ACK, BYE, CANCEL, INFO, INVITE, OPTIONS, PRACK, REFER, NOTIFY, UPDATE
P-Asserted-Identity: [lastPAssertedIdentity]
P-Charging-Vector: icid-value=eqrc7g46o1823o87ihckjqk63rr4nida92k2jr86ehc03n46k9cs2pc6o9c6jp07o1g2jr86ehc03n46k9cs2pc6o1;orig-ioi=sip.mobistar.fr;term-ioi=sip.mobistar.fr
P-Charging-Function-Addresses: ccf="aaa://pcfa2.sip.mobistar.fr:3868;transport=tcp"
]]>			
        </sendMessageSIP>


  	<parameter name="[indexUser]" operation="number.add" value="[indexUser]" value2="1"/>    			
       	<if>
	    <condition>
		<test parameter="[indexUser]" condition="number.greaterThan" value="[RangeNumberUser]"/>       	     
    	    </condition>
    	    <then>
		<parameter name="[indexUser]" operation="set" value="0"/>    				    	
	    </then>
	</if>
	
	<parameter name="[tempPortRTP]" operation="number.multiply" value="[indexUser]" value2="2"/>
	<parameter name="[portRTP]" operation="number.add" value="[RangePortRTP-UAS]" value2="[tempPortRTP]"/>    			
  
        <sendMessageSIP name="Send 200 OK" delay="[RingingDuration]" listenpoint="provider" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
SIP/2.0 200 OK
To: [lastTo];tag=[newToTag]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Content-Length: x
Via: [lastVia]
Record-Route: <sip:3Zqkv7%0BaGqiqU5TQnysip%3A+33975621722%40sip.mobistar.com@scscf.sip.mobistar.fr:7070;maddr=[Adresse-Tester];lr>
Contact: <sip:[lastFromUser(0)]@[Adresse-Server]>
Content-Type: application/sdp
Allow: ACK, BYE, CANCEL, INVITE, NOTIFY, REFER, DO, UPDATE, OPTIONS, SUBSCRIBE, INFO
Require: timer
Supported: timer, replaces
P-Asserted-Identity: [lastPAssertedIdentity]
Session-Expires: 86400;refresher=uac
P-Charging-Vector: icid-value=eqrc7g46o1823o87ihckjqk63rr4nida92k2jr86ehc03n46k9cs2pc6o9c6jp07o1g2jr86ehc03n46k9cs2pc6o1;orig-ioi=sip.mobistar.fr;term-ioi=sip.mobistar.fr
P-Charging-Function-Addresses: ccf="aaa://pcfa1.sip.mobistar.fr:3868;transport=tcp"

v=0
o=[lastToUser] 2211961014 2211961014 IN IP4 [Host-Tester]
s=VOIP P160SLD 02.11.08
c=IN IP4 [Host-Tester]
t=0 0
m=audio [portRTP] RTP/AVP 0 18 4
a=rtpmap:0 PCMU/8000/1
a=rtpmap:18 G729/8000/1
a=fmtp:18 annexb=no
a=rtpmap:4 G723/8000/1
a=sendrecv
			
]]>			
            		</sendMessageSIP>

	<goto  name="goto_begin" label="begin" state="true"/>	    	
	<!-- end main loop -->
	
	<!-- jump for receive session audit INVITE request message -->
	<label name="recINVITESessAudit"/>	
	  
	  	  <parameter name="Context_SessAudit_[lastCallId]" operation="list.set" value="true"/>
      	<stats>
  		    <counter name="INVITESessAudit"><increase>1</increase></counter>
    		</stats>	    	    	
		  	  
        <sendMessageSIP name="Send 200 OK" listenpoint="provider" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
SIP/2.0 200 OK
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Content-Length: x
Via: [lastVia]
Record-Route: <sip:3Zqkv7%0BaGqiqU5TQnysip%3A+33975621722%40sip.mobistar.com@scscf.sip.mobistar.fr:7070;maddr=[Adresse-Tester];lr>
Contact: <sip:[lastFromUser(0)]@[Adresse-Server]>
Content-Type: application/sdp
Allow: ACK, BYE, CANCEL, INVITE, NOTIFY, REFER, DO, UPDATE, OPTIONS, SUBSCRIBE, INFO
Require: timer
Supported: timer, replaces
P-Asserted-Identity: [lastPAssertedIdentity]
Session-Expires: 86400;refresher=uac
P-Charging-Vector: icid-value=eqrc7g46o1823o87ihckjqk63rr4nida92k2jr86ehc03n46k9cs2pc6o9c6jp07o1g2jr86ehc03n46k9cs2pc6o1;orig-ioi=sip.mobistar.fr;term-ioi=sip.mobistar.fr
P-Charging-Function-Addresses: ccf="aaa://pcfa1.sip.mobistar.fr:3868;transport=tcp"

v=0
o=[lastToUser] 2211961014 2211961014 IN IP4 [Host-Tester]
s=VOIP P160SLD 02.11.08
c=IN IP4 [Host-Tester]
t=0 0
m=audio [portRTP] RTP/AVP 0 18 4
a=rtpmap:0 PCMU/8000/1
a=rtpmap:18 G729/8000/1
a=fmtp:18 annexb=no
a=rtpmap:4 G723/8000/1
a=sendrecv
			
]]>			
            		</sendMessageSIP>

	<goto  name="goto_begin" label="begin" state="true"/>	    	
	<!-- end main loop -->
	
  <!-- jump for receive final [2-6]XX (exclude provisional one) response message for the INVITE request message -->	
	<label name="recINVITE23456xx"/>	

	<if>
	    <condition>
	    	<test parameter="[lastResult]" condition="number.greaterEqualThan" value="300"/>	    		    	
	    </condition>
	    <then>
	    	<log type="Main" level="WARN">
		<![CDATA[	    	
	    	StatusCode = #[lastResult] for the call from "[lastFromUser]" to "[lastToUser]" 
message : [lastMessage]
		]]>		
		</log>
	    </then>
	</if>
	
  	<stats>
  	    	<counter name="ACKout"><increase>1</increase></counter>
  	    	<counter name="ACKlost"><increase>1</increase></counter>
    	</stats>	    	    			
    
      	<parameter name="[newBranchId]" operation="string.random" value="10"/>
      	
  	<sendMessageSIP name="Send ACK" delay="0" listenpoint="provider" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
ACK sip:[Host-Server] SIP/2.0
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeqNumber] ACK
Max-Forwards: 70
Via: SIP/2.0/UDP [Adresse-Tester];branch=z9hG4bK[newBranchId]
Contact: <sip:[lastFromUser(0)]@[Adresse-Tester];transport=udp>
User-Agent: XMLLoader
Content-Length: 0

]]>
  	</sendMessageSIP>

	<if>
	    <condition>
	    	<test parameter="[lastResult]" condition="string.matches" value="[3-9][0-9][0-9]"/>	    		    	
	    </condition>
	    <then>
	  	<stats>
  		    <counter name="ActiveSession"><decrease>1</decrease></counter>  	
    		</stats>	    	    		  
		<goto  name="goto_begin" label="begin" state="true"/>	    	                
	    </then>
	</if>

  	<stats>
  	    	<counter name="INVITE2xxin"><increase>1</increase></counter>  	
   	</stats>	    	    			

    <if>
        <condition>
            <test parameter="[SendByeUAC]" condition="boolean.equals" value="true"/>
        </condition>
        <then>      
    
            <if>
                <condition>
                    <test parameter="[CallDuration]" condition="number.equals" value="[CallDuration1]"/>
                </condition>
                <then>      
                    <parameter name="[CallDuration]" operation="set" value="[CallDuration2]"/>
                </then>
                <else>      
                    <parameter name="[CallDuration]" operation="set" value="[CallDuration1]"/>
                </else>                  
            </if>        
        
           	<parameter name="[newBranchId]" operation="string.random" value="10"/>
            <parameter name="[newCseqNumber]" operation="number.uid" value="10"/>
        
          	<sendMessageSIP name="Send BYE" delay="[CallDuration]" listenpoint="provider" remoteHost="[Host-Server]" remotePort="[Port-Server]"> 
<![CDATA[
BYE sip:[Host-Server] SIP/2.0
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [newCseqNumber] BYE
Max-Forwards: 70
Via: SIP/2.0/UDP [Adresse-Tester];branch=z9hG4bK[newBranchId]
Contact: <sip:[lastFromUser(0)]@[Adresse-Tester];transport=udp>
Content-Length: 0
]]>
      	    </sendMessageSIP>

          	<stats>
       	    	<counter name="BYEout"><increase>1</increase></counter>
       	    	<counter name="BYElost"><increase>1</increase></counter>
           	</stats>	    	    			

        </then>
    </if>  
                        
	<goto  name="goto_begin" label="begin" state="true"/>	    	                
	<!-- end main loop -->

  <!-- jump for receive initial ACK request message -->
	<label name="recACK"/>	

  	<stats>
	    <counter name="ACKlost"><decrease>1</decrease></counter>
	</stats>	    	    	

    <if>
        <condition>
            <test parameter="[SendByeUAS]" condition="boolean.equals" value="true"/>
        </condition>
        <then>      

            <if>
                <condition>
                    <test parameter="[CallDuration]" condition="number.equals" value="[CallDuration1]"/>
                </condition>
                <then>      
                    <parameter name="[CallDuration]" operation="set" value="[CallDuration2]"/>
                </then>
                <else>      
                    <parameter name="[CallDuration]" operation="set" value="[CallDuration1]"/>
                </else>                  
             </if>        
        
             <parameter name="[newBranchId]" operation="string.random" value="10"/>
             <parameter name="[newCseqNumber]" operation="number.uid" value="10"/>
            
             <sendMessageSIP name="Send BYE" delay="[CallDuration]" listenpoint="provider" remoteHost="[Host-Server]" remotePort="[Port-Server]"> 
            <![CDATA[
BYE sip:[Host-Server] SIP/2.0
To: [lastFrom]
From: [lastTo]
Call-ID: [lastCallId]
CSeq: [newCseqNumber] BYE
Max-Forwards: 70
Via: SIP/2.0/UDP [Adresse-Tester];branch=z9hG4bK[newBranchId]
Contact: <sip:[lastFromUser(0)]@[Adresse-Tester];transport=udp>
Content-Length: 0
]]>
     	    </sendMessageSIP>

          	<stats>
       	    	<counter name="BYEout"><increase>1</increase></counter>
       	    	<counter name="BYElost"><increase>1</increase></counter>
           	</stats>	    	    			

        </then>      
    </if>

	<goto  name="goto_begin" label="begin" state="true"/>	    	                
	<!-- end main loop -->
	
	<!-- jump for receive OTHER request message (BYE, CANCEL, ...) -->
	<label name="recOTHERS"/>	

	<if>
	    <condition>
	    	<test parameter="[lastMethod]" condition="string.equals" value="BYE"/>
	    </condition>
	    <then>
	  	<stats>
  		    <counter name="BYElost"><decrease>1</decrease></counter>
    		</stats>	    	    	
	    </then>
	</if>
  
    	<parameter name="[newToTag]" operation="string.random" value="10"/>
    	
        <sendMessageSIP name="Send 200 OK" delay="0" listenpoint="provider" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
SIP/2.0 200 OK
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Via: [lastVia]
Content-Length: 0

]]>
        </sendMessageSIP>

	<goto  name="goto_begin" label="begin" state="true"/>	    	

	<!-- receive response message for the OTHER request message (BYE, CANCEL, ...) -->
  <label name="recOTHERSxxx"/>	

	<if>
	    <condition>
	    	<test parameter="[lastMethod]" condition="string.equals" value="BYE"/>
	    </condition>
	    <then>
  		<stats>
  	    	<counter name="ActiveSession"><decrease>1</decrease></counter>  	
  	    	<counter name="BYExxxin"><increase>1</increase></counter>
    		</stats>	    	    	
	    </then>
	</if>
	
	<goto  name="goto_begin" label="begin" state="true"/>	    	                	        	        
	<!-- end main loop -->
</scenario>

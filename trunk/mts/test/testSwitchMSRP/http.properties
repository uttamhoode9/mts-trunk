
################################################################################
#                                                                              #
#                         HTTP Protocol                                        #
#                                                                              #
################################################################################


###############################################################################
#                                                                             #
# dafault listenpoint : if the listenpoint is not specified in                #
# send operations, then the default one is used to send the message           #
#                                                                             #
###############################################################################

# Default listen port lists; empty or zero value means no listen port
# type list<integer>
# [string]
listenpoint.LOCAL_PORT = 8080,8081

# Default listen port lists for TLS transport; empty or zero means no listen port
# type list<integer>
# [string]
listenpoint.LOCAL_PORT_TLS = 4430,4431


#####################################################
# client                                            #
#####################################################

# Default protocol to use if not specified into the server attribute
# Possible values : http, https
client.DEFAULT_PROTOCOL=http

# Default Http client port
client.DEFAULT_HTTP_PORT=8000

# Default Https client port
client.DEFAULT_HTTPS_PORT=4430

# Tell wether to use (or not) the non-blocking i/o stack. 
# default false
# [boolean]
USE_NIO=false

#####################################################
# Common settings                                   #
#####################################################

# Ignore the content (payload data) for the RTP messages. This can be useful for 
# memory issues during load testing. If true the application does not store the 
# RTP payload into the memory after the message has been sent or received.
# Please note that if true, then the user is not able to get the payload with a 
# "setFromMessage" operation with the "content:xxxxx" path keyword
# default false
# [boolean]
message.IGNORE_RECEIVED_CONTENTS=false


#######################################################

# Time (in seconds) of life the messages and transactions
# [float]
MESSAGE_TIME_LIFE = 30

# Timeout duration (in seconds) for the receive operations
# [float]
operations.RECEIVE_TIMEOUT = 30

#######################################################
# route
#######################################################

# The tool automatically routes a received response to the scenario which has sent the corresponding request.
# The transactionID is used internally to make the corresponding between requests and responses.
# This parameter is used to get the transactionID from the message given a list of paths (separated 
# by ',' character). The paths are defined with the setFromMessage operation and are of course 
# protocol dependant
# type list<string> (list of path keywords)
# [string]
route.TRANSACTION_ID = 

# The tool automatically routes a received request to the scenario given in the "destScenario" parameter 
# of the send operation in the same testcase. In this case, the tool is simulating a client and server 
# at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by 
# the tool and the same requests the tool has received 
# This parameter is used to get the messageID from the message given a list of paths (separated 
# by ',' character). The path are defined with the setFromMessage operation and are protocol of 
# course dependant
# type list<string> (list of path keywords)
# [string]
route.MESSAGE_ID = 

# The tool routes a received request to the scenario given by its name. In this case, the tool is 
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message 
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage 
# operation and are of course protocol dependant
# type list<string> (list of path keywords)
# [string]
# SWE 20072011:  addition of message.request sub-parameter in order to support two scenarii that receive
# HTTP messages: HTTP|true (receive HTTP requests) and HTTP|false (receive HTTO responses)  
#route.SCENARIO_NAME = message.protocol
route.SCENARIO_NAME = message.protocol,message.request

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled has a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type list<string> (list of path keywords)
# [string]
route.RETRANSMISSION_ID =

# By default, the tool routes a received responses to the scenario which has sent the corresponding 
# request; if this parameter equals to false, then this mechanism is deasctivated and the responses 
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and 
# dispatch the response to the scenario with the same name
# [boolean]
# SWE: mise a false pour prise en compte du routage par protocole
route.DEFAULT_RESPONSE = false

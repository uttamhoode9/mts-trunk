#-----------
# RTSP stack
#-----------

###############################################################################
#                                                                             #
# dafault listenpoint : if the listenpoint is not specified in                #
# send operations, then the default one is used to send the message           #
#                                                                             #
###############################################################################


# Default listen port; empty or zero value means no listen port
# type integer
listenpoint.LOCAL_PORT = 554


#######################################################

# Time of life the messages and transactions (in s)
# type float
MESSAGE_TIME_LIFE = 10

# Timeout (s) for receive operations
# type float
operations.RECEIVE_TIMEOUT = 10

#######################################################

# Automatic retransmission management for requests and responses : true/false
# type boolean
retransmit.MANAGEMENT = false

# Retransmission filtering; a retransmission messages is not routed to the right scenario : true/false
# type boolean
retransmit.FILTERING = false

# Retransmission list of timers in seconds
# type list<float>
retransmit.TIMERS = 0.5, 1, 2, 4, 4, 4, 4, 4, 4, 4

#######################################################

# The tool automatically routes a received response to the scenario which has sent the corresponding request.
# The transactionID is used internally to make the corresponding between requests and responses.
# This parameter is used to get the transactionID from the message given a list of paths (separated 
# by ',' character). The paths are defined with the setFromMessage operation and are of course 
# protocol dependant
# type string
route.TRANSACTION_ID = channel:remotePort,channel:remoteHost,header:CSeq

# The tool automatically routes a received request to the scenario given in the 'destScenario' parameter 
# of the sending tag (sendRequestXXX) in the same testcase. In this case, the tool is simulating a 
# client and server at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by 
# the tool and the same requests the tool has received 
# This parameter is used to get the messageID from the message given a list of paths (separated 
# by ',' character). The path are defined with the setFromMessage operation and are protocol of 
# course dependant
# type string
route.MESSAGE_ID = header:CSeq

# The tool routes a received request to the scenario given by its name. In this case, the tool is 
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message 
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage 
# operation and are of course protocol dependant
# type string
route.SCENARIO_NAME = message:protocol

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled has a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type string
route.RETRANSMISSION_ID = 


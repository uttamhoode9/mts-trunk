<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->
<scenario>

    <label name="begin"/>

    <!-- Wait for the a DIAMETER message -->
    <parameter name="[received]" operation="set" value="false"/>
    <receiveMessageDIAMETER name="Receive message" listenpoint="lp_client" timeout="10" failedOnTimeout="false">
        <parameter name="[received]" operation="set" value="true"/>
        <parameter name="[remoteHost]" operation="protocol.setFromMessage" value="channel.remoteHost"/>
        <parameter name="[remotePort]" operation="protocol.setFromMessage" value="channel.remotePort"/>
        <parameter name="[lastRequest]" operation="protocol.setFromMessage" value="message.request"/>
        <parameter name="[lastCommandCode]" operation="protocol.setFromMessage" value="header.command"/>
        <parameter name="[lastApplicationId]" operation="protocol.setFromMessage" value="header.applicationId"/>
        <parameter name="[lastHopByHop]" operation="protocol.setFromMessage" value="header.hopByHop"/>
        <parameter name="[lastEndToEnd]" operation="protocol.setFromMessage" value="header.endToEnd"/>
        <parameter name="[lastSessionId]" operation="protocol.setFromMessage" value="avp.Session-Id.value"/>
        <parameter name="[lastDestHost]" operation="protocol.setFromMessage" value="avp.Destination-Host.value"/>
        <parameter name="[lastDestRealm]" operation="protocol.setFromMessage" value="avp.Destination-Realm.value"/>
        <parameter name="[lastAuthAppliId]" operation="protocol.setFromMessage" value="avp.Auth-Application-Id.value"/>
        <parameter name="[lastMessage]" operation="protocol.setFromMessage" value="message"/>
    </receiveMessageDIAMETER>

    <!-- No message to process => End of the scenario  -->
    <if>
      <condition>
        <test parameter="[received]" condition="boolean.equals" value="true" not="true"/>
      </condition>
      <then>
          <!-- Check that no contexts exists yet -->
          <log type="Main" level="WARN">[testcaseId(0)] => test:contextAFSessions = [test:contextAFSessions]</log>
          <test parameter="[test:contextAFSessions]" condition="list.size" value="0"/>
          <exit failed="false" description="SUCCESS : Normal end of testcase"/>
      </then>
    </if>

    <!-- Receive AAA => stats context send STR -->
    <if>
      <condition>
        <test parameter="[lastRequest]" condition="boolean.equals" value="false"/>
        <test parameter="[lastCommandCode]" condition="number.equals" value="265"/>
      </condition>
      <then>
          <goto name="receive AAA => send STR" label="recAAA"/>
      </then>
    </if>

    <!-- Receive STA => stats context -->
    <if>
      <condition>
        <test parameter="[lastRequest]" condition="boolean.equals" value="false"/>
        <test parameter="[lastCommandCode]" condition="number.equals" value="275"/>
      </condition>
      <then>
          <goto name="receive STA" label="recSTA"/>
      </then>
    </if>

    <goto name="goto begin" label="begin"/>

    <!-- Receive AAA => send STR -->
    <label name="recAAA"/>

    <!-- Add the session into the contexts-->
    <parameter name="[indexContextAFSessions]" operation="list.find" value="[test:contextAFSessions]" value2="[lastSessionId]"/>
    <parameter name="[indexContextAFSessionsSIZE]" operation="list.size" value="[indexContextAFSessions]"/>
    <if>
      <condition>
        <test parameter="[indexContextAFSessionsSIZE]" condition="number.equals" value="0" not="true"/>
      </condition>
      <then>
          <!--log type="Main" level="WARN">[testcaseId(0)] => test:contextAFSessions = [test:contextAFSessions]</log-->
          <log type="Main" level="WARN">[testcaseId(0)] => ERROR : before adding the session into the contexts, then already find the session in the contexts : indexContextAFSessionsSIZE = [indexContextAFSessionsSIZE], lastSessionId = [lastSessionId]</log>
          <log type="Main" level="WARN">lastMessage =  [lastMessage]</log>
      </then>
    </if>
    <parameter name="[test:contextAFSessions]" operation="list.addLast" value="[test:contextAFSessions]" value2="[lastSessionId]"/>
    <!--log type="Main" level="WARN">[testcaseId(0)] => ADD lastSessionId = [lastSessionId]</log-->
    <!--log type="Main" level="WARN">[testcaseId(0)] => AFTER ADD test:contextAFSessions = [test:contextAFSessions]</log-->
    <parameter name="[test:contextAFTimestamp_[lastSessionId]]" operation="system.timestamp" value="1970"/>
    
    
    <!-- Modify the session statistics counter -->
    <stats>
        <counter name="AFSessionActive" summary="AF Act" complete="Active session on AF side">
            <increase>1</increase>
        </counter>
    </stats>

<!--
From RFC 3588 September 2003 :
Session-Termination-Request ::= < Diameter Header: 275, REQ, PXY >
                                < Session-Id >
                                { Origin-Host }
                                { Origin-Realm }
                                { Destination-Realm }
                                { Auth-Application-Id }
                                { Termination-Cause }
                                [ User-Name ]
                                [ Destination-Host ]
                              * [ Class ]
                                [ Origin-State-Id ]
                              * [ Proxy-Info ]
                                  Proxy-Info ::= < AVP Header: 284 >
                                                 { Proxy-Host }
                                                 { Proxy-State }
                                               * [ AVP ]
                              * [ Route-Record ]
                              * [ AVP ]
-->     
    <parameter name="[newEndToEnd]" operation="number.random" value="1000000000" />
    <parameter name="[newHopByHop]" operation="number.random" value="1000000000" />

    <!-- Envoi d'une requete STRequest -->
    <sendMessageDIAMETER name="Send Request STR" listenpoint="lp_client" 
        remoteURL="diameter://[remoteDIAM]" delay="[sessionTime]">
        <header request="true" command="Session-Termination" applicationId="Diameter Common Messages" 
            hopByHop="[newHopByHop]" endToEnd="[newEndToEnd]" 
            proxiable="true" error="false" retransmit="false"/>
          <!-- The Session-Id AVP is used to identify a specific session. -->
          <avp code="Session-Id" mandatory="true" type="UTF8String" value="[lastSessionId]"/>
        
          <!-- The Origin-Host AVP identifies the endpoint that originated the Diameter message. -->
          <avp code="Origin-Host" mandatory="true" type="DiameterIdentity" value="[localHostDIAM]"/>
          <!-- The Origin-Realm AVP contains the Realm of the originator of any Diameter message. -->
          <avp code="Origin-Realm" mandatory="true" type="DiameterIdentity" value="[localRealmDIAM]"/>

          <!-- The Origin-Host AVP contains the Host of the originator of any Diameter message. -->
          <avp code="Destination-Host" mandatory="false" type="DiameterIdentity" value="[remoteHostDIAM]"/>
          <!-- The Destination-Realm AVP contains the realm the message is to be routed to. -->
          <avp code="Destination-Realm" mandatory="true" type="DiameterIdentity" value="[remoteRealmDIAM]"/>

          <!-- The Auth-Application-Id AVP is used in order to advertise support of the Authentication and Authorization portion of an application. -->
          <!--avp code="Auth-Application-Id" mandatory="true" type="Unsigned32" value="0"/-->
          <avp code="Auth-Application-Id" mandatory="true" type="Unsigned32" value="16777222"/>

          <!-- The Termination-Cause AVP is used to indicate the reason why a session was terminated on the access device. -->
          <!-- Possible enumerated values : DIAMETER_LOGOUT(1) / DIAMETER_SERVICE_NOT_PROVIDED(2) / DIAMETER_BAD_ANSWER(3) / DIAMETER_ADMINISTRATIVE(4) / DIAMETER_LINK_BROKEN(5) / DIAMETER_AUTH_EXPIRED(6) / DIAMETER_USER_MOVED(7) / DIAMETER_SESSION_TIMEOUT(8). -->
          <avp code="Termination-Cause" mandatory="true" type="Enumerated" value="DIAMETER_LOGOUT"/>

          <!-- The User-Name AVP contains the User-Name, in a format consistent with the Network Access Identifier (NAI) specification. -->
          <avp code="User-Name" mandatory="false" type="UTF8String" value="ToBeCompleted"/>

          <avp code="Framed-IP-Address" value="[framedIPAddress]"/>

          <!-- The Class AVP is used to by Diameter servers to return state information to the access device. -->
          <avp code="Class" mandatory="false"  type="OctetString" value="ToBeCompleted"/>
          <avp code="Class" mandatory="false"  type="OctetString" value="ToBeCompleted"/>

          <!-- The Origin-State-Id AVP is a monotonically increasing value that is advanced whenever a Diameter entity restarts with loss of previous state. -->
          <avp code="Origin-State-Id" mandatory="false" type="Unsigned32" value="0"/>

          <!-- The Proxy-Host AVP contains the identity of the host that added the Proxy-Info AVP. -->
          <!-- The Proxy-State AVP contains state local information. -->
          <avp code="Proxy-Info">
            <avp code="Proxy-Host" mandatory="true" private="false" type="DiameterIdentity" value="ToBeCompleted"/>
            <avp code="Proxy-State" mandatory="true"  private="false" type="OctetString" value="ToBeCompleted"/>
          </avp>
          <avp code="Proxy-Info">
            <avp code="Proxy-Host" mandatory="true"  private="false" type="DiameterIdentity" value="ToBeCompleted"/>
            <avp code="Proxy-State" mandatory="true"  private="false" type="OctetString" value="ToBeCompleted"/>
          </avp>
          <!-- The identity added in the Route-Record AVP MUST be the same as the one received in the Origin-Host of the Capabilities Exchange message. -->
          <avp code="Route-Record" mandatory="true"  private="false" type="DiameterIdentity" value="ToBeCompleted"/>
          <avp code="Route-Record" mandatory="true"  private="false" type="DiameterIdentity" value="ToBeCompleted"/>
    </sendMessageDIAMETER>

    <goto name="goto begin" label="begin"/>

    <!-- Receive STA => stats context -->
    <label name="recSTA"/>

    <!-- Remove the session from the contexts-->
    <parameter name="[indexContextAFSessions]" operation="list.find" value="[test:contextAFSessions]" value2="[lastSessionId]"/>
    <parameter name="[indexContextAFSessionsSIZE]" operation="list.size" value="[indexContextAFSessions]"/>
    <if>
      <condition>
        <test parameter="[indexContextAFSessionsSIZE]" condition="number.equals" value="1" not="true"/>
      </condition>
      <then>
          <!--log type="Main" level="WARN">[testcaseId(0)] => test:contextAFSessions = [test:contextAFSessions]</log-->
          <log type="Main" level="WARN">[testcaseId(0)] => ERROR : before removing the session from the contexts, can not find the session in the contexts : indexContextAFSessionsSIZE = [indexContextAFSessionsSIZE], lastSessionId = [lastSessionId]</log>
          <log type="Main" level="WARN">lastMessage =  [lastMessage]</log>
      </then>
    </if>
    <parameter name="[test:contextAFSessions]" operation="list.removeAt" value="[test:contextAFSessions]" value2="[indexContextAFSessions]"/>
    <!--log type="Main" level="WARN">[testcaseId(0)] => REMOVE lastSessionId = [lastSessionId]</log-->
    <!--log type="Main" level="WARN">[testcaseId(0)] => AFTER REMOVE test:contextAFSessions = [test:contextAFSessions]</log-->
    
    <!-- Modify the session statistics counter -->
    <stats>
        <counter name="AFSessionActive" summary="AF Act" complete="Active session on AF side">
            <increase>-1</increase>
        </counter>
    </stats>
    <parameter name="[timestamp]" operation="system.timestamp" value="1970"/>
    <parameter name="[duration]" operation="number.substract" value="[timestamp]" value2="[test:contextAFTimestamp_[lastSessionId]]"/>
    <parameter name="[duration]" operation="number.divide" value="[duration]" value2="1000"/>
    <!--log type="Main" level="WARN">[testcaseId(0)] => Session duration = [duration] sec.</log-->
    <stats>
        <value name="AFSessionDuration" summary="AF Dur" complete="Duration of the session on AF side">
            <newValue>[duration]</newValue>
        </value>
    </stats>

    <goto name="goto begin" label="begin"/>


    
</scenario>

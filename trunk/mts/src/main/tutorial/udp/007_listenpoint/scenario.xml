<?xml version="1.0" encoding="UTF-8"?>

<scenario>
    <parameter name="[remotePort1]" operation="set" value="[remotePort]"/>
    <parameter name="[remotePort2]" operation="number.add" value="[remotePort]" value2="1"/>

	<!-- All param -->
    <createListenpointUDP name="socket" localHost="[localHostUDP]" localPort="[localPortUDP]" />
    <createListenpointUDP name="socket1" localHost="[remoteHostUDP]" localPort="[remotePort1]" />
    <createListenpointUDP name="socket2" localHost="[remoteHostUDP]" localPort="[remotePort2]" />
    
    <sendMessageUDP listenpoint="socket" remoteHost="[remoteHostUDP]" remotePort="[remotePort1]">
        <data format="text">packet #1</data>
    </sendMessageUDP>

    <sendMessageUDP listenpoint="socket" remoteHost="[remoteHostUDP]" remotePort="[remotePort2]">
        <data format="text">packet #2</data>
    </sendMessageUDP>

    <sendMessageUDP listenpoint="socket" remoteHost="[remoteHostUDP]" remotePort="[remotePort1]">
        <data format="text">packet #3</data>
    </sendMessageUDP>
	
    <receiveMessageUDP listenpoint="socket1">
        <parameter name="[localName]" operation="protocol.setFromMessage" value="listenpoint.name" />
        <test parameter="[localName]" condition="string.equals" value="socket1" />
        <parameter name="[localHost]" operation="protocol.setFromMessage" value="listenpoint.localHost" />
        <test parameter="[localHost]" condition="string.equals" value="[remoteHostUDP]" />
        <parameter name="[localPort]" operation="protocol.setFromMessage" value="listenpoint.localPort" />
        <test parameter="[localPort]" condition="string.equals" value="[remotePort1]" />
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.equals" value="packet #1" />
    </receiveMessageUDP>

    <receiveMessageUDP listenpoint="socket2">
        <parameter name="[localName]" operation="protocol.setFromMessage" value="listenpoint.name" />
        <test parameter="[localName]" condition="string.equals" value="socket2" />
        <parameter name="[localHost]" operation="protocol.setFromMessage" value="listenpoint.localHost" />
        <test parameter="[localHost]" condition="string.equals" value="[remoteHostUDP]" />
        <parameter name="[localPort]" operation="protocol.setFromMessage" value="listenpoint.localPort" />
        <test parameter="[localPort]" condition="string.equals" value="[remotePort2]" />

        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.equals" value="packet #2" />
    </receiveMessageUDP>

    <receiveMessageUDP listenpoint="socket1">
        <parameter name="[localName]" operation="protocol.setFromMessage" value="listenpoint.name" />
        <test parameter="[localName]" condition="string.equals" value="socket1" />
        <parameter name="[localHost]" operation="protocol.setFromMessage" value="listenpoint.localHost" />
        <test parameter="[localHost]" condition="string.equals" value="[remoteHostUDP]" />
        <parameter name="[localPort]" operation="protocol.setFromMessage" value="listenpoint.localPort" />
        <test parameter="[localPort]" condition="string.equals" value="[remotePort1]" />
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.equals" value="packet #3" />
    </receiveMessageUDP>

    <finally>
    
	    <removeListenpointUDP name="socket" />
	    <removeListenpointUDP name="socket1" />
	    <removeListenpointUDP name="socket2" />
	    
    </finally>
    	
</scenario>

<?xml version="1.0" encoding="UTF-8"?>

<scenario>

  <parameter name="[string]" operation="set" value="aABb"/>
	<test parameter="[string]" condition="string.equals" value="aABb" />
	<parameter name="[boolean]" value="[string]" operation="string.equals" value2="aABb" />
	<test parameter="[boolean]" condition="boolean.equals" value="true" />
  
	<test parameter="[string]" condition="string.equalsignorecase" value="AABB" />
	<parameter name="[boolean]" value="[string]" operation="string.equalsignorecase" value2="aabb" />
	<test parameter="[boolean]" condition="boolean.equals" value="true" />

	<parameter name="[result]" operation="string.tolowercase" value="[string]" />
	<test parameter="[result]" condition="string.equals" value="aabb" />

	<parameter name="[result]" operation="string.touppercase" value="[string]" />
	<test parameter="[result]" condition="string.equals" value="AABB" />

	<test parameter="[string]" condition="string.startswith" value="aA" />
	<test parameter="[string]" condition="string.endswith" value="Bb" />

	<parameter name="[result]" operation="string.length" value="[string]" />
	<test parameter="[result]" condition="number.equals" value="4" />

	<parameter name="[result]" operation="string.indexof" value="[string]" value2="AB"/>
	<test parameter="[result]" condition="number.equals" value="1" />

  <parameter name="[string]" operation="set" value="12345678901234567890"/>
	<parameter name="[result]" operation="string.substring" value="[string]" value2="10" value3="20"/>
	<test parameter="[result]" condition="string.equals" value="1234567890" />
	<parameter name="[result]" operation="string.substring" value="[string]" value2="0" value3="1"/>
	<test parameter="[result]" condition="string.equals" value="12" />
	<parameter name="[result]" operation="string.substring" value="[string]" value2="16"/>
	<test parameter="[result]" condition="string.equals" value="7890" />
	<parameter name="[result]" operation="string.substring" value="[string]" value2="5" value3="100000"/>
	<test parameter="[result]" condition="string.equals" value="678901234567890" />

	<parameter name="[string]" operation="set">
	 1aABbxyz           
  </parameter>
  <test parameter="[string]" condition="string.matches" value="[aAbB]*" />
  <parameter name="[boolean]" value="[string]" operation="string.matches" value2="[:digit:]{1}[aAbB]{4}[:alnum:]{3}" />
	<test parameter="[boolean]" condition="boolean.equals" value="true" />
	
	<test parameter="[string]" condition="string.contains" value="AB" />
	<parameter name="[boolean]" value="[string]" operation="string.contains" value2="AB" />
	<test parameter="[boolean]" condition="boolean.equals" value="true" />
	
	<parameter name="[size]" operation="string.length" value="0123456789"/>
	<parameter name="[result]" operation="string.substring" value="0123456789" value2="2"/>
	<test parameter="[result]" condition="string.equals" value="23456789" />

	<parameter name="[size]" operation="string.length" value="0123456789"/>
	<parameter name="[result]" operation="string.substring" value="0123456789" value2="2" value3="[size]"/>
	<test parameter="[result]" condition="string.equals" value="23456789" />

	<parameter name="[size]" operation="string.length" value="0123456789"/>
	<parameter name="[result]" operation="string.substring" value="0123456789" value2="2" value3="99"/>
	<test parameter="[result]" condition="string.equals" value="23456789" />

	<parameter name="[result]" operation="string.regexmatches" value="123456789" value2="[2-8]*"/>
	<test parameter="[result]" condition="string.equals" value="2345678" />

	<parameter name="[sdp]" operation="set" value="rtpmap:108 bidon"/>
	<parameter name="[rtpmapNumber]" operation="string.regexmatches" value="[sdp]" value2=":[0-9]* "/>
  <parameter name="[rtpmapNumber]" operation="string.regexmatches" value="[sdp]" value2="[0-9]*"/>
	<test parameter="[rtpmapNumber]" condition="string.equals" value="108" />


	<parameter name="[content]" operation="set">
<![CDATA[
Response: TransactionID=1100000000 ExecutionStatus=6
TransparentData=""
CalculatedMoney.Currency=-
CalculatedMoney.Amount=1
ErrorList.noMoneyFlow=true
ErrorList.list={...}
]]>
	</parameter>
	<parameter name="[result]" operation="string.regexmatches" value="[content]" value2="Response:.*"/>
	<parameter name="[result]" operation="string.regexmatches" value="[result]" value2="ExecutionStatus=.*"/>
	<parameter name="[result]" operation="string.regexmatches" value="[result]" value2="=.*"/>		
	<parameter name="[result]" operation="string.substring" value="[result]" value2="1"/>		
	<test parameter="[result]" condition="string.equals" value="6" />

	<parameter name="[result]" operation="string.regexreplaces" value="123456789" value2="[2-8]*" value3=""/>
	<test parameter="[result]" condition="string.equals" value="19" />

	<parameter name="[result]" operation="string.random" value="10" />
	<parameter name="[number]" operation="string.length" value="[result]" />
	<test parameter="[number]" condition="number.equals" value="10" />

	<parameter name="[result]" operation="string.digest" value="mystring" value2="MD5" />
	<parameter name="[number]" operation="binary.length" value="[result]" />
	<test parameter="[number]" condition="number.equals" value="16" />
  <test parameter="[result]" condition="binary.equals" value="169319501261C644A58610f967e8f9d0" />

  <parameter name="[result]" operation="string.digest" value="mystring" value2="SHA1" />
	<parameter name="[number]" operation="binary.length" value="[result]" />
	<test parameter="[number]" condition="number.equals" value="20" />
  <test parameter="[result]" condition="binary.equals" value="9ce3ea4d6fAC2165933B3971E6D5A13753c7d878" />

	<parameter name="[string]" operation="list.set" value="valuesepvaluesepvalue" />
	<parameter name="[string]" operation="string.split" value="[string]" value2="sep" />
	<test parameter="[string]" condition="string.equals" value="value" />
	<test parameter="[string]" condition="list.size" value="3" />

  <!-- Default charset option -Dfile.encoding=ISO-8859-15 on the java command -->
  <parameter name="[string]" operation="list.set" value="[ssssss]" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  
  <!-- see <install_dir>/doc/charset/jcharser-Standart_README.txt -->
  <parameter name="[string]" operation="list.set" value="[ssssss]" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="ISO-8859-1" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="UTF-8" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="8 bit data {UTF-8}:1" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="UTF-16BE" />
  <test parameter="[binary]" condition="binary.equals" value="005b007300730073007300730073005d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="UCS2 (16bit) {UTF-16BE}:2" />
  <test parameter="[binary]" condition="binary.equals" value="005b007300730073007300730073005d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="UTF-16LE" />
  <test parameter="[binary]" condition="binary.equals" value="5b007300730073007300730073005d00" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="UTF-16" />
  <test parameter="[binary]" condition="binary.equals" value="feff005b007300730073007300730073005d" />
  
  
  <!-- see <install_dir>/doc/charset/jcharser-SMS_README.txt -->
  <parameter name="[string]" operation="list.set" value="[ssssss]" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="UTF-7" />
  <test parameter="[binary]" condition="binary.equals" value="2b4146732d7373737373732b4146302d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="UTF-7-OPTIONAL" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="SCGSM" />
  <test parameter="[binary]" condition="binary.equals" value="1b3c7373737373731b3e" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="Default alphabet {SCGSM}:0" />
  <test parameter="[binary]" condition="binary.equals" value="1bde7c3e9fcfe71b1f" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="hp-roman8" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="ISO-8859-8-BIDI" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="ISO-8859-6-BIDI" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="KOI8-U" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="MIK" />
  <test parameter="[binary]" condition="binary.equals" value="5b7373737373735d" />
  
  <parameter name="[string]" operation="list.set" value="1234567890" value2="15"/>
  <parameter name="[string]" operation="list.set" value="[string]123"/>
  <parameter name="[binary]" operation="string.toBinary" value="[string]" value2="Default alphabet {SCGSM}:0" />
  <parameter name="[convertString]" operation="binary.toString" value="[binary]" value2="Default alphabet {SCGSM}:0" />
  <test parameter="[convertString]" condition="string.equals" value="[string]" />

	<!-- WWW-Authenticate: Digest realm="sip.mobistar.fr",domain="sip:ttcnserver@sip.mobistar.fr",nonce="1af6e6744f2880715614625e0da87566",stale=false,qop="auth",algorithm=MD5-->
	<!-- Authorization: Digest username="33975621672@sip.mobistar.com", realm="sip.mobistar.fr", nonce="1af6e6744f2880715614625e0da87566", algorithm=MD5, opaque="", uri="sip:sip.mobistar.com:5060", response="2f7b84fada58e09b82fd42e6cde8c3e5", cnonce="11fc4a0e", qof=auth, nc=00000001 -->

	<parameter name="[UserName]"   operation="set" value="33975621672@sip.mobistar.com" />
	<parameter name="[Realm]"      operation="set" value="sip.mobistar.fr" />
	<parameter name="[Password]"   operation="set" value="imt30imt30" />
	<parameter name="[Method]"     operation="set" value="REGISTER" />
	<parameter name="[URI]"        operation="set" value="sip:sip.mobistar.com:5060" />
	<parameter name="[Nonce]"      operation="set" value="1af6e6744f2880715614625e0da87566" />
	<parameter name="[NonceCount]" operation="set" value="00000001" />
	<parameter name="[CNonce]"     operation="set" value="11fc4a0e" />
	<parameter name="[QOp]"        operation="set" value="auth" />


	<parameter name="[HA1]" operation="string.digest" value="[UserName]:[Realm]:[Password]" value2="MD5" />
	<parameter name="[HA2]" operation="string.digest" value="[Method]:[URI]" value2="MD5" />
  <parameter name="[Response]" operation="string.digest" value="[HA1]:[Nonce]:[NonceCount]:[CNonce]:[QOp]:[HA2]" value2="MD5" />
  <test parameter="[Response]" condition="binary.equals" value="2f7b84fada58e09b82fd42e6cde8c3e5"/>

  <parameter name="[Response]" operation="string.digest" value="e576d5ca332e9930018bf1baee2763c795b3c712" value2="SHA1" />
  <!--test parameter="[Response]" condition="binary.equals" value="2f7b84fada58e09b82fd42e6cde8c3e5"/-->

	<parameter name="[result]" operation="string.trim" value=" essai       " />
	<test parameter="[result]" condition="string.equals" value="essai" />
  
  <parameter name="[String]" operation="string.digest" value="Hello" value2="SHA1" />
  <test parameter="[String]" condition="binary.equals" value="f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0"/>
  <parameter name="[Binary]" operation="binary.digest" value="48656c6c6f" value2="SHA1" />
  <test parameter="[Binary]" condition="binary.equals" value="f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0"/>
  <parameter name="[Binary]" operation="binary.digest" value="01020304" value2="SHA1" />
  <test parameter="[Binary]" condition="binary.equals" value="12dada1fff4d4787ade3333147202c3b443e376f"/>
  
  <parameter name="[Response]" operation="string.digest" value="sha1 this string" value2="SHA1" />
  <test parameter="[Response]" condition="binary.equals" value="cf23df2207d99a74fbe169e3eba035e633b65d94"/>

  <parameter name="[Response]" operation="string.digest" value="abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" value2="SHA1" />
  <test parameter="[Response]" condition="binary.equals" value="84983E441C3BD26EBAAE4AA1F95129E5E54670F1"/>

  <parameter name="[data]" operation="set" value="BD029BBE7F51960BCF9EDB2B61F06F0FEB5A38B6" />
  <!--parameter name="[binData]" operation="set" value="BE9B02BD0B96517F2BDB9ECF0F6FF0610FB6385AEB" /-->  
  <parameter name="[zeros44]" operation="set" value="00" value2="44"/>
  <!--parameter name="[binData]" operation="set" value="[zeros44][data]"/-->
  <parameter name="[binData]" operation="set" value="[zeros44][data]"/>
  <parameter name="[strData]" operation="binary.toString" value="[binData]" />
  <parameter name="[sha1String]" operation="string.digest" value="[strData]" value2="SHA1" />
  <parameter name="[sha1Binary]" operation="binary.digest" value="[binData]" value2="SHA1" />
  <test parameter="[sha1Binary]" condition="binary.equals" value="[sha1String]"/>  
  <!--test parameter="[sha1Binary]" condition="binary.equals" value="DA47B8BF909C3D82572407D571C23B792888D946"/-->
  <parameter name="[key]" operation="set" value="67452301EFCDAB8998BADCFE10325476C3D2E1F0"/>
  <parameter name="[strKey]" operation="binary.tostring" value="[key]"/>
  <!--parameter name="[Response]" operation="string.hmac" value="[strData]" value2="HmacSHA1" value3="[key]"/-->
  <!--test parameter="[Response]" condition="binary.equals" value="DA47B8BF909C3D82572407D571C23B792888D946"/-->
    
  <parameter name="[data]" operation="set" value="e576d5ca332e9930018bf1baee2763c795b3c712" />
  <!--parameter name="[data]" operation="set" value="cad576e530992e33baf18b01c76327ee12c7b395" /-->
  <parameter name="[zeros44]" operation="set" value="00" value2="44"/>
  <parameter name="[binData]" operation="set" value="[zeros44][data]"/>
  <!--parameter name="[binData]" operation="set" value="cad576e530992e33baf18b01c76327ee12c7b3950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" /-->
  <!--parameter name="[binData]" operation="binary.endian" value="[binData]" /-->
  <parameter name="[strData]" operation="binary.toString" value="[binData]" />
  <parameter name="[binSHA1string]" operation="string.digest" value="[strData]" value2="SHA1" />
  <parameter name="[binSHA1binary]" operation="binary.digest" value="[binData]" value2="SHA1" />
  <test parameter="[binSHA1string]" condition="binary.equals" value="[binSHA1string]"/>
  <!--parameter name="[binSHA1binary]" operation="binary.endian" value="[binSHA1binary]" /-->  
  <!--test parameter="[binSHA1binary]" condition="binary.equals" value="a5e895fe998868543fc5cc66dc2e234abb7adf1e"/-->
  <!--test parameter="[binSHA1binary]" condition="binary.equals" value="536e5ebc4465582aa6a8ec9986ebb62025af1942"/-->  

  <parameter name="[binData]" operation="binary.random" value="100"/>
  <parameter name="[strData]" operation="binary.toString" value="[binData]" />
  <parameter name="[binSHA1string]" operation="string.digest" value="[strData]" value2="SHA1" />
  <parameter name="[binSHA1binary]" operation="binary.digest" value="[binData]" value2="SHA1" />
  <test parameter="[binSHA1string]" condition="binary.equals" value="[binSHA1string]"/>       
       
	<parameter name="[result]" operation="string.hmac" value="MTS : Multi-protocol Test Suite" value2="HmacMD5" value3="shared secret ericsson" />
	<parameter name="[number]" operation="string.length" value="[result]" />
	<test parameter="[number]" condition="number.equals" value="32" />
	<test parameter="[result]" condition="binary.equals" value="AA3BBD056B8245F0FCE02A4D1BD6F373" />  
  
	<parameter name="[result]" operation="string.hmac" value="MTS : Multi-protocol Test Suite" value2="HmacSHA1" value3="shared secret ericsson" />
	<parameter name="[number]" operation="string.length" value="[result]" />
	<test parameter="[number]" condition="number.equals" value="40" />
	<test parameter="[result]" condition="binary.equals" value="0443F2A25C9FA98434AFCA840AF69594FD3B35BC" />  

  <!-- payload from Diameter-EAP-Answer(268)_AKA-Challenge(1) Frame #7
       on <install_dir>/tutorial/diameter/350_swm_attach/trace swm swx s6b ok.pcap network capture -->
  <parameter name="[EAPPayload]"     operation="binary.toString" value="010200c01701000001050000027f6f8909616c3ca4c836a02f7642be02050000598451caa6ce0000a52ffc02ec24118b0b050000beafd710332dd3c27033c241bcb070538601000081050000fba14079d7d0e05175eb39c560be666c82190000dbdb27475b908288f989747ff01e9247a4ff1d07cf81da16e220c0a64247f01e314781278cae2683e93f7cd033a9ee2877ccea2d492e244c4dc4657528b8fc8209d7391bd0806b913dfedbb10e050b58a041578708fe8efc760374949320bd26"/>
  <parameter name="[EAPPayloadMAC0]" operation="binary.toString" value="010200c01701000001050000027f6f8909616c3ca4c836a02f7642be02050000598451caa6ce0000a52ffc02ec24118b0b050000000000000000000000000000000000008601000081050000fba14079d7d0e05175eb39c560be666c82190000dbdb27475b908288f989747ff01e9247a4ff1d07cf81da16e220c0a64247f01e314781278cae2683e93f7cd033a9ee2877ccea2d492e244c4dc4657528b8fc8209d7391bd0806b913dfedbb10e050b58a041578708fe8efc760374949320bd26"/>
  <parameter name="[strIdentity]" operation="set" value="0208014469111223@nai.epc.mnc001.mcc208.3gppnetwork.org"/>
  <parameter name="[Identity]" operation="string.tobinary" value="[strIdentity]"/>  
  <parameter name="[IK]" operation="set" value="ee78ba18d36aeb993acb600a9718305f"/>
  <parameter name="[CK]" operation="set" value="c16f01e478cdffc371923bf70fbe4205"/>
  <parameter name="[Concat]" operation="set" value="[Identity][IK][CK]"/>
  <parameter name="[strConcat]" operation="binary.tostring" value="[Concat]"/>  
  <!--parameter name="[strIdentity]" operation="set" value="0208014469111223@nai.epc.mnc001.mcc208.3gppnetwork.org"/>  
  <parameter name="[IK]" operation="set" value="ee78ba18d36aeb993acb600a9718305f"/>
  <parameter name="[strIK]" operation="binary.toString" value="[IK]"/>  
  <parameter name="[CK]" operation="set" value="c16f01e478cdffc371923bf70fbe4205"/>
  <parameter name="[strCK]" operation="binary.toString" value="[CK]"/>  
  <parameter name="[strConcat]" operation="set" value="[strIdentity][strIK][strCK]"/-->    
  <parameter name="[MK]" operation="string.digest" value="[strConcat]" value2="SHA1" />
  <test parameter="[MK]" condition="binary.equals" value="5273151b660ecceac5368ad77c2356b6c440d08d" />      
  <parameter name="[strMK]" operation="binary.tostring" value="[MK]" value2="ISO-8859-15"/>
  <!-- calculated by external C program -->
  <parameter name="[Kout]" operation="set" value="76015283ac829f34f5c40125d38061cf"/>
  <parameter name="[strKout]" operation="binary.tostring" value="[Kout]" value2="ISO-8859-15"/>  
	<parameter name="[MAC20]" operation="string.hmac" value="[EAPPayloadMAC0]" value2="HmacSHA1" value3="[strKout]" />
	<parameter name="[number]" operation="string.length" value="[MAC20]" />
	<test parameter="[number]" condition="number.equals" value="40" />
	<parameter name="[AT_MAC]" operation="binary.subbinary" value="[MAC20]" value2="0" value3="16"/>  
	<test parameter="[AT_MAC]" condition="binary.equals" value="beafd710332dd3c27033c241bcb07053" />  

  <!-- payload from Diameter-EAP-Request(268)_AKA-Challenge(1) Frame #9
       on <install_dir>/tutorial/diameter/350_swm_attach/trace swm swx s6b ok.pcap network capture -->
  <parameter name="[EAPPayload]"     operation="binary.toString" value="02020028170100000b050000b70f5d335df7606d83b4c87d820e60710303004039bcb97622c4715a"/>
  <parameter name="[EAPPayloadMAC0]" operation="binary.toString" value="02020028170100000b050000000000000000000000000000000000000303004039bcb97622c4715a"/>
  <parameter name="[strIdentity]" operation="set" value="0208014469111223@nai.epc.mnc001.mcc208.3gppnetwork.org"/>
  <parameter name="[Identity]" operation="string.tobinary" value="[strIdentity]"/>  
  <parameter name="[IK]" operation="set" value="ee78ba18d36aeb993acb600a9718305f"/>
  <parameter name="[CK]" operation="set" value="c16f01e478cdffc371923bf70fbe4205"/>
  <parameter name="[Concat]" operation="set" value="[Identity][IK][CK]"/>
  <parameter name="[strConcat]" operation="binary.tostring" value="[Concat]"/>  
  <!--parameter name="[strIdentity]" operation="set" value="0208014469111223@nai.epc.mnc001.mcc208.3gppnetwork.org"/>  
  <parameter name="[IK]" operation="set" value="ee78ba18d36aeb993acb600a9718305f"/>
  <parameter name="[strIK]" operation="binary.toString" value="[IK]"/>  
  <parameter name="[CK]" operation="set" value="c16f01e478cdffc371923bf70fbe4205"/>
  <parameter name="[strCK]" operation="binary.toString" value="[CK]"/>  
  <parameter name="[strConcat]" operation="set" value="[strIdentity][strIK][strCK]"/-->    
  <parameter name="[MK]" operation="string.digest" value="[strConcat]" value2="SHA1" />
  <test parameter="[MK]" condition="binary.equals" value="5273151b660ecceac5368ad77c2356b6c440d08d" />      
  <parameter name="[strMK]" operation="binary.tostring" value="[MK]"/>
  <!-- calculated by external C program -->
  <parameter name="[Kout]" operation="set" value="76015283ac829f34f5c40125d38061cf"/>
  <parameter name="[strKout]" operation="binary.tostring" value="[Kout]"/>  
	<parameter name="[MAC20]" operation="string.hmac" value="[EAPPayloadMAC0]" value2="HmacSHA1" value3="[strKout]" />
	<parameter name="[number]" operation="string.length" value="[MAC20]" />
	<test parameter="[number]" condition="number.equals" value="40" />
	<parameter name="[AT_MAC]" operation="binary.subbinary" value="[MAC20]" value2="0" value3="16"/>  
	<test parameter="[AT_MAC]" condition="binary.equals" value="b70f5d335df7606d83b4c87d820e6071" />  

  <!-- payload from Diameter-EAP-Answer(268)_AKA-Challenge(1) Frame #7
       bernard request 2 -->
  <parameter name="[EAPPayload]"     operation="binary.toString" value="010200c01701000001050000027f6f8909616c3ca4c836a02f7642be02050000598451caa6ce0000a52ffc02ec24118b0b050000beafd710332dd3c27033c241bcb070538601000081050000fba14079d7d0e05175eb39c560be666c82190000dbdb27475b908288f989747ff01e9247a4ff1d07cf81da16e220c0a64247f01e314781278cae2683e93f7cd033a9ee2877ccea2d492e244c4dc4657528b8fc8209d7391bd0806b913dfedbb10e050b58a041578708fe8efc760374949320bd26"/>
  <parameter name="[EAPPayloadMAC0]" operation="binary.toString" value="02020028170100000b050000000000000000000000000000000000000303004039bcb97622c4715a"/>
  <parameter name="[strIdentity]" operation="set" value="0208044460005000@nai.epc.mnc001.mcc208.3gppnetwork.org"/>
  <parameter name="[Identity]" operation="string.tobinary" value="[strIdentity]"/>  
  <parameter name="[IK]" operation="set" value="ee78ba18d36aeb993acb600a9718305f"/>
  <parameter name="[CK]" operation="set" value="c16f01e478cdffc371923bf70fbe4206"/>
  <parameter name="[Concat]" operation="set" value="[Identity][IK][CK]"/>
  <parameter name="[strConcat]" operation="binary.tostring" value="[Concat]"/>  
  <!--parameter name="[strIdentity]" operation="set" value="0208014469111223@nai.epc.mnc001.mcc208.3gppnetwork.org"/>  
  <parameter name="[IK]" operation="set" value="ee78ba18d36aeb993acb600a9718305f"/>
  <parameter name="[strIK]" operation="binary.toString" value="[IK]"/>  
  <parameter name="[CK]" operation="set" value="c16f01e478cdffc371923bf70fbe4205"/>
  <parameter name="[strCK]" operation="binary.toString" value="[CK]"/>  
  <parameter name="[strConcat]" operation="set" value="[strIdentity][strIK][strCK]"/-->    
  <parameter name="[MK]" operation="string.digest" value="[strConcat]" value2="SHA1" />
  <test parameter="[MK]" condition="binary.equals" value="1dadc619b010de534e8ae4c4117446aeb2e4e513" />      
  <parameter name="[strMK]" operation="binary.tostring" value="[MK]"/>
  <!-- calculated by external C program -->
  <parameter name="[Kout]" operation="set" value="0c5ba22496b4e9c8af099887ffa8bd0d"/>
  <parameter name="[strKout]" operation="binary.tostring" value="[Kout]"/>  
	<parameter name="[MAC20]" operation="string.hmac" value="[EAPPayloadMAC0]" value2="HmacSHA1" value3="[strKout]" />
	<parameter name="[number]" operation="string.length" value="[MAC20]" />
	<test parameter="[number]" condition="number.equals" value="40" />
	<parameter name="[AT_MAC]" operation="binary.subbinary" value="[MAC20]" value2="0" value3="16"/>  
	<test parameter="[AT_MAC]" condition="binary.equals" value="aa773dac17adaac8ff98d66468e1cddb" />  

  <!-- payload from Diameter-EAP-Answer(268)_AKA-Challenge(1) Frame #7
       bernard request 3 -->
  <parameter name="[EAPPayload]"     operation="binary.toString" value="010200c01701000001050000027f6f8909616c3ca4c836a02f7642be02050000598451caa6ce0000a52ffc02ec24118b0b050000beafd710332dd3c27033c241bcb070538601000081050000fba14079d7d0e05175eb39c560be666c82190000dbdb27475b908288f989747ff01e9247a4ff1d07cf81da16e220c0a64247f01e314781278cae2683e93f7cd033a9ee2877ccea2d492e244c4dc4657528b8fc8209d7391bd0806b913dfedbb10e050b58a041578708fe8efc760374949320bd26"/>
  <parameter name="[EAPPayloadMAC0]" operation="binary.toString" value="020100301701000003050010203132333435363738393a3b3c3d3e3f0b05000000000000000000000000000000000000"/>
  <parameter name="[strIdentity]" operation="set" value="0208030220000001@nai.epc.mnc003.mcc208.3gppnetwork.org"/>
  <parameter name="[Identity]" operation="string.tobinary" value="[strIdentity]"/>  
  <parameter name="[IK]" operation="set" value="203132333435363738393a3b3c3d3e3f"/>
  <parameter name="[CK]" operation="set" value="203132333435363738393a3b3c3d3e3f"/>
  <parameter name="[Concat]" operation="set" value="[Identity][IK][CK]"/>
  <parameter name="[strConcat]" operation="binary.tostring" value="[Concat]"/>  
  <!--parameter name="[strIdentity]" operation="set" value="0208014469111223@nai.epc.mnc001.mcc208.3gppnetwork.org"/>  
  <parameter name="[IK]" operation="set" value="ee78ba18d36aeb993acb600a9718305f"/>
  <parameter name="[strIK]" operation="binary.toString" value="[IK]"/>  
  <parameter name="[CK]" operation="set" value="c16f01e478cdffc371923bf70fbe4205"/>
  <parameter name="[strCK]" operation="binary.toString" value="[CK]"/>  
  <parameter name="[strConcat]" operation="set" value="[strIdentity][strIK][strCK]"/-->    
  <parameter name="[MK]" operation="string.digest" value="[strConcat]" value2="SHA1" />
  <!--test parameter="[MK]" condition="binary.equals" value="1dadc619b010de534e8ae4c4117446aeb2e4e513" /-->      
  <parameter name="[strMK]" operation="binary.tostring" value="[MK]"/>
  <!-- calculated by external C program -->
  <parameter name="[Kout]" operation="set" value="f16b90ccb1dcf6ba2a7b35f82c3facd1"/>
  <parameter name="[strKout]" operation="binary.tostring" value="[Kout]"/>  
	<parameter name="[MAC20]" operation="string.hmac" value="[EAPPayloadMAC0]" value2="HmacSHA1" value3="[strKout]" />
	<parameter name="[number]" operation="string.length" value="[MAC20]" />
	<test parameter="[number]" condition="number.equals" value="40" />
	<parameter name="[AT_MAC]" operation="binary.subbinary" value="[MAC20]" value2="0" value3="16"/>  
	<!--test parameter="[AT_MAC]" condition="binary.equals" value="aa773dac17adaac8ff98d66468e1cddb" /-->  

  <parameter name="[data]" operation="set" value="00" />
  <!--parameter name="[data]" operation="set" value="96c50e44ccf8c28ee4ede037dc08f8e555194e56" /-->
  <parameter name="[zeros44]" operation="set" value="00" value2="44"/>
  <parameter name="[binData]" operation="set" value="[data][zeros44]"/>
  <!--parameter name="[binData]" operation="set" value="cad576e530992e33baf18b01c76327ee12c7b3950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" /-->
  <!--parameter name="[binData]" operation="binary.endian" value="[binData]" /-->
  <parameter name="[strData]" operation="binary.toString" value="[binData]" />
  <parameter name="[binSHA1string]" operation="string.digest" value="[strData]" value2="SHA1" />
  <parameter name="[binSHA1binary]" operation="binary.digest" value="[binData]" value2="SHA1" />
  <test parameter="[binSHA1string]" condition="binary.equals" value="[binSHA1string]"/>
  <!--parameter name="[binSHA1binary]" operation="binary.endian" value="[binSHA1binary]" /-->  
  <test parameter="[binSHA1binary]" condition="binary.equals" value="74f00432af01b4b1fcf644f3dea879bb376c1adb"/>
  <!--test parameter="[binSHA1binary]" condition="binary.equals" value="536e5ebc4465582aa6a8ec9986ebb62025af1942"/-->  
    
</scenario>

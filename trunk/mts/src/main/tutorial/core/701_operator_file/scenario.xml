<?xml version="1.0" encoding="UTF-8"?>

<scenario>

    <!--test create / exists / remove -->
    <parameter name="[result]" operation="file.create" value="myfile" />
    <parameter name="[result]" operation="file.exists" value="myfile" />
    <test parameter="[result]" condition="boolean.equals" value="true"/>
    
    <parameter name="[result]" operation="file.remove" value="myfile" />
    <parameter name="[result]" operation="file.exists" value="myfile" />
    <test parameter="[result]" condition="boolean.equals" value="false"/>
    
    
    <parameter name="[result]" operation="file.create" value="myfile" />
    <parameter name="[result]" operation="file.exists" value="myfile" />
    <test parameter="[result]" condition="boolean.equals" value="true"/>
    
    <parameter name="[result]" operation="file.remove" value="myfile" />
    <parameter name="[result]" operation="file.exists" value="myfile" />
    <test parameter="[result]" condition="boolean.equals" value="false"/>
    
    <!-- test write / read -->
    <parameter name="[result]" operation="file.writebinary"  value="myfile" value2="aabbcc"/>
    <parameter name="[result]" operation="file.exists" value="myfile" />
    <parameter name="[data_1]" operation="file.readbinary"   value="myfile"/>
    <parameter name="[result]" operation="file.writebinary"  value="myfile" value2="ddeeff"/>
    <parameter name="[data_2]" operation="file.readbinary"   value="myfile"/>
    <test parameter="[result]" condition="boolean.equals" value="true"/>
    <test parameter="[data_1]" condition="binary.equals" value="aabbcc"/>
    <test parameter="[data_2]" condition="binary.equals" value="aabbccddeeff"/>
    
    <!-- creating a file should overwrite it by an empty file if it alreadty exists -->
    <parameter name="[result]" operation="file.create" value="myfile" />
    <parameter name="[result]" operation="file.readstring"   value="myfile"/>
    <parameter name="[result]" operation="string.length"   value="[result]"/>
    <test parameter="[result]" condition="number.equals" value="0"/>
    
    <parameter name="[result]" operation="file.remove" value="myfile" />
    
    <parameter name="[result]" operation="file.writestring"  value="myfile" value2="aabbcc"/>
    <parameter name="[result]" operation="file.exists" value="myfile" />
    <parameter name="[data_1]" operation="file.readstring"   value="myfile"/>
    <parameter name="[result]" operation="file.writestring"  value="myfile" value2="ddeeff"/>
    <parameter name="[data_2]" operation="file.readstring"   value="myfile"/>
    <test parameter="[result]" condition="boolean.equals" value="true"/>
    <test parameter="[data_1]" condition="string.equals" value="aabbcc"/>
    <test parameter="[data_2]" condition="string.equals" value="aabbccddeeff"/>

	  <parameter name="[result]" operation="file.remove" value="myfile" />

    <parameter name="[param]" operation="list.create"/>
    <parameter name="[result]" operation="file.writestring"  value="myfile2" value2="[param]"/>
    <parameter name="[result]" operation="file.exists" value="myfile2" />
    <test parameter="[result]" condition="boolean.equals" value="false"/>

    <!--<parameter name="[result]" operation="file.remove" value="myfile2" />-->
    
    <parameter name="[config]" operation="file.readproperty" value="tester.properties" value2="operations.SEMAPHORE_TIMEOUT"/>
    <test parameter="[config]" condition="string.equals" value="30"/>
    
    <parameter name="[config]" operation="file.readproperty" value="701_operator_file/testProperties.properties" value2="someProperty"/>
    <test parameter="[config]" condition="string.equals" value="toto"/>
    
    <parameter name="[config]" operation="file.readproperty" value="tester.properties" value2="stats.AUTOMATIC_GENERATE"/>
    <test parameter="[config]" condition="string.equals" value="false"/>
    
    <!--parameter name="[config]" operation="file.readproperty" value="701_operator_file/testProperties.xml" value2="someProperty"/>
    <test parameter="[config]" condition="string.equals" value="toto"/-->
    
    <parameter name="[csv]" operation="file.readcsv" value="701_operator_file/test_no_header.csv" value2="2" />
    <test parameter="[csv]" condition="string.equals"  value="toto" />
    
    <parameter name="[csv]" operation="file.readcsv" value="701_operator_file/test_header.csv" value2="colB" />
    <test parameter="[csv(0)]" condition="string.equals"  value="B0" />
    <test parameter="[csv(1)]" condition="string.equals"  value="B1" />
    <test parameter="[csv(2)]" condition="string.equals"  value="B2" />
        
    <parameter name="[result]" operation="file.create" value="701_operator_file/myfile.csv" />
    <parameter name="[csv]" operation="file.readcsv" value="701_operator_file/test_no_header.csv" value2="1" />
    <parameter name="[csvwrite]" operation="file.writeCsvCol" value="701_operator_file/myfile.csv" value2="[csv]" />
    <parameter name="[csv]" operation="file.readcsv" value="701_operator_file/test_no_header.csv" value2="2" />
    <parameter name="[csvwrite]" operation="file.writeCsvCol" value="701_operator_file/myfile.csv" value2="[csv]" />
    <parameter name="[csv]" operation="file.readcsv" value="701_operator_file/myfile.csv" value2="1" />
    <test parameter="[csv]" condition="string.equals"  value="toto" />
    <parameter name="[result]" operation="file.remove" value="701_operator_file/myfile.csv" />
    
    <parameter name="[result]" operation="file.create" value="701_operator_file/myfile.csv" />
    <parameter name="[csv]" operation="file.readcsv" value="701_operator_file/test_no_header.csv" value2="1" />
    <parameter name="[csvwrite]" operation="file.writeCsvRaw" value="701_operator_file/myfile.csv" value2="[csv]" />
    <parameter name="[csv]" operation="file.readcsv" value="701_operator_file/test_no_header.csv" value2="2" />
    <parameter name="[csvwrite]" operation="file.writeCsvRaw" value="701_operator_file/myfile.csv" value2="[csv]" />
    <parameter name="[csv]" operation="file.readcsv" value="701_operator_file/myfile.csv" value2="2" />
    <test parameter="[csv]" condition="string.equals"  value="toto" />
    <parameter name="[result]" operation="file.remove" value="701_operator_file/myfile.csv" />
	

</scenario>

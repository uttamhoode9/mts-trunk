<?xml version="1.0" encoding="UTF-8"?>

<scenario>

   <receiveMessageSCTP type="DATA" timeout="[timeout]"/>

    <parameter name="[lastStream]" operation="protocol.setFromMessage" value="sctp.stream"/>
    <test parameter="[lastStream]" condition="number.equals" value="11222" />
    <!-- ssn is incremented automatically by the sctp stack if flag == 1 -->
    <parameter name="[lastSsn]" operation="protocol.setFromMessage" value="sctp.ssn"/>
    <test parameter="[lastSsn]" condition="number.equals" value="0"/>
    <parameter name="[lastPpid]" operation="protocol.setFromMessage" value="sctp.ppid"/>
    <test parameter="[lastPpid]" condition="number.equals" value="987654321" />
     <parameter name="[lastFlags]" operation="protocol.setFromMessage" value="sctp.flags"/>
    <test parameter="[lastFlags]" condition="number.equals" value="1" />
    <!-- context is always set to 0 by the sctp stack --> 
    <parameter name="[lastContext]" operation="protocol.setFromMessage" value="sctp.context"/>
    <test parameter="[lastContext]" condition="number.equals" value="0" />    <!-- tts is always set to 0 by the sctp stack --> 
    <parameter name="[lastTtl]" operation="protocol.setFromMessage" value="sctp.ttl"/>
    <test parameter="[lastTtl]" condition="number.equals" value="0" />
    <!-- ttl is choosen automatically by the sctp stack --> 
    <parameter name="[lastTsn]" operation="protocol.setFromMessage" value="sctp.tsn"/>
    <!--test parameter="[lastTsn]" condition="number.equals" value="0" /-->
     <!-- cumtls is managed automatically by the sctp stack -->
    <parameter name="[lastCumtsn]" operation="protocol.setFromMessage" value="sctp.cumtsn"/>
    <!--test parameter="[lastCumtsn]" condition="number.equals" value="0" /-->
    <!-- aid is choosen automatically by the sctp stack --> 
    <parameter name="[lastAid]" operation="protocol.setFromMessage" value="sctp.aid"/>
    <!--test parameter="[lastAid]" condition="number.equals" value="0" /-->

    <parameter name="[lastSourceHost]" operation="protocol.setFromMessage" value="sctp.peerHosts"/>
    <parameter name="[localHosts]" operation="system.ipaddress" value2="ipv4"/>
    <test parameter="[lastSourceHost(0)]" condition="string.equals" value="[localHosts(0)]" />
    <test parameter="[lastSourceHost(1)]" condition="string.equals" value="[localHosts(1)]" />
   <parameter name="[lastSourcePort]" operation="protocol.setFromMessage" value="sctp.peerPort"/>
    <test parameter="[lastSourcePort]" condition="string.equals" value="[localPortSCTP]" />

    <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
    <test parameter="[contents]" condition="string.equals" value="AAAAA" />

    <finally>

        <parameter name="[lastChannelName]" operation="protocol.setFromMessage" value="channel.name" />
        <!--closeChannelSCTP name="[lastChannelName]" /-->
       <!--pause name="else crash of the jvm"  seconds="0.01"/-->

    </finally>

</scenario>

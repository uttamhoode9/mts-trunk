<?xml version="1.0" encoding="UTF-8"?>

<scenario>

    <createListenpointSCTP name="listenpoint" localPort="5665"/>

    <openChannelSCTP name="channelSCTP" remoteHost="[remoteHostSCTP]" remotePort="5665"  num_ostreams="22223" max_instreams="333334" />    
    <receiveMessageSCTP type="INIT-ACK"/>

    <sendMessageSCTP channel="channelSCTP" stream="22222" ssn="33333" ppid="4294967295"  
                    flags="1" context="2000000000" ttl="3000000000" 
                     tsn= "1234567890" cumtsn=  "2345678901" aid="3456789012">
        <data format="text">test value</data>
    </sendMessageSCTP>
   
   <receiveMessageSCTP></receiveMessageSCTP>

    <parameter name="[lastStream]" operation="protocol.setFromMessage" value="header.stream"/>
    <test parameter="[lastStream]" condition="number.equals" value="22222" />
    <!-- ssn is incremented automatically by the sctp stack if flag == 1 -->
   <parameter name="[lastSsn]" operation="protocol.setFromMessage" value="header.ssn"/>
    <test parameter="[lastSsn]" condition="number.equals" value="0"/>
    <parameter name="[lastPpid]" operation="protocol.setFromMessage" value="header.ppid"/>
    <test parameter="[lastPpid]" condition="number.equals" value="4294967295" />
     <parameter name="[lastFlags]" operation="protocol.setFromMessage" value="header.flags"/>
    <test parameter="[lastFlags]" condition="number.equals" value="1" />
    <!-- context is always set to 0 by the sctp stack --> 
    <parameter name="[lastContext]" operation="protocol.setFromMessage" value="header.context"/>
    <test parameter="[lastContext]" condition="number.equals" value="0" />    <!-- tts is always set to 0 by the sctp stack --> 
    <parameter name="[lastTtl]" operation="protocol.setFromMessage" value="header.ttl"/>
    <test parameter="[lastTtl]" condition="number.equals" value="0" />
    <!-- ttl is choosen automatically by the sctp stack --> 
    <parameter name="[lastTsn]" operation="protocol.setFromMessage" value="header.tsn"/>
    <!--test parameter="[lastTsn]" condition="number.equals" value="0" /-->
     <!-- cumtls is managed automatically by the sctp stack -->
    <parameter name="[lastCumtsn]" operation="protocol.setFromMessage" value="header.cumtsn"/>
    <!--test parameter="[lastCumtsn]" condition="number.equals" value="0" /-->
    <!-- aid is choosen automatically by the sctp stack --> 
    <parameter name="[lastAid]" operation="protocol.setFromMessage" value="header.aid"/>
    <!--test parameter="[lastAid]" condition="number.equals" value="0" /-->

    <parameter name="[lastSourceHost]" operation="protocol.setFromMessage" value="header.sourceHost"/>
    <parameter name="[localHosts]" operation="system.ipaddress" value2="ipv4"/>
    <test parameter="[lastSourceHost(0)]" condition="string.equals" value="[localHosts(0)]" />
    <test parameter="[lastSourceHost(1)]" condition="string.equals" value="[localHosts(1)]" />
   <parameter name="[lastSourcePort]" operation="protocol.setFromMessage" value="header.sourcePort"/>
    <!--test parameter="[lastSourcePort]" condition="string.equals" value="[localPortSCTP]" /-->

    <parameter name="[lastContents]" operation="protocol.setFromMessage" value="data.text" />
    <test parameter="[lastContents]" condition="string.equals" value="test value" />

    <finally>

        <closeChannelSCTP name="channelSCTP"/>
        <receiveMessageSCTP type="ABORT-ACK"/>

        <!--removeListenpointSCTP name="listenpoint"/-->

    </finally>

</scenario>


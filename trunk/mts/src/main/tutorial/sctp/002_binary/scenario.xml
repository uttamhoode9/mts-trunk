<?xml version="1.0" encoding="UTF-8"?>

<scenario>

    <openChannelSCTP name="SCTPConn1" remoteHost="[remoteHostSCTP]" remotePort="[remotePortSCTP]"/>

    <receiveMessageSCTP type="INIT-ACK"/>

    <openChannelSCTP name="SCTPConn2" remoteHost="[remoteHostSCTP]" remotePort="[remotePortSCTP]"/>

    <receiveMessageSCTP type="INIT-ACK"/>
    
    <sendMessageSCTP channel="SCTPConn1">
        <data format="binary">h41:1 h441:1 b01000001:1 d0000065:1 65</data>
    </sendMessageSCTP>
   
    <sendMessageSCTP channel="SCTPConn2">
        <data format="binary">h41:1 h441:1 b01000001:1 d0000065:1 65</data>
    </sendMessageSCTP>
   
    <receiveMessageSCTP type="DATA">
        <parameter name="[stream]" operation="protocol.setFromMessage" value="header.stream"/>
        <parameter name="[ssn]" operation="protocol.setFromMessage" value="header.ssn"/>
        <parameter name="[ppid]" operation="protocol.setFromMessage" value="header.ppid"/>
        <parameter name="[tsn]" operation="protocol.setFromMessage" value="header.tsn"/>
        <parameter name="[aid]" operation="protocol.setFromMessage" value="header.aid"/>

     	<parameter name="[sourceHost]" operation="protocol.setFromMessage" value="header.sourceHost"/>
        <parameter name="[sourcePort]" operation="protocol.setFromMessage" value="header.sourcePort"/>
  
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
    </receiveMessageSCTP>
     
    <test parameter="[stream]" condition="number.equals" value="2" />
    <!--test parameter="[ssn]" condition="number.equals" value="255" /-->
    <test parameter="[ppid]" condition="number.equals" value="12" />
    <!--test parameter="[tsn]" condition="number.equals" value="1234567890" /-->
    <!--test parameter="[aid]" condition="number.equals" value="33554432" /-->

    <test parameter="[sourceHost]" condition="string.equals" value="[localHostSCTP]" />
    <!--test parameter="[sourcePort]" condition="string.equals" value="[localPortSCTP]" /-->
    <test parameter="[contents]" condition="string.equals" value="AAAAA" />

    <receiveMessageSCTP type="DATA">
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
    </receiveMessageSCTP>

    <test parameter="[contents]" condition="string.equals" value="AAAAA" />

    <finally>

        <closeChannelSCTP name="SCTPConn1" />

    	<receiveMessageSCTP type="ABORT-ACK"/>

        <closeChannelSCTP name="SCTPConn2" />

	<receiveMessageSCTP type="ABORT-ACK"/>

    </finally>

</scenario>

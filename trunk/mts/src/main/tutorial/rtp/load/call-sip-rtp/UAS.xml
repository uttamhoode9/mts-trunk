<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>

	<stats>	
        <percent name="packetLost_in" summary="p_lost_in" complete="packets lost for incoming flow"/>
    </stats>

	<stats>
        <value name="timeSpacing_in" summary="t_space_in" complete="time spacing (in seconds) for incoming flow between real and theorical timestamp"/>
   	</stats>

	<parameter name="[inviteePortRTP]" operation="set" value="20000" description="Port pour le bloc sdp de l'invitee du XMLloader"/>		    
    	
  	<receiveMessageSIP name="Wait INVITE" type="INVITE">
        <parameter name="[lastTo]" operation="protocol.setFromMessage" value="header.To"/>
        <parameter name="[lastFrom]" operation="protocol.setFromMessage" value="header.From"/>
        <parameter name="[lastCallId]" operation="protocol.setFromMessage" value="header.Call-Id"/>
        <parameter name="[lastCseq]" operation="protocol.setFromMessage" value="header.CSeq"/>
        <parameter name="[lastCseqNumber]" operation="protocol.setFromMessage" value="header.CSeq.Number"/>
        <parameter name="[lastVia]" operation="protocol.setFromMessage" value="header.Via"/>
        <parameter name="[lastContactURI]" operation="protocol.setFromMessage" value="header.Contact.Address.URI"/>
        <parameter name="[MaxForwards]" operation="protocol.setFromMessage" value="header.Max-Forwards"/>
        <parameter name="[localTag]" operation="string.random" value="10"/>
        <parameter name="[SDPConnectionAddress0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection.Address"/>
        <parameter name="[SDPMediaPort0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Port"/>
  	</receiveMessageSIP>

  	<sendMessageSIP name="Send 100 Trying">
<![CDATA[SIP/2.0 100 Trying
To: [lastTo];tag=[localTag]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCseq]
Via: [lastVia]
User-Agent: IMSLoader/V4.0
Content-Length: 0
]]>
  	</sendMessageSIP>

    <pause name="pause dialing delay" seconds="[dialingDelay]"/>

  	<sendMessageSIP name="Send 180 Ringing">
<![CDATA[SIP/2.0 180 Ringing
To: [lastTo];tag=[localTag]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCseq]
Via: [lastVia]
User-Agent: IMSLoader/V4.0
Content-Length: 0
]]>
  	</sendMessageSIP>

  	<sendMessageSIP name="Send 200 OK">
<![CDATA[SIP/2.0 200 OK
To: [lastTo];tag=[localTag]
From: [lastFrom]
Server: PoC-serv/OMA1.0 XmlLoader/v0.0
Call-ID: [lastCallId]
CSeq: [lastCseq]
Via: [lastVia]
Contact: <sip:[inviter]@[localHostSIP]:[localPortSIP]>
User-Agent: IMSLoader/V4.0
Content-Type: application/sdp
Content-Length: x

v=0
o=[invitee] 999 999 IN IP4 [remoteHostRTP]
s=-
c=IN IP4 [remoteHostRTP]
t=0 0
m=audio [remotePortRTP] RTP/AVP 97
a=rtpmap:97 amr/8000/1
]]>
  	</sendMessageSIP>

  	<receiveMessageSIP name="Wait ack" type="ACK" request="true"/>
	
	<createListenpointRTP name="[invitee]" localHost="[remoteHostRTP(0)]" localPort="[remotePortRTP]"/>

  	<parameter name="[testcase:RTPSessionOpened]" operation="system.semaphorenotify"/>
	<parameter name="[received]" operation="set" value="true"/>	
	<!--<parameter name="[temp]" operation="file.create" value="TimeSpacing_in.csv"/>
    <parameter name="[temp]" operation="file.create" value="PacketLost_in.csv"/>-->

	<while>
	    <condition>
	    	<test parameter="[received]" condition="string.equals" value="true"/>	
	    </condition>
	    <do>
	    	<parameter name="[received]" operation="set" value="false"/>
            <receiveMessageRTP name="ReceivePacketRTP1" type="[payloadTypeRTP]" timeout="1" failedOnTimeout="false">
	    		<parameter name="[received]" operation="set" value="true"/>		
            </receiveMessageRTP>
        
        <if>
    	    <condition>
    	    	<test parameter="[received]" condition="string.equals" value="true"/>	
    	    </condition>
            <then>

        		<parameter name="[msgTimestamp]" operation="protocol.setFromMessage" value="message.timestamp"/>
        		<parameter name="[hdrTimestamp]" operation="protocol.setFromMessage" value="header.timestamp"/>
        		<parameter name="[hdrSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
                <if>
           	        <condition>
                        <test parameter="[oldMsgTimestamp]" condition="list.exists" value="true"/>
           	        </condition>
                    <then>

                        <!-- calculate the packet lost -->
                	    <parameter name="[packetLost_in]" operation="number.substract" value="[hdrSeqnum]" value2="[oldHdrSeqnum]"/>
                	    <parameter name="[packetLost_in]" operation="number.substract" value="[packetLost_in]" value2="1"/>
                        <if>
                            <condition>
                               <test parameter="[packetLost_in]" condition="number.lowerThan" value="0"/>
                            </condition>
                            <then>
                		        <parameter name="[packetLost_in]" operation="set" value="0"/>		
                            </then>
                        </if>

                        <!-- store the packet lost -->
                        <stats>
                            <percent name="packetLost_in">
                                <incValue>[packetLost_in]</incValue>
                                <incTotal>1</incTotal>            
                            </percent>
                        </stats>
                        <!--parameter name="[temp]" operation="file.writestring" value="PacketLost_in.csv" value2="[packetLost_in]&#x0d;&#x0a;"/-->
                        <!--log level="WARN">PacketLost_in = [packetLost_in]</log-->

                        <!-- calculate the time spacing -->
                	    <parameter name="[timeSpacing_in]" operation="number.substract" value="[msgTimestamp]" value2="[oldMsgTimestamp]"/>
                	    <parameter name="[timeSpacing_in]" operation="number.add" value="[timeSpacing_in]" value2="[oldHdrTimestamp]"/>
                	    <parameter name="[timeSpacing_in]" operation="number.substract" value="[timeSpacing_in]" value2="[hdrTimestamp]"/>
                        <if>
                            <condition>
                               <test parameter="[timeSpacing_in]" condition="number.lowerThan" value="0"/>
                            </condition>
                            <then>
                		        <parameter name="[timeSpacing_in]" operation="number.multiply" value="[timeSpacing_in]" value2="-1"/>		
                            </then>
                        </if>
           	            <parameter name="[timeSpacing_in]" operation="number.divide" value="[timeSpacing_in]" value2="1000"/>
        
                        <!-- store the time spacing -->
                        <stats>
                            <value name="timeSpacing_in">
                                <newValue>[timeSpacing_in]</newValue>
                            </value>
                        </stats>
                        <!--parameter name="[temp]" operation="file.writestring" value="TimeSpacing_in.csv" value2="[timeSpacing_in]&#x0d;&#x0a;"/-->
                        <!--log level="WARN">TimeSpacing_in = [timeSpacing_in]</log-->
                    </then>
                </if>
                <parameter name="[oldMsgTimestamp]" operation="set" value="[msgTimestamp]"/>
                <parameter name="[oldHdrTimestamp]" operation="set" value="[hdrTimestamp]"/>
        		<parameter name="[oldHdrSeqnum]" operation="set" value="[hdrSeqnum]"/>
            </then>
        </if>
	    </do>
	</while>
	
	<removeListenpointRTP name="[invitee]"/>
  	  	
  	<receiveMessageSIP name="Wait BYE" type="BYE" request="true">
        <parameter name="[To]" operation="protocol.setFromMessage" value="header.To"/>
        <parameter name="[From]" operation="protocol.setFromMessage" value="header.From"/>
        <parameter name="[CallId]" operation="protocol.setFromMessage" value="header.Call-Id"/>
        <parameter name="[remoteCseqNumber]" operation="protocol.setFromMessage" value="header.CSeq"/>
        <parameter name="[Contact]" operation="protocol.setFromMessage" value="header.Contact"/>
        <parameter name="[Via]" operation="protocol.setFromMessage" value="header.Via"/>
        <parameter name="[MaxForwards]" operation="protocol.setFromMessage" value="header.Max-Forwards"/>
  	</receiveMessageSIP>

  	<sendMessageSIP name="Send 200 OK">
<!--******************* BEGIN MESSAGE ********************-->
<![CDATA[SIP/2.0 200 OK
To: [To]
From: [From]
Via: [Via]
Call-ID: [CallId]
CSeq: [remoteCseqNumber]
Contact: [contact]
Max-Forwards: MaxForwards  
Proxy-Authorization: IMS_GPRS_SCHEMA token="999"
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Max-Forwards: 70
Content-Length: 0
]]>
<!--******************** END MESSAGE *********************-->
  	</sendMessageSIP>
				
</scenario>

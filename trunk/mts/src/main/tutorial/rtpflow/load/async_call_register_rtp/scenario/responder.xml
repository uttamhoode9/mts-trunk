<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>

	<stats>
        <counter name="ActiveSession" summary="Act Sess" complete="Count of active sessions"/>	
       	<counter name="INVITEout" summary="INV_out" complete="Send an outgoing INVITE"/>        	
		<counter name="INVITE2xxin" summary="INV2xx_in" complete="Receive an incoming INVITE/2xx OK"/>        
		<counter name="ACKout" summary="ACK_out" complete="Send an outgoing ACK"/>        	   
		<counter name="BYEout" summary="BYE_out" complete="Send an outgoing BYE"/>        	   		
		<counter name="BYExxxin" summary="BYExxx_in" complete="Receive an incoming BYE/XXX OK"/>	
		<counter name="ListenPointSend" summary="LPSend" complete="Listen point send"/>
    </stats>

	<stats>
       	<counter name="INVITElost" summary="INV_lost" complete="INVITE send but not received"/>
		<counter name="ACKlost" summary="ACK_lost" complete="ACK send but not received"/>        
		<counter name="BYElost" summary="BYE_lost" complete="BYE send but not received"/>			
    </stats>

	<parameter name="[indexUser]" operation="set" value="0"/>
	<parameter name="[TestRangeNumberUser]" operation="set" value="[RangeNumberUser]" />

	<!-- calculate the range of user from the csv files -->
	<parameter name="[RangeNumberUser]" operation="list.size" value="[userTab]"/>
	<parameter name="[RangeNumberUser]" operation="number.substract" value="[RangeNumberUser]" value2="1"/>

	<parameter name="[TempDuration]" operation="set" value="[TryingDuration]"/>    	
	<parameter name="[TempDuration]" operation="number.add" value="[TempDuration]" value2="[RingingDuration]"/>
	<parameter name="[TempDuration]" operation="number.add" value="[TempDuration]" value2="[CallDurationSec]"/>
	<parameter name="[TempDuration]" operation="number.add" value="[TempDuration]" value2="10"/>
	<parameter name="[TestTempDuration]" operation="number.multiply" value="[TempDuration]" value2="2"/>

	<!-- start main loop -->
	<label name="begin"/>

	<parameter name="[received]" operation="set" value="false"/>		
	<receiveMessageSIP name="wait_SIP_request" timeout="[TestTempDuration]" failedOnTimeout="false">
		<parameter name="[received]" operation="set" value="true"/>
		<parameter name="[lastListenpoint]" operation="protocol.setFromMessage" value="listenpoint.name"/>
		<parameter name="[lastLocalHost]" operation="protocol.setFromMessage" value="listenpoint.localHost"/>
		<parameter name="[lastLocalPort]" operation="protocol.setFromMessage" value="listenpoint.localPort"/>
		<parameter name="[lastMethod]" operation="protocol.setFromMessage" value="message.type"/>
		<parameter name="[lastIsRequest]" operation="protocol.setFromMessage" value="message.request"/>
		<parameter name="[lastResult]" operation="protocol.setFromMessage" value="message.result"/>
		<parameter name="[lastFirstline]" operation="protocol.setFromMessage" value="firstline"/>
		<parameter name="[lastTo]" operation="protocol.setFromMessage" value="header.To"/>
		<parameter name="[lastToUser]" operation="protocol.setFromMessage" value="header.To.Address.URI.User"/>
	  	<parameter name="[lastFrom]" operation="protocol.setFromMessage" value="header.From"/>
		<parameter name="[lastFromUser]" operation="protocol.setFromMessage" value="header.From.Address.URI.User"/>
	  	<parameter name="[lastFromTag]" operation="protocol.setFromMessage" value="header.From.parameter.tag"/>
	  	<parameter name="[lastCallId]" operation="protocol.setFromMessage" value="header.Call-ID"/>
	  	<parameter name="[lastCSeq]" operation="protocol.setFromMessage" value="header.CSeq"/>
    	<parameter name="[lastCSeqNumber]" operation="protocol.setFromMessage" value="header.CSeq.Number"/>
	  	<parameter name="[lastVia]" operation="protocol.setFromMessage" value="header.Via"/>
	  	<parameter name="[lastViaBranch]" operation="protocol.setFromMessage" value="header.Via.Parameter.branch"/>
	  	<parameter name="[lastRoute]" operation="protocol.setFromMessage" value="header.Route"/>
		<parameter name="[lastRouteUser]" operation="protocol.setFromMessage" value="header.Route.Address.URI.User"/>
	  	<parameter name="[lastRecordRoute]" operation="protocol.setFromMessage" value="header.Record-Route"/>
	  	<parameter name="[lastContact]" operation="protocol.setFromMessage" value="header.Contact"/>
   		<parameter name="[lastContactURI]" operation="protocol.setFromMessage" value="header.Contact.Address.URI"/>
	  	<parameter name="[lastMax-Forwards]" operation="protocol.setFromMessage" value="header.Max-Forwards"/>
		<parameter name="[lastHeaderOthers]" operation="protocol.setFromMessage" value="header.Others"/>
	  	<parameter name="[lastContent]" operation="protocol.setFromMessage" value="content"/>
	  	<parameter name="[lastServiceTrigger]" operation="protocol.setFromMessage" value="header.ServiceTrigger"/>
	  	<parameter name="[lastMessage]" operation="protocol.setFromMessage" value="message"/>
		<parameter name="[SDPConnectionAddress0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection.Address"/>
		<parameter name="[SDPMediaPort0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Port"/>
		<!-- pour authentification -->
		<parameter name="[StatusCode]" operation="protocol.setFromMessage" value="firstline.StatusCode"/>	
		<parameter name="[AuthRealm]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.realm"/>
		<parameter name="[AuthNonce]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.nonce"/>
		<parameter name="[AuthQop]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.qop"/>
		
	</receiveMessageSIP>
	<parameter name="[URI]"      operation="set" value="sip:[lastToUser]@[domainName]" /> 
	<log level="info"> lastIsRequest = [lastIsRequest]</log>

	<if>
	    <condition>
		    <test parameter="[received]" condition="string.equals" value="false"/>
	    </condition>
	    <then>
			<parameter name="[test:startUnReg]" operation="system.semaphorenotify"/>
			<exit name="exit" failed="false"/>
	    </then>
	</if>

	<if>
	    <condition>
			<test parameter="[lastIsRequest]" condition="string.equals" value="true"/>		  		  		    
	    	<test parameter="[lastMethod]" condition="string.equals" value="INVITE"/>
	    </condition>
	    <then>
			<goto  name="goto_recINVITE" label="recINVITE" state="true"/>	    	
	    </then>
	</if>

	<if>
	    <condition>
			<test parameter="[lastIsRequest]" condition="string.equals" value="true"/>		  		  		    
	    	<test parameter="[lastMethod]" condition="string.equals" value="ACK"/>		  		  	
	    </condition>
	    <then>
			<stats>
				<counter name="ACKlost"><decrease>1</decrease></counter>
    		</stats>	    	    	
			<goto  name="goto_begin" label="begin" state="true"/>	    	    		
	    </then>
	</if>

	<if>
	    <condition>
	    	<test parameter="[received]" condition="string.equals" value="true"/>		  		  		    
			<test parameter="[lastIsRequest]" condition="string.equals" value="false"/>		  		  		    		
	    	<test parameter="[lastMethod]" condition="string.equals" value="INVITE"/>
	    	<test parameter="[lastResult]" condition="number.greaterEqualThan" value="200"/>	    		    	
	    </condition>
	    <then>
			<goto  name="goto_Request" label="recINVITE23456xx" state="true"/>	    	
	    </then>
	</if>

	<if>
	    <condition>
	    	<test parameter="[received]" condition="string.equals" value="true"/>		  		  		    	    
			<test parameter="[lastIsRequest]" condition="string.equals" value="true"/>		  		  		    
	    </condition>
		<then>
			<goto  name="goto_recOTHERS" label="recOTHERS" state="true"/>	    	
	    </then>
	</if>

	<if>
	    <condition>
	    	<test parameter="[received]" condition="string.equals" value="true"/>
			<test parameter="[lastIsRequest]" condition="string.equals" value="false"/>
	    </condition>
	    <then>
			<goto  name="goto_recOTHERSxxx" label="recOTHERSxxx" state="true"/>
		</then>
	</if>

	<goto  name="goto_begin" label="begin" state="true"/>
	<!-- end main loop -->

	<label name="recINVITE"/>	

	<stats>
		<counter name="INVITElost"><decrease>1</decrease></counter>
	</stats>	    	    	

	<parameter name="[newToTag]" operation="string.random" value="10"/>

	<parameter name="[index_number_phone]" operation="list.find" value="[userTab]" value2="[lastFromUser]"/>
	<parameter name="[lastFromNumberPhone]" operation="set" value="[userTabNP([index_number_phone])]"/>
	
	<sendMessageSIP name="Send 100 Trying" delay="0" listenpoint="[lastListenpoint]" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
SIP/2.0 100 Trying
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Via: [lastVia]
Content-Length: 0
]]>			
  	</sendMessageSIP>

    <sendMessageSIP name="Send 180 Ringing" delay="[TryingDuration]" listenpoint="[lastListenpoint]" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
SIP/2.0 180 Ringing
To: [lastTo];tag=[newToTag]
From: [lastFrom]
Call-ID: [lastCallId]
Contact: <sip:[lastToUser]@[lastLocalHost]:[lastLocalPort]>
CSeq: [lastCSeq]
Via: [lastVia]
Record-Route: [lastRecordRoute]
Content-Length: 0

]]>			
    </sendMessageSIP>


  	<parameter name="[indexUser]" operation="number.add" value="[indexUser]" value2="1"/> 
	<parameter name="[TestindexUser]" operation="number.multiply" value="[indexUser]" value2="2"/>
    <if>
		<condition>
			<test parameter="[TestindexUser]" condition="number.greaterThan" value="[TestRangeNumberUser]"/>       	     
		</condition>
		<then>
			<parameter name="[indexUser]" operation="set" value="1"/> 
	    </then>
	</if>

	<parameter name="[tempPortRTP]" operation="number.multiply" value="[indexUser]" value2="2"/>
	<parameter name="[portRTP]" operation="number.add" value="[RangePortRTP-UAS]" value2="[tempPortRTP]"/>    			
    <log level="info"> port RTP creation = [portRTP]</log>

	<sendMessageSIP name="Send 200 OK" delay="[RingingDuration]" listenpoint="[lastListenpoint]" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
SIP/2.0 200 OK
From: [lastFrom]
To: [lastTo];tag=[newToTag]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Via: [lastVia]
Contact: <sip:[lastToUser]@[lastLocalHost]:[lastLocalPort]>
Record-Route: [lastRecordRoute]
Content-Type: application/sdp
Content-Length: x

v=0
o=[lastToUser] 2211961014 2211961014 IN IP4 [Host-Tester]
s=VOIP P160SLD 02.11.08
c=IN IP4 [Host-Tester]
t=0 0
m=audio [portRTP] RTP/AVP 0 18 4
a=rtpmap:0 PCMU/8000/1
a=rtpmap:18 G729/8000/1
a=fmtp:18 annexb=no
a=rtpmap:4 G723/8000/1
a=sendrecv

]]>			
	</sendMessageSIP>

	<log level="info">lastFrom = [lastFrom]</log>
    <log level="info">lastTo = [lastTo]</log>
	<log level="info">lastCallId = [lastCallId]</log>	
	<log level="info">lastCSeq = [lastCSeq]</log>	
    <log level="info">portRTP = [portRTP]</log>	

	<!-- Ajouté le 11 janvier 2011 -->

	<createListenpointRTPFLOW name="listenpoint_[portRTP]" localHost="[Host-Tester]" localPort="[portRTP]" transport="UDP"/>
	<stats>
		<counter name="ListenPointSend"><increase>1</increase></counter>
    </stats>

  	<parameter name="[newSsrc]" operation="number.random" value="1000000" description="random Ssrc for the RTP flow"/>
	<parameter name="[seqnum]" operation="set" value="0"/>
	<parameter name="[timestamp]" operation="set" value="0"/>
    <parameter name="[deltaTimestamp]" operation="set" value="160"/>
    <parameter name="[temp]" operation="number.divide" value="[deltaTimestamp]" value2="[byteRateRTP]"/>

	<parameter name="[payloadList]" operation="set" value="[[fileWave(0)]]"/>
	<parameter name="[payloadListTaille]" operation="list.size" value="[payloadList(0)]"/>
    <parameter name="[payloadType]" operation="set" value="[[fileWave(1)]]"/>
    <parameter name="[bitRate]" operation="set" value="[[fileWave(2)]]"/>
    <parameter name="[nbPacket]" operation="list.size" value="[payloadList]"/>
	<parameter name="[nbPacketCall]" operation="number.multiply" value="[CallDurationSec]" value2="50"/>
	
	<log level="info"> payloadList : [payloadList(0)] </log>
	<log level="info"> payloadListTaille : [payloadListTaille] </log>
	<log level="info"> payloadType : [payloadType] </log>
	<log level="info"> bitRate : [bitRate] </log>
	<log level="info"> nbPacket : [nbPacket] </log>
	<log level="info"> nbPacketCall : [nbPacketCall] </log>
	
	<sendMessageRTPFLOW listenpoint="listenpoint_[portRTP]" remoteHost="[SDPConnectionAddress0]" remotePort="[SDPMediaPort0(0)]">
        <flow  packetNumber="[nbPacketCall]" deltaTimestamp="[deltaTimestamp]" synchronous="false" bitRate="[bitRate]" packetLost="0">
			<header ssrc="[newSsrc]" payloadType="[payloadType]" seqnum="[seqnum]" timestamp="[timestamp]"/>
			<payload format="binary">[payloadList]</payload>
        </flow>
	</sendMessageRTPFLOW>

	
    <parameter name="[jitterDelay]" operation="protocol.setFromMessage" value="qos.jitterDelayMean"/>
    <parameter name="[packetNumber]" operation="protocol.setFromMessage" value="flow.packetNumber"/>
    <parameter name="[packetLost]" operation="protocol.setFromMessage" value="qos.packetLost"/>

    <stats>
		<value name="jitterDelay_out">
			<newValue>[jitterDelay]</newValue>
		</value>
	</stats>

    <log level="WARN" type="main">JitterDelay_out = [jitterDelay]</log>
	<!--parameter name="[temp]" operation="file.writestring" value="JitterDelay_out.csv" value2="[jitterDelay]&#x0d;&#x0a;"/-->

	<stats>
		<percent name="packetLost_out">
			<incValue>[packetLost]</incValue>
			<incTotal>[packetNumber]</incTotal>
		</percent>
	</stats>

    <log level="WARN" type="main">PacketLost_out = [packetLost]</log>
    <!--parameter name="[temp]" operation="file.writestring" value="PacketLost_out.csv" value2="[packetLost]&#x0d;&#x0a;"/-->

	<!-- Fin ajout du 11 janvier 2010-->	

	<goto  name="goto_begin" label="begin" state="true"/>	    	

	<label name="recINVITE23456xx"/>	

	<!-- authentification -->
	<if>
		<condition>
			<or>
				<test parameter="[StatusCode]" condition="string.equals" value="401"/>	
				<test parameter="[StatusCode]" condition="string.equals" value="407"/>
			</or>		
		</condition>
		<then>
			<!-- SEND ACK -->
			<log level="warn"> lastContactURI : [lastContactURI]</log>
			<!-- <parameter name="[newBranchId]" operation="string.random" value="10"/> -->
			<parameter name="[route]" operation="list.revert" value="[lastRecordRoute]"/>
			<parameter name="[index_port_uac]" operation="list.find" value="[userTab]" value2="[lastFromUser]"/>
			<parameter name="[lastFromNumberPhone]" operation="set" value="[userTabNP([index_port_uac])]"/>

			<sendMessageSIP name="Send ACK" delay="0" listenpoint="[lastListenpoint]" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
ACK [URI] SIP/2.0
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeqNumber] ACK
Max-Forwards: 70
Route: [route]
Contact: <sip:[lastFromUser]@[Host-Tester]:[Port-Tester]>
Via: SIP/2.0/UDP [lastLocalHost]:[lastLocalPort];branch=[lastViaBranch]
User-Agent: SAGEM / B.1.1.1 / 6D1219
Content-Length: 0

]]>
			</sendMessageSIP>

			<parameter name="[newFromTag]" operation="string.random" value="10"/>
			<!-- CALCULATE RESPONSE -->
			<log level="WARN"> calculate Response </log>

			<parameter name="[portRTPUAC]" operation="number.add" value="[RangePortRTP-UAC]" value2="[index_port_uac]"/>
			<parameter name="[Port-Tester]" operation="number.substract" value="65535" value2="[index_port_uac]"/>
			<parameter name="[Password]" operation="set" value="123"/>
			<parameter name="[Method]" operation="set" value="INVITE"/>				
			<!-- <parameter name="[URI]"      operation="set" value="sip:[lastToUser]@[domainName]" /> -->
			<parameter name="[HA2]" operation="string.digest" value2="MD5" value="[Method]:[URI]" />
			<parameter name="[NonceCount]" operation="set" value="00000001" />
			<parameter name="[CNonce]"     operation="set" value="5c0b2" />
			<parameter name="[newBranchId]" operation="string.random" value="10"/>
			<!--parameter name="[ProxyAuthRealm]" operation="set" value="planet.net.tn"/-->
			<parameter name="[HA1]" operation="string.digest" value2="MD5" value="[lastFromUser]@[domainName]:[AuthRealm]:[Password]"/>
			<parameter name="[AuthResponse]" operation="string.digest" value2="MD5" value="[HA1]:[AuthNonce]:[NonceCount]:[CNonce]:[AuthQop]:[HA2]" />
			<parameter name="[CseqNumber]" operation="number.add" value="[lastCSeqNumber]" value2="1"/>
			
			<!--
			<parameter name="[Method_test]" operation="set" value="INVITE"/>				
			<parameter name="[URI_test]"      operation="set" value="sip:30019929@orange.tn" /> 
			<parameter name="[HA2_test]" operation="string.digest" value2="MD5" value="[Method_test]:[URI_test]" />
			<parameter name="[NonceCount_test]" operation="set" value="00000001" />
			<parameter name="[CNonce_test]"     operation="set" value="5c148" />
			<parameter name="[username_test]"     operation="set" value="devoteam2" />
			<parameter name="[AuthRealm_test]"     operation="set" value="planet.net.tn" />
			<parameter name="[Password_test]"     operation="set" value="123" />
			<parameter name="[AuthNonce_test]"     operation="set" value="80DEA3D0BFF496FD63F3" />
			<parameter name="[AuthQop_test]"     operation="set" value="auth" />
			
			<parameter name="[HA1_test]" operation="string.digest" value2="MD5" value="[username_test]:[AuthRealm_test]:[Password_test]"/>
			<parameter name="[AuthResponse_test]" operation="string.digest" value2="MD5" value="[HA1_test]:[AuthNonce_test]:[NonceCount_test]:[CNonce_test]:[AuthQop_test]:[HA2_test]" />
			<log level="warn"> AuthResponse_test : [AuthResponse_test]</log> 
			-->

			<log level="warn"> AuthRealm : [AuthRealm]</log>
			<log level="warn"> lastFromUser : [lastFromUser]</log>
			<log level="warn"> URI : [URI]</log>
			<log level="warn"> HA1 : [HA1]</log>
			<log level="warn"> HA2 : [HA2]</log>
			<log level="warn"> lastContactURI : [lastContactURI]</log>
			<log level="warn"> AuthNonce : [AuthNonce]</log>
			<log level="warn"> AuthResponse : [AuthResponse]</log>

			<!-- SEND INVITE AUTH-->
			<!--Route: <sip:[lastToUser]@[Adresse-Server];lr;call=orig>
				Record-Route: <sip:[lastToUser]@[Host-Tester]:[Port-Tester];maddr=[Host-Tester];lr> -->
			<sendMessageSIP name="Send INVITE AUTH" listenpoint="[lastListenpoint]" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[		
INVITE [URI] SIP/2.0
From: [lastFrom]
To: <sip:[lastToUser]@[domainName]>
Call-ID: [lastCallId]
CSeq: [CseqNumber] INVITE
Via:  SIP/2.0/UDP [Host-Tester]:[Port-Tester];branch=z9hG4bK-[newBranchId]
Max-Forwards: 70
User-Agent: SAGEM / B.1.1.1 / 6D1219
Contact: <sip:[lastFromUser]@[Host-Tester]:[Port-Tester]>
Authorization: Digest username="[lastFromUser]@[domainName]",realm="[AuthRealm]",nonce="[AuthNonce]",uri="[URI]",response="[AuthResponse]",algorithm=MD5,cnonce="[CNonce]",opaque="opaqueData",qop=[AuthQop],nc=[NonceCount]
Allow: INVITE,ACK,CANCEL,BYE,NOTIFY,OPTIONS,REFER,UPDATE
Content-Type: application/sdp
Content-Length: x

v=0
o=[lastFromUser] 2211961014 2211961014 IN IP4 [Host-Tester]
s=VOIP P160SLD 02.11.08
c=IN IP4 [Host-Tester]
t=0 0
m=audio [portRTPUAC] RTP/AVP 0 18 4
a=rtpmap:0 PCMU/8000/1
a=rtpmap:18 G729/8000/1
a=fmtp:18 annexb=no
a=rtpmap:4 G723/8000/1
a=sendrecv

]]>	
			</sendMessageSIP>
			<goto  name="goto_begin" label="begin" state="true"/>
		</then>	
	</if>

	<if>
	    <condition>
	    	<test parameter="[lastResult]" condition="number.greaterEqualThan" value="300"/>	    		    	
	    </condition>
	    <then>
	    	<log type="Main" level="ERROR">
		<![CDATA[	    	
	    	StatusCode = #[lastResult] for the call from "[lastFromUser]" to "[lastToUser]" 
message : [lastMessage]
		]]>		
			</log>
	    </then>
	</if>

  	<stats>
  	   	<counter name="ACKout"><increase>1</increase></counter>
  	   	<counter name="ACKlost"><increase>1</increase></counter>
    </stats>	    	    			

	<if>
	    <condition>
	    	<test parameter="[lastResult]" condition="string.matches" value="[2][0-9][0-9]"/>
	    </condition>
	    <then>
			<parameter name="[newBranchId_temp]" operation="string.random" value="10"/>
			<parameter name="[newBranchId]" operation="set" value="z9hG4bK-[newBranchId_temp]"/>
		</then>
		 <else>
			<parameter name="[newBranchId]" operation="set" value="[lastViaBranch]"/>
		</else>
	</if>
    
    <parameter name="[route]" operation="list.revert" value="[lastRecordRoute]"/>
	<parameter name="[index_port_uac]" operation="list.find" value="[userTab]" value2="[lastFromUser]"/>
	<parameter name="[lastFromNumberPhone]" operation="set" value="[userTabNP([index_port_uac])]"/>
	
	<sendMessageSIP name="Send ACK" delay="0" listenpoint="[lastListenpoint]" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
ACK [lastContactURI] SIP/2.0
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeqNumber] ACK
Max-Forwards: 70
Route: [route]
Contact: <sip:[lastFromUser]@[Host-Tester]:[Port-Tester]>
Via: SIP/2.0/UDP [lastLocalHost]:[lastLocalPort];branch=[newBranchId]
User-Agent: SAGEM / B.1.1.1 / 6D1219
Content-Length: 0

]]>
  	</sendMessageSIP>

	<if>
	    <condition>
	    	<test parameter="[lastResult]" condition="string.matches" value="[3-9][0-9][0-9]"/>
	    </condition>
	    <then>
			<stats>
				<counter name="ActiveSession"><decrease>1</decrease></counter>
			</stats>	    	    		  
			<goto  name="goto_begin" label="begin" state="true"/>
	    </then>
	</if>

	<stats>
		<counter name="INVITE2xxin"><increase>1</increase></counter>
		<counter name="BYEout"><increase>1</increase></counter>
		<counter name="BYElost"><increase>1</increase></counter>
	</stats>

	<parameter name="[newBranchId]" operation="string.random" value="10"/>
	<parameter name="[newCseqNumber]" operation="number.uid" value="10"/>
	<parameter name="[route]" operation="list.revert" value="[lastRecordRoute]"/>
	<parameter name="[CseqNumberBye]" operation="number.add" value="1" value2="[lastCSeqNumber]"/>
  	<sendMessageSIP name="Send BYE" delay="[CallDurationSec]" listenpoint="[lastListenpoint]" remoteHost="[Host-Server]" remotePort="[Port-Server]"> 
<![CDATA[
BYE [lastContactURI] SIP/2.0
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [CseqNumberBye] BYE
Max-Forwards: 70
Route: [route]
Via: SIP/2.0/UDP [lastLocalHost]:[lastLocalPort];branch=z9hG4bK-[newBranchId]
Content-Length: 0

]]>
  	</sendMessageSIP>

	<goto  name="goto_begin" label="begin" state="true"/>
	
	<label name="recOTHERS"/>

	
	<if>
	    <condition>
	    	<test parameter="[lastMethod]" condition="string.equals" value="BYE"/>
	    </condition>
	    <then>
			<stats>
				<counter name="BYElost"><decrease>1</decrease></counter>
    		</stats>
	    </then>
	</if>
  
	<parameter name="[newToTag]" operation="string.random" value="10"/>

	<sendMessageSIP name="Send 200 OK" delay="0" listenpoint="[lastListenpoint]" remoteHost="[Host-Server]" remotePort="[Port-Server]">
<![CDATA[
SIP/2.0 200 OK
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Via: [lastVia]
Content-Length: 0

]]>
	</sendMessageSIP>

	<parameter name="[index_port_to_remove]" operation="list.find" value="[userTab]" value2="[lastToUser]"/>
	<parameter name="[Port_to_remove]" operation="number.add" value="[RangePortRTP-UAS]" value2="[index_port_to_remove]"/>

	<log level="info">port RTP à enlever = [Port_to_remove]</log>
	<log level="info">tentative de removeListenPoint</log>	

	<try>
		<do>
			<removeListenpointRTPFLOW name="listenpoint_[Port_to_remove]"/>
			<log level="info">port RTP remove = [Port_to_remove]</log>
			<stats>
				<counter name="ListenPointSend"><decrease>1</decrease></counter>
    		</stats>
		</do>
		<finally>
			<log level="info">Listenpoint enleve</log>
		</finally>
	</try>

	<goto  name="goto_begin" label="begin" state="true"/>

	<label name="recOTHERSxxx"/>

	<if>
		<condition>
	    	<test parameter="[lastMethod]" condition="string.equals" value="BYE"/>
	    </condition>
	    <then>
			<stats>
				<counter name="ActiveSession"><decrease>1</decrease></counter>
				<counter name="BYExxxin"><increase>1</increase></counter>
    		</stats>
	    </then>
	</if>

	<goto  name="goto_begin" label="begin" state="true"/>

</scenario>

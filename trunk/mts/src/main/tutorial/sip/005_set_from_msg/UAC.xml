<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>

<parameter name="[103_DOMAIN_ADDR]" operation="set" value="devoteam.com"/>
<parameter name="[inviteeName1]" operation="set" value="1234"/>
<parameter name="[clientName]" operation="set" value="alice"/>
<parameter name="[CallId]" operation="set" value="1234567890"/>
<parameter name="[CSeqNumber]" operation="set" value="0001111"/>
<parameter name="[RSeq]" operation="set" value="09999"/>
<parameter name="[RAck]" operation="set" value="000055"/>
<parameter name="[testcase:localTag]" operation="string.random" value="10"/>
<parameter name="[testcase:newBranchId]" operation="string.random" value="10"/>

<parameter name="[timestamp1]" operation="system.timestamp" value="1970"/>

<sendMessageSIP name="Send INVITE" remoteHost="[remoteHostSIP]" remotePort="[remotePortSIP]" destScenario="1234">
<![CDATA[

INVITE tel:[inviteeName1] SIP/2.0
t: "<[inviteeName1] =,;DUPOND>=,;" <tel:[inviteeName1]>
	From: "<[clientName] ,=;DURANT>,=;" <sip:[clientName]@[103_DOMAIN_ADDR];TesterId=6789>;tag=[testcase:localTag]
	Call-ID: [CallId]
Call-Info: <http://www.example.com/alice/> ;purpose=info
CSeq: [CSeqNumber]  INVITE
RSeq: [RSeq]
RAck: [RAck] [CSeqNumber] INVITE
Max-Forwards: 70
Expires: 3600
Content-Encoding: gzip
Content-Language: en
allow: INVITE,ACK, OPTIONS
ALLOW: CANCEL, BYE
Supported: timer
Content-Type: multipart/mixed;boundary="----=_Part_0"
Authorization: Digest username="Alice",
	realm="atlanta.com",
 nonce="84a4cc6f3082121f32b42a2187831a9e",
 uri="sip:alice@atlanta.com",
 qop=auth,
 nc=00000001,
 cnonce="0a4f113b",
 response="7587245234b3434cc3412213e5f113a5432",
 opaque="5ccc069c403ebaf9f0171e9517f40e41"
        VIA: SIP/2.0/[transportResponse] [localSIP];branch=z9hG4bK[newBranchId];ttl=3000;received=[localHostSIP];rport
via: SIP/2.0/[transportResponse] 172.16.21.232:5060;received=172.16.21.230;branch=z9hG4bK[newBranchId]
Ttl: 3000
User-Agent: XmlLoader
XmlLoaderId: XmlLoaderId
Param: val;foo=0;Param1="abcde";param2=01234;foo=1;Param1="01234"
 attr: val1,Attr1="abcde",FOO=1
Attr: val2,Foo=0,attr2=01234
ATTR: val3,foo=0,ATTR2="abcde"
Arg: arg0 arg1    arg2
Route: <sip:[inviteeName1]@[remoteSIP];transport=[transportRequest];lr>;id=titi
ROUTE: <sip:[inviteeName1]@[remoteSIP];transport=[transportRequest];lr>;id=toto
route: <sip:[inviteeName1]@[localSIP];transport=[transportRequest];lr>;id=tata
m: <sip:[clientName]@[localSIP]>;expires=3600,<sip:[inviteeName1]@172.16.21.32:5060>;expires=3300
Content-Length: x

------=_Part_0
Content-Type: application/sdp

v=0
o=clientName 999 999 IN IP4 [clientHostRTP]
s=-
c=IN IP4 [clientHostRTP]
t=0 0
m=audio [clientPortRTP] RTP/AVP 97
a=rtpmap:97 amr/8000/1
a=fmtp:97 mode-set=1;octet-align=1;crc=0
a=+g.poc.talkburst
a=maxptime:200
a=ptime:200
m=application [clientPortRTCP] udp TBCP
a=fmtp:TBCP queuing=0;tb_priority=1;timestamp=0

------=_Part_0
Content-Type: application/resource-lists+xml
Content-Disposition: recipient-list

<?xml version="1.0" encoding="UTF-8"?>
<resource-lists xmlns="urn:ietf:params:xml:ns:resource-lists" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<list>
<entry uri="[inviteeName1]"/>
</list>
</resource-lists>
------=_Part_0--]]>
</sendMessageSIP>

<parameter name="[transID]" operation="protocol.setFromMessage" value="transaction.id"/>
<parameter name="[msgInitial]" operation="protocol.setFromMessage" value="message"/>

<parameter name="[testcase:sentMessageLength]" operation="protocol.setFromMessage" value="message.length"/>

<parameter name="[timestamp2]" operation="protocol.setFromMessage" value="message.timestamp"/>  
<parameter name="[diffTimestamp]" operation="number.substract" value="[timestamp2]" value2="[timestamp1]"/>
<test parameter="[diffTimestamp]" condition="number.lowerThan" value="2000"/>

<parameter name="[firstline]" operation="protocol.setFromMessage" value="firstline"/>
<test parameter="[firstline]" condition="string.equals" value="INVITE tel:1234 SIP/2.0"/>

<parameter name="[firstlineVersion]" operation="protocol.setFromMessage" value="firstline.version"/>
<test parameter="[firstlineVersion]" condition="string.equals" value="SIP/2.0"/>

<parameter name="[firstlineMethod]" operation="protocol.setFromMessage" value="firstline.Method"/>
<test parameter="[firstlineMethod]" condition="string.equals" value="INVITE"/>

<parameter name="[firstlineURI]" operation="protocol.setFromMessage" value="firstline.URI"/>
<test parameter="[firstlineURI]" condition="string.equals" value="tel:1234"/>

<parameter name="[To]" operation="protocol.setFromMessage" value="header.To"/>
<test parameter="[To]" condition="string.contains" value=" &lt;tel:1234&gt;"/>

<parameter name="[ToAddress]" operation="protocol.setFromMessage" value="header.To.Address"/>
<test parameter="[ToAddress]" condition="string.contains" value=" &lt;tel:1234&gt;"/>

<parameter name="[ToTag]" operation="protocol.setFromMessage" value="header.To.Parameter.tag"/>

<parameter name="[From]" operation="protocol.setFromMessage" value="header.From"/>
<test parameter="[From]" condition="string.contains" value=" &lt;sip:alice@devoteam.com;TesterId=6789&gt;;tag="/>

<parameter name="[FromAddress]" operation="protocol.setFromMessage" value="header.From.Address"/>
<test parameter="[FromAddress]" condition="string.contains" value=" &lt;sip:alice@devoteam.com;TesterId=6789&gt;"/>

<parameter name="[FromTag]" operation="protocol.setFromMessage" value="header.From.Parameter.tag"/>  

<parameter name="[Contact]" operation="protocol.setFromMessage" value="header.Contact"/> 
<test parameter="[Contact(0)]" condition="string.equals" value="&lt;sip:alice@[localSIP]&gt;;expires=3600"/>
<test parameter="[Contact(1)]" condition="string.equals" value="&lt;sip:1234@172.16.21.32:5060&gt;;expires=3300"/>

<parameter name="[ContactAddress]" operation="protocol.setFromMessage" value="header.Contact.Address"/>
<test parameter="[ContactAddress(0)]" condition="string.equals" value="&lt;sip:alice@[localSIP]&gt;"/>
<test parameter="[ContactAddress(1)]" condition="string.contains" value="&lt;sip:1234@172.16.21.32:5060&gt;"/> 

<parameter name="[ContactURI]" operation="protocol.setFromMessage" value="header.Contact.Address.URI"/>
<test parameter="[ContactURI(0)]" condition="string.equals" value="sip:alice@[localSIP]"/>
<test parameter="[ContactURI(1)]" condition="string.equals" value="sip:1234@172.16.21.32:5060"/> 

<parameter name="[ContactExpires]" operation="protocol.setFromMessage" value="header.Contact.Parameter.expires"/>
<test parameter="[ContactExpires(0)]" condition="string.equals" value="3600"/>
<test parameter="[ContactExpires(1)]" condition="string.equals" value="3300"/>

<parameter name="[CSeq]" operation="protocol.setFromMessage" value="header.CSeq"/>
<test parameter="[CSeq]" condition="string.contains" value="0001111"/>
<test parameter="[CSeq]" condition="string.contains" value=" INVITE"/>

<parameter name="[CSeqNumber]" operation="protocol.setFromMessage" value="header.CSeq.Number"/>
<test parameter="[CSeqNumber]" condition="string.equals" value="1111"/>

<parameter name="[CSeqMethod]" operation="protocol.setFromMessage" value="header.CSeq.Method"/>
<test parameter="[CSeqMethod]" condition="string.equals" value="INVITE"/>

<parameter name="[RSeq]" operation="protocol.setFromMessage" value="header.RSeq"/>
<test parameter="[RSeq]" condition="string.equals" value="9999"/>

<parameter name="[CallId]" operation="protocol.setFromMessage" value="header.Call-ID"/>
<test parameter="[CallId]" condition="string.equals" value="1234567890"/>

<parameter name="[DialogId]" operation="protocol.setFromMessage" value="header.DialogId"/>
<test parameter="[DialogId]" condition="string.equals" value="[CallId]|[FromTag]|"/>

<parameter name="[CallInfoPurpose]" operation="protocol.setFromMessage" value="header.Call-Info.Parameter.purpose"/>
<parameter name="[CallInfo]" operation="protocol.setFromMessage" value="header.Call-Info"/>

<parameter name="[Route]" operation="protocol.setFromMessage" value="header.Route"/> 
<test parameter="[Route(0)]" condition="string.equals" value="&lt;sip:1234@[remoteSIP];transport=[transportRequest];lr&gt;;id=titi"/>
<test parameter="[Route(1)]" condition="string.equals" value="&lt;sip:1234@[remoteSIP];transport=[transportRequest];lr&gt;;id=toto"/>
<test parameter="[Route(2)]" condition="string.equals" value="&lt;sip:1234@[localSIP];transport=[transportRequest];lr&gt;;id=tata"/>

<parameter name="[RouteAddress]" operation="protocol.setFromMessage" value="header.Route.Address"/>
<test parameter="[RouteAddress(0)]" condition="string.equals" value="&lt;sip:1234@[remoteSIP];transport=[transportRequest];lr&gt;"/>
<test parameter="[RouteAddress(1)]" condition="string.equals" value="&lt;sip:1234@[remoteSIP];transport=[transportRequest];lr&gt;"/>
<test parameter="[RouteAddress(2)]" condition="string.equals" value="&lt;sip:1234@[localSIP];transport=[transportRequest];lr&gt;"/>

<parameter name="[RouteID]" operation="protocol.setFromMessage" value="header.Route.Parameter.id"/>
<test parameter="[RouteID(0)]" condition="string.equals" value="titi"/>
<test parameter="[RouteID(1)]" condition="string.equals" value="toto"/>
<test parameter="[RouteID(2)]" condition="string.equals" value="tata"/>

<parameter name="[TopmostVia]" operation="protocol.setFromMessage" value="header.TopmostVia"/> 
<test parameter="[TopmostVia]" condition="string.contains" value="SIP/2.0/"/>

<parameter name="[TopmostViaProtocol]" operation="protocol.setFromMessage" value="header.TopmostVia.Protocol"/>
<test parameter="[TopmostViaProtocol]" condition="string.equals" value="SIP/2.0"/>

<parameter name="[TopmostViaTransport]" operation="protocol.setFromMessage" value="header.TopmostVia.Transport"/>
<test parameter="[TopmostViaTransport]" condition="string.equals" value="[transportResponse]"/>

<parameter name="[TopmostViaHost]" operation="protocol.setFromMessage" value="header.TopmostVia.Host"/>
<test parameter="[TopmostViaHost]" condition="string.equals" value="[remoteHostSIP]"/>

<parameter name="[TopmostViaPort]" operation="protocol.setFromMessage" value="header.TopmostVia.Port"/>
<test parameter="[TopmostViaPort]" condition="string.equals" value="[remotePortSIP]"/>

<parameter name="[TopmostViaBranch]" operation="protocol.setFromMessage" value="header.TopmostVia.Parameter.branch"/> 

<parameter name="[TopmostViaTTL]" operation="protocol.setFromMessage" value="header.TopmostVia.Parameter.ttl"/>
<test parameter="[TopmostViaTTL]" condition="string.equals" value="3000"/>

<parameter name="[TopmostViaReceived]" operation="protocol.setFromMessage" value="header.TopmostVia.Parameter.received"/>
<test parameter="[TopmostViaReceived]" condition="string.equals" value="[remoteHostSIP]"/>

<parameter name="[Via]" operation="protocol.setFromMessage" value="header.Via"/> 
<test parameter="[Via]" condition="string.contains" value="SIP/2.0/[transportResponse]"/>

<parameter name="[ViaProtocol]" operation="protocol.setFromMessage" value="header.Via.Protocol"/>
<test parameter="[ViaProtocol]" condition="string.equals" value="SIP/2.0"/>

<parameter name="[ViaTransport]" operation="protocol.setFromMessage" value="header.Via.Transport"/>
<test parameter="[ViaTransport(0)]" condition="string.equals" value="[transportResponse]"/>
<test parameter="[ViaTransport(1)]" condition="string.equals" value="[transportResponse]"/>

<parameter name="[ViaHost]" operation="protocol.setFromMessage" value="header.Via.Host"/>
<test parameter="[ViaHost(0)]" condition="string.equals" value="[remoteHostSIP]"/>
<test parameter="[ViaHost(1)]" condition="string.equals" value="172.16.21.232"/>

<parameter name="[ViaPort]" operation="protocol.setFromMessage" value="header.Via.Port"/>
<test parameter="[ViaPort(0)]" condition="string.equals" value="[remotePortSIP]"/>
<test parameter="[ViaPort(1)]" condition="string.equals" value="5060"/>

<parameter name="[ViaBranch]" operation="protocol.setFromMessage" value="header.Via.Parameter.branch"/> 

<parameter name="[ViaTTL]" operation="protocol.setFromMessage" value="header.Via.Parameter.ttl"/>
<parameter name="[ViaTTLSize]" operation="list.size" value="[ViaTTL]"/>
<test parameter="[ViaTTL(0)]" condition="string.equals" value="3000"/>
<test parameter="[ViaTTLSize]" condition="string.equals" value="1"/>

<parameter name="[ViaReceived]" operation="protocol.setFromMessage" value="header.Via.Parameter.received"/>
<test parameter="[ViaReceived(0)]" condition="string.equals" value="[remoteHostSIP]"/>
<test parameter="[ViaReceived(1)]" condition="string.equals" value="172.16.21.230"/>

<parameter name="[XmlLoaderId]" operation="protocol.setFromMessage" value="header.XmlLoaderId"/> 
<test parameter="[XmlLoaderId]" condition="string.equals" value="XmlLoaderId"/>

<parameter name="[MaxForward]" operation="protocol.setFromMessage" value="header.Max-Forwards"/>
<test parameter="[MaxForward]" condition="string.equals" value="70"/>

<receiveMessageSIP name="Wait 100 Trying" request="false" type="INVITE" result="100">
</receiveMessageSIP>

<parameter name="[msgResponse0]" operation="protocol.setFromMessage" value="message"/>

<receiveMessageSIP name="Wait 180 Ringing" request="false" type="INVITE" result="180">
</receiveMessageSIP>

<parameter name="[msgResponse1]" operation="protocol.setFromMessage" value="message"/>

<receiveMessageSIP name="Wait 200 OK" request="false" type="INVITE" result="200">
<parameter name="[To]" operation="protocol.setFromMessage" value="header.To"/>           
<test parameter="[To]" condition="string.contains" value=" &lt;tel:1234&gt;"/>

<parameter name="[From]" operation="protocol.setFromMessage" value="header.From"/>               
<test parameter="[From]" condition="string.contains" value=" &lt;sip:alice@devoteam.com;TesterId=6789&gt;;tag="/>

<parameter name="[Via]" operation="protocol.setFromMessage" value="header.Via"/>                                 
<test parameter="[Via]" condition="string.contains" value="SIP/2.0/[transportResponse]"/>

<parameter name="[firstlineStatusCode]" operation="protocol.setFromMessage" value="firstline.StatusCode"/>
<test parameter="[firstlineStatusCode]" condition="string.equals" value="200"/>

<parameter name="[firstlineReasonPhrase]" operation="protocol.setFromMessage" value="firstline.ReasonPhrase"/>
<test parameter="[firstlineReasonPhrase]" condition="string.equals" value="OK"/>

<parameter name="[firstlineURI]" operation="protocol.setFromMessage" value="firstline.URI"/>
<test parameter="[firstlineURI]" condition="list.isempty"/>

<parameter name="[firstlineMethod]" operation="protocol.setFromMessage" value="firstline.method"/>
<test parameter="[firstlineMethod]" condition="list.isempty"/>    

<parameter name="[firstlineVersion]" operation="protocol.setFromMessage" value="firstline.version"/>
<test parameter="[firstlineVersion]" condition="string.equals" value="SIP/2.0"/>

<parameter name="[contactURI]" operation="protocol.setFromMessage" value="header.Contact.Address.URI"/>	
</receiveMessageSIP>

<parameter name="[msgResponse2]" operation="protocol.setFromMessage" value="message"/>

<parameter name="[sessID]" operation="protocol.setFromMessage" value="session.id"/>
<parameter name="[msgSessionInit]" operation="protocol.setFromMessage" value="message"/>

<parameter name="[transaction]" operation="protocol.setFromMessage" value="transaction"/>
<log>[transaction]</log> 
<parameter name="[transactionID]" operation="protocol.setFromMessage" value="transaction.id"/>
<test parameter="[transactionID]" condition="string.equals" value="[transID]"/>
<parameter name="[transID]" operation="protocol.setFromMessage" value="message.transactionId"/>
<test parameter="[transactionID]" condition="string.equals" value="[transID]"/>

<parameter name="[transName]" operation="protocol.setFromMessage" value="transaction.name"/>
<test parameter="[transName]" condition="string.equals" value="INVITE_out / 100 180 200_in"/>

<parameter name="[msgRequest]" operation="protocol.setFromMessage" value="transaction.request"/>
<test parameter="[msgRequest]" condition="string.equals" value="[msgInitial]"/>    
<parameter name="[msgRequestType]" operation="protocol.setFromMessage" value="message.type" value2="[msgRequest]"/>           
<test parameter="[msgRequestType]" condition="string.equals" value="INVITE"/>

<parameter name="[msgResponses]" operation="protocol.setFromMessage" value="transaction.responses"/>
<test parameter="[msgResponses(0)]" condition="string.contains" value="[msgResponse0]"/>    
<test parameter="[msgResponses(1)]" condition="string.contains" value="[msgResponse1]"/>    
<test parameter="[msgResponses(2)]" condition="string.contains" value="[msgResponse2]"/>    
	
<parameter name="[msgResponsesType0]" operation="protocol.setFromMessage" value="message.type" value2="[msgResponses(0)]"/>           
<test parameter="[msgResponsesType0]" condition="string.equals" value="INVITE"/>
<parameter name="[msgResponsesType1]" operation="protocol.setFromMessage" value="message.type" value2="[msgResponses(1)]"/>           
<test parameter="[msgResponsesType1]" condition="string.equals" value="INVITE"/>
<parameter name="[msgResponsesType2]" operation="protocol.setFromMessage" value="message.type" value2="[msgResponses(2)]"/>           
<test parameter="[msgResponsesType2]" condition="string.equals" value="INVITE"/>

<parameter name="[msgResponsesResult0]" operation="protocol.setFromMessage" value="message.result" value2="[msgResponses(0)]"/>           
<test parameter="[msgResponsesResult0]" condition="string.equals" value="100"/>
<parameter name="[msgResponsesResult1]" operation="protocol.setFromMessage" value="message.result" value2="[msgResponses(1)]"/>               
<test parameter="[msgResponsesResult1]" condition="string.equals" value="180"/>
<parameter name="[msgResponsesResult2]" operation="protocol.setFromMessage" value="message.result" value2="[msgResponses(2)]"/>                   
<test parameter="[msgResponsesResult2]" condition="string.equals" value="200"/>

<parameter name="[newBranchId]" operation="string.random" value="10"/>

<sendMessageSIP name="Send ACK" remoteHost="[remoteHostSIP]" remotePort="[remotePortSIP]" destScenario="1234">
<![CDATA[ACK [contactURI] SIP/2.0
To: [To]
From: [From]
Call-ID: [CallId]
CSeq: [CSeqNumber] ACK
Max-Forwards: 70
Contact: <sip:[clientName]@[localSIP]>
Via: SIP/2.0/[transportResponse] [localSIP];branch=[newBranchId];ttl=3000
User-Agent: XmlLoader
Content-Length: 0

]]>
</sendMessageSIP>

<parameter name="[msgSubsequent0]" operation="protocol.setFromMessage" value="message"/>
<parameter name="[msgSubsequentText0]" operation="protocol.setFromMessage" value="message.text" value2="[msgSubsequent0]"/>    

<parameter name="[CSeqNumber]" operation="number.add" value="[CSeqNumber]" value2="1"/>
<parameter name="[newBranchId]" operation="string.random" value="10"/>  

<sendMessageSIP name="Send BYE" remoteURL="sip://[remoteSIP]" destScenario="1234">
<![CDATA[BYE [contactURI] SIP/2.0
To: [To]
From: [From]
Call-ID: [CallId]
CSeq: [CSeqNumber] BYE
Max-Forwards: 70
Contact: <sip:1234@[localSIP]>
Via: SIP/2.0/[transportResponse] [localSIP];branch=[newBranchId];ttl=3000
User-Agent: XmlLoader
Content-Length: 0

]]>
</sendMessageSIP>

<parameter name="[msgSubsequent1]" operation="protocol.setFromMessage" value="message"/>
<parameter name="[msgSubsequentText1]" operation="protocol.setFromMessage" value="message.text" value2="[msgSubsequent1]"/>    

<parameter name="[session]" operation="protocol.setFromMessage" value="session"/>
<log>[session]</log>
<parameter name="[sessionID]" operation="protocol.setFromMessage" value="session.id"/>
<test parameter="[sessionID]" condition="string.equals" value="[sessID]"/>
<parameter name="[sessID]" operation="protocol.setFromMessage" value="message.sessionId"/>
<test parameter="[sessionID]" condition="string.equals" value="[sessID]"/>

<parameter name="[sessionName]" operation="protocol.setFromMessage" value="session.name"/>
<test parameter="[sessionName]" condition="string.equals" value="200_in&lt;BR&gt;ACK_out&lt;BR&gt;BYE_out"/>

<parameter name="[msgInit]" operation="protocol.setFromMessage" value="session.initial"/>
<test parameter="[msgInit]" condition="string.equals" value="[msgSessionInit]"/>    
<parameter name="[msgInitType]" operation="protocol.setFromMessage" value="message.type" value2="[msgInit]"/>           
<test parameter="[msgInitType]" condition="string.equals" value="INVITE"/>
<parameter name="[msgInitResult]" operation="protocol.setFromMessage" value="message.result" value2="[msgInit]"/>           
<test parameter="[msgInitResult]" condition="string.equals" value="200"/>

<parameter name="[msgSubsequents]" operation="protocol.setFromMessage" value="session.subsequents"/>
<test parameter="[msgSubsequents(0)]" condition="string.contains" value="[msgSubsequent0]"/>    
<test parameter="[msgSubsequents(1)]" condition="string.contains" value="[msgSubsequent1]"/>    
	
<parameter name="[msgSubsequentsType0]" operation="protocol.setFromMessage" value="message.type" value2="[msgSubsequents(0)]"/>           
<test parameter="[msgSubsequentsType0]" condition="string.equals" value="ACK"/>
<parameter name="[msgSubsequentsType1]" operation="protocol.setFromMessage" value="message.type" value2="[msgSubsequents(1)]"/>           
<test parameter="[msgSubsequentsType1]" condition="string.equals" value="BYE"/>

<receiveMessageSIP name="Wait 200 OK" request="false" type="BYE" result="200">
</receiveMessageSIP>

</scenario>

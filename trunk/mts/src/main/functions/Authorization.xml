<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->
<scenario>

    <!-- Calculate the MD5 response : implement the RFC2717 -->
    <function name="calcul_digest_MD5">
        <input>
            <parameter name="[function:realm]" type="string"/> 
            <parameter name="[function:username]" type="string"/>
            <parameter name="[function:password]" type="string"/>
            
            <parameter name="[function:method]" type="string"/>        
            <parameter name="[function:uri]" type="string"/>
            <parameter name="[function:qop]" type="string"/>                                        
            <parameter name="[function:nonce]" type="string"/>
            <parameter name="[function:nonceCount]" type="string"/>
            <parameter name="[function:cnonce]" type="string"/>
            
        </input>

        <do>   
        
		        <parameter name="[HA1]" operation="string.digest" value2="MD5" value="[userName]:[realm]:[password]" />
        		<parameter name="[HA2]" operation="string.digest" value2="MD5" value="[method]:[uri]" />
          	<parameter name="[function:res]" operation="string.digest" value2="MD5" value="[HA1]:[nonce]:[nonceCount]:[cnonce]:[qop]:[HA2]" />                     
        </do>

        <output>
            <!-- output : authorization : the SIP Authorization header -->        
            <parameter name="[function:res]"/>
        </output>        
        
    </function>
    
    <!-- Build the Authorization SIP header from the SIP 401 message -->    
    <function name="build_Authorization_Header">
        <input>
            <!-- input : msg : the SIP 401 message -->
            <parameter name="[function:msg]" type="string"/>     
            <!-- input : userName : the user SIP URI -->
            <parameter name="[function:username]" type="string"/>       
            <!-- input : password : the user password -->
            <parameter name="[function:password]" type="string"/>
            <!-- input : uri : the SIP request URI -->
            <parameter name="[function:uri]" type="string"/>            
            
        </input>

        <do>
        
            <parameter name="[lastCSeqMethod]" operation="protocol.setFromMessage" value="header.CSeq.method" value2="[msg]"/>
            <parameter name="[lastAuthRealm]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.realm" value2="[msg]"/>									
        		<parameter name="[lastAuthNonce]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.nonce" value2="[msg]"/>					
		        <parameter name="[lastAuthQop]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.qop" value2="[msg]"/>
            <parameter name="[lastOpaque]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.opaque" value2="[msg]"/>
            <parameter name="[lastStale]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.stale" value2="[msg]"/>

            <parameter name="[newNonceCount]" operation="set" value="00000001"/>
            <parameter name="[newCnonce]" operation="binary.random" value="4"/>
            <call name="calcul_digest_MD5" >
                <input>
                    <parameter name="[function:realm]" value="[lastAuthRealm]"/>
                    <parameter name="[function:username]" value="[username]"/>
                    <parameter name="[function:password]" value="[password]"/>
                		<parameter name="[function:method]" value="[lastCSeqMethod]"/>
                		<parameter name="[function:uri]" value="[uri]"/>
                    
                    <parameter name="[function:nonce]" value="[lastAuthNonce]"/>
                    <parameter name="[function:qop]" value="[lastAuthQop]"/>
                    <parameter name="[function:nonceCount]" value="[newNonceCount]" />
                    <parameter name="[function:cnonce]" value="[newCnonce]" />
                </input>
                <output>
                    <parameter name="[response]" value="[function:res]"/>
                </output>
            </call>    

            <parameter name="[authorization]" value="Digest"/>
            <parameter name="[authorization]" value="[authorization] username=&quot;[username]&quot;"/>
            <parameter name="[authorization]" value="[authorization], realm=&quot;[lastAuthRealm]&quot;"/>
            <parameter name="[authorization]" value="[authorization], uri=&quot;[uri]&quot;"/>
            <parameter name="[authorization]" value="[authorization], nonce=&quot;[lastAuthNonce]&quot;"/>
            <parameter name="[authorization]" value="[authorization], response=&quot;[response]&quot;"/>
            <if>
              <condition>
                <test parameter="[lastOpaque]" condition="isEmpty" not="true"/>
              </condition>
              <then>
                <parameter name="[authorization]" value="[authorization], qop=&quot;[lastAuthQop]&quot;"/>  
                <parameter name="[authorization]" value="[authorization], nc=[newNonceCount]"/>
                <parameter name="[authorization]" value="[authorization], cnonce=&quot;[newCnonce]&quot;"/>
              </then>
            </if>          
            <if>
              <condition>
                <test parameter="[lastOpaque]" condition="isEmpty" not="true"/>
              </condition>
              <then>
                <parameter name="[authorization]" value="[authorization], opaque=&quot;[lastOpaque]&quot;"/>
              </then>
            </if>
            <if>
              <condition>
                <test parameter="[lastStale]" condition="isEmpty" not="true"/>
              </condition>
              <then>
                <parameter name="[authorization]" value="[authorization], stale=[lastStale]"/>
              </then>
            </if>
        </do>

        <output>
        
            <parameter name="[function:authorization]"/>
        </output>        
        
    </function>

        
    <!-- Build the Authorization SIP header from the SIP REGISTER message -->        
    <function name="check_Authorization_Header">
        <input>
            <!-- input : msg : the SIP REGISTER message -->
            <parameter name="[function:msg]" type="string"/>            
            <!-- input : password : the user password -->
            <parameter name="[function:password]" type="string"/>       
            
        </input>

        <do>
        
            <parameter name="[lastRequestURI]" operation="protocol.setFromMessage" value="firstLine.uri" value2="[msg]"/>
            <parameter name="[lastCSeqMethod]" operation="protocol.setFromMessage" value="firstLine.method" value2="[msg]"/>
            <parameter name="[lastUserName]" operation="protocol.setFromMessage" value="header.To.Address.URI.User" value2="[msg]"/>            
            <parameter name="[lastAuthRealm]" operation="protocol.setFromMessage" value="header.Authorization.Attribute.realm" value2="[msg]"/>									
        		<parameter name="[lastAuthNonce]" operation="protocol.setFromMessage" value="header.Authorization.Attribute.nonce" value2="[msg]"/>					
		        <parameter name="[lastAuthQop]" operation="protocol.setFromMessage" value="header.Authorization.Attribute.qop" value2="[msg]"/>
            <parameter name="[lastAuthNonce]" operation="protocol.setFromMessage" value="header.Authorization.Attribute.nonce"/>
            <parameter name="[lastAuthQop]" operation="protocol.setFromMessage" value="header.Authorization.Attribute.qop"/>
            <parameter name="[lastAuthNonceCount]" operation="protocol.setFromMessage" value="header.Authorization.Attribute.nc"/>
            <parameter name="[lastAuthCNonce]" operation="protocol.setFromMessage" value="header.Authorization.Attribute.cnonce"/>				
            <call name="calcul_digest_MD5" >
                <input>
                    <parameter name="[function:realm]" value="[lastAuthRealm]"/>
                    <parameter name="[function:username]" value="[lastUserName]@[lastAuthRealm]"/>
                    <parameter name="[function:password]" value="[password]"/>
                		<parameter name="[function:method]" value="[lastCSeqMethod]"/>
                		<parameter name="[function:uri]" value="[lastRequestURI]"/>
                    
                    <parameter name="[function:nonce]" value="[lastAuthNonce]"/>
                    <parameter name="[function:qop]" value="[lastAuthQop]"/>
                    <parameter name="[function:nonceCount]" value="[lastAuthNonceCount]" />
                    <parameter name="[function:cnonce]" value="[lastAuthCNonce]" />
                </input>
                <output>
                    <parameter name="[response]" value="[function:res]"/>
                </output>
            </call>    
            <parameter name="[lastAuthResponse]" operation="protocol.setFromMessage" value="header.Authorization.Attribute.response"/>
            <test parameter="[lastAuthResponse]" condition="string.equals" value="[response]"/>
          </do>
        <output>
        </output>        
        
    </function>

</scenario>

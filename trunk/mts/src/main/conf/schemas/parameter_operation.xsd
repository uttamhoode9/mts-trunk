<?xml version="1.0" encoding="UTF-8"?>
<!--
    Document   : dictionary.xsd
    Created on : 28 mai 2007, 21:14
    Author     : Gege
    Description:
        Defines a test that is a collection of Testcases.
        Each Testcase is a collection of Scenarii.
        Scenarii are referenced by their file path.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xs:element name="parameter" type="Categorie"/>
	<xs:complexType name="Categorie">
		<xs:sequence>
			<xs:element name="binary" type="OperationBinary">
				<xs:annotation>
					<xs:documentation>Handles binary (hexadecimal) contents like "ae3f21b6".</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="boolean" type="OperationBoolean">
				<xs:annotation>
					<xs:documentation>Handles boolean contents like true/True/False/false.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="file" type="OperationFile">
				<xs:annotation>
					<xs:documentation>Handles files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="list" type="OperationList">
				<xs:annotation>
					<xs:documentation>Handles lists (arrays).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="number" type="OperationNumber">
				<xs:annotation>
					<xs:documentation>Handles numbers (floats).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="string" type="OperationString">
				<xs:annotation>
					<xs:documentation>Handles strings.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="system" type="OperationSystem">
				<xs:annotation>
					<xs:documentation>Gives access to informations about the system.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="protocol" type="OperationProtocol">
				<xs:annotation>
					<xs:documentation>Some protocol specific operations.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OperationBinary">
		<xs:sequence>
			<xs:element name="binary.equals">
				<xs:annotation>
					<xs:documentation>Compares the value of the two operands.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains true if the first operand is equal to the second, false in other cases.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.parse">
				<xs:annotation>
					<xs:documentation>Parses "old" binary content like "b00101101 hae d456" into hex binary data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the hexadecimal binary data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The old binary content.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.tostring">
				<xs:annotation>
					<xs:documentation>Parses the binary data as a string using the default platform charset.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the resulting string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.frombase64">
				<xs:annotation>
					<xs:documentation>Converts a string representing data encoding in hexadecimal data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the hexadecimal binary data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.tobase64">
				<xs:annotation>
					<xs:documentation>Converts hexadecimal data in a string representing the data in base64.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the base64 encoded binary data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.contains">
				<xs:annotation>
					<xs:documentation>Checks if a binary sequence occurs in another.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains true if the sequence was found at least one time, false in other cases.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary data to search into.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.length">
				<xs:annotation>
					<xs:documentation>Get the length of the binary data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the result of the operation.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary data to get the length.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.indexof">
				<xs:annotation>
					<xs:documentation>Get the index where a binary sequence occurs in another.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the index or -1 if the sequence was not found.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary data to search into.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value3" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] The index that we will search from (default is 0).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.subbinary">
				<xs:annotation>
					<xs:documentation>Get a binary sequence inside of another.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the binary sub-sequence.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The starting index of the sub-sequence.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value3" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The length of the sub-sequence.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.random">
				<xs:annotation>
					<xs:documentation>Generates random hexadecimal data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the randomized hexadecimal data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The length (in bytes) of the generated data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.digest">
				<xs:annotation>
					<xs:documentation>Computes the digest (ex. MD5) of hexadecimal data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the computed digest (the length depends on the algorithm).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The digest algorithm (MD5 / SHA / ...).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.hmac">
				<xs:annotation>
					<xs:documentation>Computes the HMAC (ex. HmacMD5) of hexadecimal data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the computed HMAC (the length depends on the algorithm).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The HMAC algorithm (HmacMD5 / ...).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value3" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The hexadecimal representation of the secret data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.encrypt">
				<xs:annotation>
					<xs:documentation>Encrypt data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the data to encrypt.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The algorithm[/mode/padding] (AES/CBC/NoPadding, ...).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value3" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The hexadecimal representation of the secret data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value4" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The hexadecimal representation of the initial vectors (salt).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.decrypt">
				<xs:annotation>
					<xs:documentation>Encrypt data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the encrypted data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The algorithm[/mode/padding] (AES/CBC/NoPadding, ...).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value3" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a binary.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value4" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The hexadecimal representation of the initial vectors (salt).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>		
			<xs:element name="binary.statMax">
				<xs:annotation>
					<xs:documentation>Return the biggest value into a binary. (the maximum)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a binary.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>						
			<xs:element name="binary.statMin">
				<xs:annotation>
					<xs:documentation>Return the lowest value into a binary. (the minimum)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a binary.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>						
			<xs:element name="binary.statAverage">
				<xs:annotation>
					<xs:documentation>Return the average value into a binary. (the sum of all number values divide by the number of values)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a binary.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>									
			<xs:element name="binary.statVariance">
				<xs:annotation>
					<xs:documentation>Return the variance value as a float. (the average of the square of the difference between the number values and the average value)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a float value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>												
			<xs:element name="binary.statDeviation">
				<xs:annotation>
					<xs:documentation>Return the deviation value as a float. (the square root of the variance value)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a float value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>				
			</xs:element>		
			<xs:element name="binary.statPopular">
				<xs:annotation>
					<xs:documentation>Return the most popular value as a binary. (the value having the maximum frequency) </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a binary value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>															
			<xs:element name="binary.statMaxFreq">
				<xs:annotation>
					<xs:documentation>Return the frequency of the most popular value as a float. (the maximum occurence of the most popular value divide by the number of values) </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a binary value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary input data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.fromIp">
				<xs:annotation>
					<xs:documentation>Return the hex representation of an IP address </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a binary value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The IP address in dotted deceimal representation.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.toIp">
				<xs:annotation>
					<xs:documentation>Return the dotted decimal representation of an IP address represented in hex string </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a binary value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The IP address in hex string representation.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="binary.toNumber">
				<xs:annotation>
					<xs:documentation>Return the number represented by a hex string </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result value as a binary value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The number to convert in hex string representation.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
      <xs:element name="binary.difference">
				<xs:annotation>
					<xs:documentation>Calculate the difference between 2 binary data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The difference resulting value; XX means shift.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The first operande.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The second operande.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
      <xs:element name="binary.xmlToAsn">
				<xs:annotation>
					<xs:documentation>Parse XML data and encode them into ASN1 for a given class name and according to a given dictionary file. </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The XML data to process.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The class name for java object; see into ../tutorial/asn1/templates.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The file name for the dictionary; it contains the embedded object description and the element description for enumeration and binary data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>																											
      <xs:element name="binary.asnToXml">
				<xs:annotation>
					<xs:documentation>Decode binary data from ASN1 and convert them into XML format for a given class name and according to a given dictionary file. </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary data to process.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The class name for java object; see into ../tutorial/asn1/templates.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The file name for the dictionary; it contains the embedded object description and the element description for enumeration and binary data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>																											
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OperationBoolean">
		<xs:sequence>
			<xs:element name="boolean.equals">
				<xs:annotation>
					<xs:documentation>Compares the value of the two operands.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains true if the first operand is equal to the second, false in other cases.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="boolean.and">
				<xs:annotation>
					<xs:documentation>Boolean AND.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the result of the boolean operation "value" AND "value2".</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="boolean.or">
				<xs:annotation>
					<xs:documentation>Boolean OR.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the result of the boolean operation "value" OR "value2".</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="boolean.nand">
				<xs:annotation>
					<xs:documentation>Boolean NAND (NOT AND).</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the result of the boolean operation "value" NAND "value2".</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="boolean.nor">
				<xs:annotation>
					<xs:documentation>Boolean NOR (NOT OR).</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the result of the boolean operation "value" NOR "value2".</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="boolean.xor">
				<xs:annotation>
					<xs:documentation>Boolean XOR (excluse OR).</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the result of the boolean operation "value" XOR "value2".</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="boolean.not">
				<xs:annotation>
					<xs:documentation>Boolean NOT.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the result of the boolean operation NOT "value".</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="boolean.random">
				<xs:annotation>
					<xs:documentation>Boolean NOT.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains a boolean value that has equals probabilities to be "false" or "true".</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OperationFile">
		<xs:sequence>
			<xs:element name="file.writebinary">
				<xs:annotation>
					<xs:documentation>Writes (appends) binary (hexadecimal) data into a file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>unused</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Binary (hexadecimal) data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.readbinary">
				<xs:annotation>
					<xs:documentation>Reads binary (hexadecimal) data from a file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The binary (hexadecimal) data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.writestring">
				<xs:annotation>
					<xs:documentation>Writes (appends) a string into a file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>unused</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The string to write.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.readstring">
				<xs:annotation>
					<xs:documentation>Reads a string from a file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.readproperty">
				<xs:annotation>
					<xs:documentation>Reads a property from a java properties file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the value of the property.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (The property file will be first searched relatively to the current test then from IMSLoader's conf directory).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The property name.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.listpropertykeys">
				<xs:annotation>
					<xs:documentation>Reads all properties names from a java properties file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Will contain the list of keys.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (The property file will be first searched relatively to the current test then from IMSLoader's conf directory).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>                        
			<xs:element name="file.readcsv">
				<xs:annotation>
					<xs:documentation>Reads a column from a csv file file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the values of the column.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The column title or index.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.remove">
				<xs:annotation>
					<xs:documentation>Deletes a file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>unused.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.exists">
				<xs:annotation>
					<xs:documentation>Checks if a file exists a file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>True if the file exists, false in other cases.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.create">
				<xs:annotation>
					<xs:documentation>Creates a new (empty) file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>unused.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.readmedia">
				<xs:annotation>
					<xs:documentation>Reads a pdml file exported from wireshark to get parameters of RTPFlow.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains an array of 3 subarray (payload, timestamp, seq), each containing the parameters of the rtp flow parsed.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
            <xs:element name="file.readwave">
				<xs:annotation>
					<xs:documentation>Reads a wave file, which codec must be PCMA or PCMU ie: G.711 mu-law or a-law.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains an array of 3 subarray (payload, payloadType, bitRate), each containing the parameters of the rtp flow parsed.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
              <xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Length of a sample in milliseconds.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
            <xs:element name="file.writewave">
				<xs:annotation>
					<xs:documentation>Write a wave file using PCMA or PCMU codec.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Parameter use to stock 5 values.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
              <xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>PayloadType collected from RPTFlow message.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
              <xs:attribute name="value3" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Payload collected from RTPFlow message and completed with empty packet if needed.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
              <xs:attribute name="value4" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Bits per sample (default is 8).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
              <xs:attribute name="value5" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Sample Rate (default is 8000).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
                    <xs:attribute name="value6" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Number of channels of the file (default is 1).</xs:documentation>
						</xs:annotation>
					</xs:attribute>                    
				</xs:complexType>
			</xs:element>
			<xs:element name="file.writeCsvCol">
				<xs:annotation>
					<xs:documentation>Writes a column in a csv file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>unused</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Values to write.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="file.writeCsvRaw">
				<xs:annotation>
					<xs:documentation>Writes a raw in a csv file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>unused</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>File path (absolute or relative to the current test file).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Values to write.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OperationList">
		<xs:sequence>
			<xs:element name="list.set">
				<xs:annotation>
					<xs:documentation>Copy a list to a new parameter.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the new list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The source list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] The number of times to copy the list into (default is 1).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.create">
				<xs:annotation>
					<xs:documentation>Creates a new empty list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the name of the new list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.remove">
				<xs:annotation>
					<xs:documentation>Removes a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains the name of the list to remove.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.isempty">
				<xs:annotation>
					<xs:documentation>Checks if a list is empty (size=0).</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains "true" if the list is empty, "false" in other cases.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.size">
				<xs:annotation>
					<xs:documentation>Returns the size of a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Contains a number that is the size of the list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.addfirst">
				<xs:annotation>
					<xs:documentation>Inserts a list at the begining of another.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The inserted list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.addlast">
				<xs:annotation>
					<xs:documentation>Adds a list at the end of another.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The added list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.getfirst">
				<xs:annotation>
					<xs:documentation>Extracts the first element of a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The element of the list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.getlast">
				<xs:annotation>
					<xs:documentation>Extracts the last element of a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The element of the list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.removefirst">
				<xs:annotation>
					<xs:documentation>Removes the first element of a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.removelast">
				<xs:annotation>
					<xs:documentation>Removes the last element of a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.removeat">
				<xs:annotation>
					<xs:documentation>Removes an element of a list at a given index.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The index(s) of the element(s) to remove.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.find">
				<xs:annotation>
					<xs:documentation>Finds occurences of a string into a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The index(es).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The searched value(s).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.findmatches">
				<xs:annotation>
					<xs:documentation>Finds matches of a regular expression into a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The index(es).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The regular expression.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.mix">
				<xs:annotation>
					<xs:documentation>Execute x permutations in a list</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The new list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The number of permutation.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.mixComplete">
				<xs:annotation>
					<xs:documentation>Mix randomly all the elements of a list</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The new list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.revert">
				<xs:annotation>
					<xs:documentation>Revert a list</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The new list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.statMax">
				<xs:annotation>
					<xs:documentation>Search the maximum number in a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list of number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.statMin">
				<xs:annotation>
					<xs:documentation>Search the minimum number in a list.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list of number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.statAverage">
				<xs:annotation>
					<xs:documentation>Calculate the average of a list of number.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list of number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.statDeviation">
				<xs:annotation>
					<xs:documentation>Calculate the deviation of a list of number.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list of number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.statVariance">
				<xs:annotation>
					<xs:documentation>Calculate the variatiance of a list of number.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list of number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.sortNumber">
				<xs:annotation>
					<xs:documentation>Sort a list of number.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list of numbers.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.sortString">
				<xs:annotation>
					<xs:documentation>Sort a list of string.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting list.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base list of strings.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.enqueue">
				<xs:annotation>
					<xs:documentation>Enqueue a parameter into a queue (globally unique queue)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>not used</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>name of the fifo value2 will be enqueued in.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>parameter to put into the queue.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="list.dequeue">
				<xs:annotation>
					<xs:documentation>Dequeue a parameter from a queue (globally unique queue), this operation is blocking if the queue is empty (might timeout)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>item dequeued from the queue</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>name of the fifo value2 will be dequeued from</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] timeout value; then the operation will return an empty parameter if the operation timeouts (default is 0 meaning no timeout)</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>			
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OperationNumber">
		<xs:sequence>
			<xs:element name="number.add">
				<xs:annotation>
					<xs:documentation>Does "value" PLUS "value2".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.substract">
				<xs:annotation>
					<xs:documentation>Does "value" MINUS "value2".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.multiply">
				<xs:annotation>
					<xs:documentation>Does "value" TIMES "value2".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.divide">
				<xs:annotation>
					<xs:documentation>Does "value" DIVIDED BY "value2".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.modulo">
				<xs:annotation>
					<xs:documentation>Does "value" MODULO "value2".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.lowerEqualThan">
				<xs:annotation>
					<xs:documentation>Returns true if "value" LOWER OR EQUAL TO "value2", false otherwise.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.lowerThan">
				<xs:annotation>
					<xs:documentation>Returns true if "value" LOWER THAN "value2", false otherwise.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.greaterEqualThan">
				<xs:annotation>
					<xs:documentation>Returns true if "value" GREATER OR EQUAL TO "value2", false otherwise.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.greaterThan">
				<xs:annotation>
					<xs:documentation>Returns true if "value" GREATER THAN "value2", false otherwise.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.round">
				<xs:annotation>
					<xs:documentation>Returns the rounded number of "value".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.floor">
				<xs:annotation>
					<xs:documentation>Returns the floored number of "value".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.random">
				<xs:annotation>
					<xs:documentation>Returns a random number between 2 given values".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Maximum value of the randomized number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
          <xs:attribute name="value2" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Minimun value of the randomized number (default is 0).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.randomGaussian">
				<xs:annotation>
					<xs:documentation>Returns a random number following a Gaussian distribution.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The Average.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The Deviation.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.uid">
				<xs:annotation>
					<xs:documentation>Returns a uniquely generated number.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The UID (a static number, incremented by each call to this operator).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.power">
				<xs:annotation>
					<xs:documentation>Returns a calculated number to a power.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The result number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The base number.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The power.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.parseDate">
				<xs:annotation>
					<xs:documentation>Return a timestamp from date specified by the user as string.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting value represents the number of milliseconds from 1/1/1970.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The date specified by the user as string : the general date format is dd/MM/yyyy HH:mm:ss:SSS; but some parts can be missed, in that case then the tool choose the next ocurrence in the future;</xs:documentation>
						</xs:annotation>
					</xs:attribute>

				</xs:complexType>
			</xs:element>
			<xs:element name="number.toDate">
				<xs:annotation>
					<xs:documentation>Return a string representing a date in a definable format.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting date as string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The timestamp defined as the number of milliseconds from 1/1/1970.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[Optional] The date format under a non-static format (default is  dd/MM/yyyy HH:mm:ss).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.toBinary">
				<xs:annotation>
					<xs:documentation>Return a hex string representing number in hex format.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The number to convert to hex string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.max">
				<xs:annotation>
					<xs:documentation>Return the greater number (maximum) comparing two numbers.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The first number to convert to compare.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The second number to convert to compare.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="number.min">
				<xs:annotation>
					<xs:documentation>Return the lower number (minimum) comparing two numbers.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The first number to convert to compare.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The second number to convert to compare.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OperationString">
		<xs:sequence>
			<xs:element name="string.contains">
				<xs:annotation>
					<xs:documentation>Checks if the string of "value" contains the string in "value2".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>True or false, whether we found the string or not.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Searched string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.length">
				<xs:annotation>
					<xs:documentation>Returns the length of the string of "value".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Number that is the length of the string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.equals">
				<xs:annotation>
					<xs:documentation>Checks if the two strings are identical (case sensitive).</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>True or false, whether we found the string are the same or not.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.equalsignorecase">
				<xs:annotation>
					<xs:documentation>Checks if the two strings are identical (case INsensitive).</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>True or false, whether we found the string are the same or not.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>First operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Second operand.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.matches">
				<xs:annotation>
					<xs:documentation>Checks if the string in "value" matches the regular expression of "value2".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>True or false, whether we found the string matches the regex or not.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Regular expression.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.indexof">
				<xs:annotation>
					<xs:documentation>Finds the index where the string "value2" occurs in "value".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The index, or -1 if there is no occurance of the string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Searched string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value3" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Base index (default is 0).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.split">
				<xs:annotation>
					<xs:documentation>Splits a string using a separator.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting splitted strings.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Splitter.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.substring">
				<xs:annotation>
					<xs:documentation>Extracts a sub string from a base string from index "value2" to index "value3".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The extracted sub-string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Start index.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value3" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] End index (default is the length of the string).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.startswith">
				<xs:annotation>
					<xs:documentation>Checks if the string in "value" starts with the string in "value2".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>True or false, whether we found the string starts with the expected characters.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Expected beginning of the base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.endswith">
				<xs:annotation>
					<xs:documentation>Checks if the string in "value" ends with the string in "value2".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>True or false, whether we found the string ends with the expected characters.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Expected ending of the base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.tolowercase">
				<xs:annotation>
					<xs:documentation>Return the string "value" in lower case.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Resulting lower-cased string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.touppercase">
				<xs:annotation>
					<xs:documentation>Return the string "value" in upper case.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Resulting upper-cased string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.tobinary">
				<xs:annotation>
					<xs:documentation>Return an hexadecimal representation of the string "value".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Resulting hexadecimal data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Base string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.random">
				<xs:annotation>
					<xs:documentation>Return a random alpha-numeric string.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Resulting random string [a-zA-Z0-9]*.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Length of the generated string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.digest">
				<xs:annotation>
					<xs:documentation>Computes the digest signature of a string.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Resulting hexadecimal data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Input string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Algorithm ( SHA1 / MD5 / ...).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.hmac">
				<xs:annotation>
					<xs:documentation>Computes the digest signature of a string.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Resulting hexadecimal data.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Input string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Algorithm (HmacMD5 ...).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value3" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Secret key string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.regexmatches">
				<xs:annotation>
					<xs:documentation>Returns the occurances of a regex into a string.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Found occurances.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Input string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Regular expression to search.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.regexreplaces">
				<xs:annotation>
					<xs:documentation>Replaces occurances of a regular expression into a string by another string.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Resulting string (with occurances replaced).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Input string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Regular expression to search, and replace.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value3" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Replacing string.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.xpath">
				<xs:annotation>
					<xs:documentation>Reads a field from xml content, using xpath.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Value of the field.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Xml content.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The xpath to apply on the xml content</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="string.trim">
				<xs:annotation>
					<xs:documentation>Trims white characters into a string.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Value of the field.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>String to trim.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="OperationSystem">
		<xs:sequence>
			<xs:element name="system.readproperty">
				<xs:annotation>
					<xs:documentation>Access to java's system properties.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Value of the property.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Name of the property ( list of keywords at http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html#getProperties() ).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="system.timestamp">
				<xs:annotation>
					<xs:documentation>Get the current system timestamp from a reference year.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The resulting value represents the number of milliseconds from 1/1/1970 or the number of seconds from 1/1/1900.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:appinfo>enumeration (1970, 1900)</xs:appinfo>
							<xs:documentation>The reference year for the date.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="system.ipaddress">
				<xs:annotation>
					<xs:documentation>Get ip addresses of an interface.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Selected ip addresses.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Selected interface like eth0/eth1 ... (default is any).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>version of IP (4 or 6)</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="system.semaphorenotify">
				<xs:annotation>
					<xs:documentation>Does a "notify" aka. "V" operation on a semaphore parameter.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The parameter that contains (or will contain) the semaphore.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Number of tokens to give to the semaphore (default is 1).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="system.semaphorewait">
				<xs:annotation>
					<xs:documentation>Does a "wait" aka. "P" operation on a semaphore parameter.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The parameter that contains (or will contain) the semaphore.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Number of tokens to take from the semaphore (default is 1).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Timeout value (in seconds) for this operation (default is configured in tester.properties).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="system.querySQL">
				<xs:annotation>
					<xs:documentation>Sent a sql query to a database in a server and store the resultSet in parameters, each parameter contains the values of a colomn (and have a name composed by the value of the attribute "name" of this parameter, a point '.' and the name of the colomn). The name of the created parameters are listed in this parameter.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The parameter that contains the name of the parameters (equal to the name of the colomns of the result) in witch are stored the values of the associated colomn.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Informations required to reach a database (url:login:password:database).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>SQL query.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="name.columnName" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The content of the {column name} column. (for SELECT SQL command only)</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="system.command">
				<xs:annotation>
					<xs:documentation>Execute a system command and store the results in three parameters : name.standardOut, name.errorOut, name.returnCode ("name" is the value of the attribute "name" of the parameter). The name of the created parameters are listed in this parameter.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The parameter that contains the standard ouput, the error output and the exit value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>System command to execute.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="name.standardOut" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The standard output result of the command.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="name.errorOut" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The error output result of the command.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="name.returnCode" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The return code of the command.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="system.statCounter">
				<xs:annotation>
					<xs:documentation>Get the value of a statistics counters; they are organized as a in tree as the report shows.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The parameter that contains the stat counter value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The path in the stats tree to reach the counter to get the value (separated by &gt; character). </xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="name.standardOut" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The name of the counter to get the value.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="name.errorOut" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The error output result of the command.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="name.returnCode" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The return code of the command.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="system.iplist">
				<xs:annotation>
					<xs:documentation>Generates a list of IP addresses within a given subnet.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The parameter that will be the list of generated IP addresses.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The list (or just one value) of either : ip and mask bit count (192.168.0.0/24 : value2 is not used) or just the ip (192.168.0.0 : value2 will be mandatory).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The list (or just one value) of subnet masks (255.255.255.0).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="system.macaddress">
				<xs:annotation>
					<xs:documentation>Get mac addresses of an interface.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Selected mac addresses.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] Selected interface like eth0/eth1 ... (default is any).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
        </xs:sequence>
	</xs:complexType>
	<xs:complexType name="OperationProtocol">
		<xs:sequence>
			<xs:element name="protocol.setFromAddress">
				<xs:annotation>
					<xs:documentation>Reads a field from a SIP address.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>A parameter for the result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The SIP address to analyse.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Path keyword to choose the part to retrieve. 
for SIP address = {displayName | uri | uri:[setFromURI keyword] | parameter:[XXXXX]}</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="protocol.setFromURI">
				<xs:annotation>
					<xs:documentation>Reads a field from an URI.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>A parameter for the result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The URI to analyse.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Path keyword to choose the part to retrieve. 
for opaque URIs = {authority | fragment | host | path | port | query | scheme | schemespecificpart | user | absolute | opaque}  
for SIP URIs = {host | port | scheme | user | password | header:[header name] | parameter:[parameter name] | lr | secure | sipURI}  
for TEL URIs = {isdnsubaddress | phoneContext | phoneNumber | postdial | scheme | parameter:[parameter name] | global | telURI} </xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="protocol.setFromMessage">
				<xs:annotation>
					<xs:documentation>Reads a field from a message.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>A parameter for the result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Path keyword to choose the part to retrieve.  
for message = {message | message:protocol | message:request | message:type | message:result | message:timestamp | message:length}  
for channel = {channel:name | channel:localHost | channel:localPort | channel:remoteHost | channel:remotePort | channel:transport | channel:protocol}  
for listenpoint = {listenpoint:name | listenpoint:localHost | listenpoint:localPort | listenpoint:protocol}  
others are protocol specific.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>[optional] The message to analyse (default is the last received or sent message).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="protocol.setFromSDP">
				<xs:annotation>
					<xs:documentation>Reads a field from a SDP block.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>A parameter for the result.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The SDP block to analyse.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value2" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Path keyword to choose the part to retrieve.  
for line o = origin [:address | :addressType | :networkType | :sessionId | :sessionVersion | :userName]  
for line b = bandwidth [:type | :value] 
fro line c = connection [:address | :addressType | :networkType] 
for line i = information 
for line k = key [:value | :method] 
for line p = phone 
for line e = email 
for line m = media [:port |:type |:protocol |:information |:key [:key keyword] | :format | :portCount | :connection [:connection keyword] | :bandwith [:bandwidth path] | :mimeParameters | :mimesTypes | :attribut [:XXXXX]]  
for line s = sessionName 
for line v = version 
for line u = uri 
for line t = time [:start | :stop] 
for line z = zoneAdjustment 
for line r = repeatTime: duration | interval | offset 
for line a = attribut: | [:XXXX]
</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>

<!--                                                                       START OF DIAMETER PROTOCOL -->

  <!--                                                                          openChannel -->
  <xs:complexType name="openChannelDIAMETERType">
      <xs:complexContent>
          <xs:extension base="operationType">
              <xs:attribute name="localHost" type="xs:string" use="optional">
                  <xs:annotation>
                      <xs:appinfo>String</xs:appinfo>
                      <xs:documentation>The channel local host (sometimes called the source host) of the channel. It should of course be one of the local addresses of the host or a host name with a DNS resolution.</xs:documentation>
                  </xs:annotation>
              </xs:attribute>
              <xs:attribute name="localPort" type="xs:string" use="optional">
                  <xs:annotation>
                      <xs:appinfo>Integer</xs:appinfo>
                      <xs:documentation>The channel local port (sometimes called the source port) of the channel. The default value is chosen by the tool.</xs:documentation>
                  </xs:annotation>
              </xs:attribute>
      				<xs:attribute name="localURL" type="xs:string" use="optional">
      					<xs:annotation>
      						<xs:appinfo>String (url)</xs:appinfo>
      						<xs:documentation>The local URL of the channel (sometimes called the source information).</xs:documentation>
      					</xs:annotation>
      				</xs:attribute>             
      				<xs:attribute name="remoteHost" type="xs:string" use="optional">
      					<xs:annotation>
      						<xs:appinfo>String</xs:appinfo>
      						<xs:documentation>The channel remote host (sometimes called the destination host) of the channel. It could be an IP address or a host name with a DNS resolution.</xs:documentation>
      					</xs:annotation>
      				</xs:attribute>
      				<xs:attribute name="remotePort" type="xs:string" use="optional">
      					<xs:annotation>
      						<xs:appinfo>Integer</xs:appinfo>
      						<xs:documentation>The channel remote port (sometimes called the destination port) of the channel.</xs:documentation>
      					</xs:annotation>
      				</xs:attribute> 
      				<xs:attribute name="remoteURL" type="xs:string" use="optional">
      					<xs:annotation>
      						<xs:appinfo>String (url)</xs:appinfo>
      						<xs:documentation>The remote URL of the channel (sometimes called the destination information).</xs:documentation>
      					</xs:annotation>
      				</xs:attribute> 
      				<xs:attribute name="transport" type="xs:string" use="optional">
      					<xs:annotation>
      						<xs:appinfo>enumeration (UDP, TCP, SCTP, TLS)</xs:appinfo>
      						<xs:documentation>The channel transport.</xs:documentation>
      					</xs:annotation>
      				</xs:attribute>            
          </xs:extension>
      </xs:complexContent>
  </xs:complexType>
  
  <!--                                                                         closeChannel -->
  <xs:complexType name="closeChannelDIAMETERType">
      <xs:complexContent>
          <xs:extension base="operationType"/>
      </xs:complexContent>
  </xs:complexType>


	<!--                                                                          createListenpoint -->
	<xs:complexType name="createListenpointDIAMETERType">
	        <xs:complexContent>
	            <xs:extension base="operationType">
        	        <xs:sequence>
        	        	<xs:element name="nodeSettings"     type="nodeSettingsType"       minOccurs="0" maxOccurs="1" />
                    	 	<xs:element name="avp"     type="avpDIAMType"       minOccurs="0" maxOccurs="unbounded" />
                    	</xs:sequence>
				<xs:attribute name="localHost" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The listenpoint local host i.e. the IP address we are listening to. It should of course be one of the local addresses of the host or a host name with a DNS resolution. The default value is configurable(ppp.properties/listenpoint.LOCAL_HOST)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localPort" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The listenpoint local port i.e. the port we are listening to. The default value is configurable(ppp.properties/listenpoint.LOCAL_PORT)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localURL" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (url)</xs:appinfo>
						<xs:documentation>The listenpoint local URL we are listening to.</xs:documentation>
					</xs:annotation>
				</xs:attribute>             
				<xs:attribute name="listenUDP" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>A flag to specify whether we are listening to the UDP transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_UDP)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenTCP" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>A flag to specify whether we are listening to the TCP transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_TCP)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenSCTP" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>A flag to specify whether we are listening to the SCTP transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_SCTP)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenTLS" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>A flag to specify whether we are listening to the TLS transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_TLS)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localPortTLS" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The listenpoint local port for TLS transport i.e. the port we are listening to. The default value is LOCAL_PORT + 1</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="transport" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>enumeration (UDP, TCP, SCTP, TLS, RFC)</xs:appinfo>
						<xs:documentation>The default transport used to transport messages (in case the transport is not specified int the message content). The default value is configurable(ppp.properties/listenpoint.TRANSPORT)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
	            </xs:extension>
        	</xs:complexContent>
	</xs:complexType>
	<!--                                                                         removeListenpoint -->
	<xs:complexType name="removeListenpointDIAMETERType">
		<xs:complexContent>
			<xs:extension base="operationType"/>
		</xs:complexContent>
	</xs:complexType>

	<!--                                                                          createProbe -->
	<xs:complexType name="createProbeDIAMETERType">
		<xs:complexContent>
			<xs:extension base="operationType">
				<xs:attribute name="networkInterface" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The network interface to capture on. It should of course something like "eth#N" or "lo".</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="captureFilter" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The capturing filter : the syntax of the attribute is the same as tcpdump ou Wireshark tool. If not set, then we will capture all packets without any filtering.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="filename" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The filename to capture the network packets.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
                		<xs:attribute name="regexFilter" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The regular expression filter : the syntax of the attribute is the same as Java regular expression. If not set, then we will capture all packets without any specific filtering.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="promiscuousMode" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>The promiscuous mode : In promiscuous mode (true), you can capture packets every packet from the wire, i.e., even if its source or destination MAC address is not same as the MAC address of the interface you are opening. In non-promiscuous mode, you can only capture packets send and received by your host. If not set, default value is "true".</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--                                                                         removeProbe -->
	<xs:complexType name="removeProbeDIAMETERType">
		<xs:complexContent>
			<xs:extension base="operationType"/>
		</xs:complexContent>
	</xs:complexType>

<!--                                                                            sendMessage -->
    <xs:complexType name="sendMessageDIAMETERType">
        <xs:complexContent>
            <xs:extension base="operationType">
                <xs:sequence>
                    <xs:element name="header"  type="headerDIAMType" />
                    <xs:element name="avp"     type="avpDIAMType"       minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
  			<xs:attribute name="channel" type="xs:string" use="optional">
  				<xs:annotation>
  					<xs:appinfo>String</xs:appinfo>
  					<xs:documentation>The name of the channel to transport the message. Don't use it with listenpoint (incompatible)</xs:documentation>
  				</xs:annotation>
  			</xs:attribute>
        <xs:attribute name="listenpoint" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The name of the listenpoint to transport the message. Don't use it with channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
        
				<xs:attribute name="remoteHost" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The remote host to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remotePort" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The remote port to send the message to. Don't use it with the channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remoteURL" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (url)</xs:appinfo>
						<xs:documentation>The remote URL to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="destScenario" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (scenario name)</xs:appinfo>
						<xs:documentation>The destination scenario if the request comes to IMSloader again (case of proxy testing). This attribute should contain the name of the scenario to route the same message to.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="delay" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Float</xs:appinfo>
						<xs:documentation>The time delay (in seconds) when the message sending is differed.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
					<xs:attribute name="request" type="xs:string" >
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>DEPRECATED : The flag to indicate whether the message is a request ("True") or a response ("false").</xs:documentation>
					</xs:annotation>
				</xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                            receiveMessage -->
    <xs:complexType name="receiveMessageDIAMETERType">
        <xs:complexContent>
            <xs:extension base="operationType">
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="parameter"  type="parameterType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="test"       type="testType"      minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="and"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="or"         type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="not"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
  			<xs:attribute name="channel" type="xs:string" use="optional">
  				<xs:annotation>
  					<xs:appinfo>String</xs:appinfo>
  					<xs:documentation>The name of the channel to transport the message. Don't use it with listenpoint (incompatible)</xs:documentation>
  				</xs:annotation>
  			</xs:attribute>
				<xs:attribute name="listenpoint" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The listenpoint name to transport the message. Don't use it with channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
           			<xs:attribute name="probe" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The probe name to capture the message on.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="request" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are waiting for a request whereas false means a response. If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The message type we are waiting for. If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="result" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The message result (for response only) we are waiting for. If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="timeout" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Float</xs:appinfo>
						<xs:documentation>The timeout i.e. the maximum time (in seconds) we are waiting for. The default value is configurable (ppp.properties/operations.RECEIVE_TIMEOUT) If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="failedOnReceive" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are not waiting a message i.e. if we will receive a message , then the operation status is set to FAILED. The default value is false.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="failedOnTimeout" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are waiting a message i.e. if we won't receive any message , then the operation status is set to FAILED. The default value is true.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                                         nodeSettings -->
    <xs:complexType name="nodeSettingsType">
        <xs:attribute name="idleTimeout" type="xs:string">
    		<xs:annotation>
	    		<xs:appinfo>Integer</xs:appinfo>
				<xs:documentation>The idle close timeout value after which the connection will closed with reason='busy' unless there has been non-watchdog traffic on the connection. If 0 then idle timeout is disabled and connections will be kept open.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
        <xs:attribute name="watchdogInterval" type="xs:string">
    		<xs:annotation>
	    		<xs:appinfo>Integer</xs:appinfo>
				<xs:documentation>The desired interval (in milliseconds) between the stack automaticallys sends DWR/DWA message .</xs:documentation>
			</xs:annotation>
		</xs:attribute>		
    </xs:complexType>

<!--                                                                                   header -->
    <xs:complexType name="headerDIAMType">
        <xs:attribute name="request" type="xs:string">
    		<xs:annotation>
	    		<xs:appinfo>Boolean</xs:appinfo>
				<xs:documentation>The flag to indicate whether the message is a request ("True") or a response ("false").</xs:documentation>
			</xs:annotation>
		</xs:attribute>
        <xs:attribute name="command" type="xs:string" use="required">
    		<xs:annotation>
	    		<xs:appinfo>String</xs:appinfo>
				<xs:documentation>The command code or name (dictionary resolution).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
        <xs:attribute name="applicationId" type="xs:string" use="required">
    		<xs:annotation>
	    		<xs:appinfo>String</xs:appinfo>
				<xs:documentation>The application ID code or name (dictionary resolution).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
        <xs:attribute name="hopByHop" type="xs:string">
    		<xs:annotation>
	    		<xs:appinfo>Integer</xs:appinfo>
				<xs:documentation>The hop by hop identifier (transaction ID).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
        <xs:attribute name="endToEnd" type="xs:string">
    		<xs:annotation>
	    		<xs:appinfo>Integer</xs:appinfo>
				<xs:documentation>The end to end identifier (transaction ID).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
        <xs:attribute name="proxiable" type="xs:string">
    		<xs:annotation>
	    		<xs:appinfo>Boolean</xs:appinfo>
				<xs:documentation>The proxiable flag.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
        <xs:attribute name="error" type="xs:string">
    		<xs:annotation>
	    		<xs:appinfo>Boolean</xs:appinfo>
				<xs:documentation>The error flag.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
        <xs:attribute name="retransmit" type="xs:string">
    		<xs:annotation>
	    		<xs:appinfo>Boolean</xs:appinfo>
				<xs:documentation>The retransmit flag.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
    </xs:complexType>

<!--                                                                                         avp -->
    <xs:complexType name="avpDIAMType">
        <xs:sequence>
            <xs:element name="avp"  type="avpDIAMType"  minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="code"           type="xs:string" use="required" />
        <xs:attribute name="value"          type="xs:string" />
        <xs:attribute name="type"           type="xs:string" />
        <xs:attribute name="vendorId"       type="xs:string" />
        <xs:attribute name="mandatory"      type="xs:string" />
        <xs:attribute name="private"        type="xs:string" />
        <xs:attribute name="state"          type="xs:string" />        
    </xs:complexType>

<!--************************************************************************************************-->
<!--**************************************** OBSOLETE **********************************************-->
<!--************************************************************************************************-->

<!--                                                                              sendRequestAAA -->
    <xs:complexType name="sendRequestAAAType">
        <xs:complexContent>
            <xs:extension base="operationType">
                <xs:sequence>
                    <xs:element name="header"  type="headerDIAMType" />
                    <xs:element name="avp"        type="avpDIAMType"       minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
                <xs:attribute name="server"       type="xs:string" />
                <xs:attribute name="destScenario" type="xs:string" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                               sendAnswerAAA -->
    <xs:complexType name="sendAnswerAAAType">
        <xs:complexContent>
            <xs:extension base="operationType">
                <xs:sequence>
                    <xs:element name="header"  type="headerDIAMType" />
                    <xs:element name="avp"        type="avpDIAMType"       minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
                <!--
                <xs:attribute name="server"       type="xs:string" />
                <xs:attribute name="destScenario" type="xs:string" />
                -->
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
<!--                                                                           receiveRequestAAA -->
    <xs:complexType name="receiveRequestAAAType">
        <xs:complexContent>
            <xs:extension base="operationType">
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="parameter"  type="parameterType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="test"       type="testType"      minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="and"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="or"         type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="not"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
                <xs:attribute name="timeout"      type="xs:string" />
                <xs:attribute name="command"      type="xs:string" />
                <xs:attribute name="failedOnTimeout"    type="xs:string" />
                <xs:attribute name="failedOnReceive"    type="xs:string" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                            receiveAnswerAAA -->
    <xs:complexType name="receiveAnswerAAAType">
        <xs:complexContent>
            <xs:extension base="operationType">
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="parameter"  type="parameterType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="test"       type="testType"      minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="and"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="or"         type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="not"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
                <xs:attribute name="timeout"      type="xs:string" />                
                <xs:attribute name="command"      type="xs:string" />
                <xs:attribute name="result"       type="xs:string" />
                <xs:attribute name="failedOnTimeout"    type="xs:string" />
                <xs:attribute name="failedOnReceive"    type="xs:string" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                         END OF DIAMETER PROTOCOL -->

<!--                                                                      BEGIN OF GTPP PROTOCOL -->

<!--                                                                          openChannelGTPP -->
    <xs:complexType name="openChannelGTPType">
        <xs:complexContent>
            <xs:extension base="operationType">
				<xs:attribute name="localHost" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The channel local host (sometimes called the source host). It should of course be one of the local addresses of the host or a host name with a DNS resolution.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localPort" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The channel local port (sometimes called the source port). The default value is chosen by the tool.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remoteHost" type="xs:string" use="required">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The channel remote host (sometimes called the destination host). It could be an IP address or a host name with a DNS resolution.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remotePort" type="xs:string" use="required">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The channel remote port (sometimes called the remote port).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="transport" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>enumeration (UDP, TCP, SCTP, TLS)</xs:appinfo>
						<xs:documentation>The channel transport.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                         closeChannelGTPP -->
    <xs:complexType name="closeChannelGTPType">
        <xs:complexContent>
            <xs:extension base="operationType" />
        </xs:complexContent>
    </xs:complexType>

<!--                                                                          createListenpointGTPP -->
    <xs:complexType name="createListenpointGTPType">
        <xs:complexContent>
            <xs:extension base="operationType">
				<xs:attribute name="localHost" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The listenpoint local host i.e. the IP address we are listening to. It should of course be one of the local addresses of the host or a host name with a DNS resolution. The default value is configurable(ppp.properties/listenpoint.LOCAL_HOST)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localPort" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The listenpoint local port i.e. the port we are listening to. The default value is configurable(ppp.properties/listenpoint.LOCAL_PORT)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenUDP" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>A flag to specify whether we are listening to the UDP transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_UDP)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenTCP" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>A flag to specify whether we are listening to the TCP transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_TCP)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenSCTP" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>A flag to specify whether we are listening to the SCTP transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_SCTP)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenTLS" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>A flag to specify whether we are listening to the TLS transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_TLS)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localPortTLS" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The listenpoint local port for TLS transport i.e. the port we are listening to. The default value is LOCAL_PORT + 1</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="transport" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>enumeration (UDP, TCP, SCTP, TLS)</xs:appinfo>
						<xs:documentation>The default transport when the listenpoint is used to send message. The default value is configurable(ppp.properties/listenpoint.TRANSPORT)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                         removeListenpointGTPP -->
    <xs:complexType name="removeListenpointGTPType">
        <xs:complexContent>
            <xs:extension base="operationType" />
        </xs:complexContent>
    </xs:complexType>

<!--                                                                                sendMessageGTPP -->
    <xs:complexType name="sendMessageGTPType">
        <xs:complexContent>
            <xs:extension base="operationType" >
                <xs:sequence>
                    <xs:element name="headerPrime" type="headerGTPPrimeType" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="headerV1"  	 type="headerGTPV1Type"    minOccurs="0" maxOccurs="1"/>
                    <xs:element name="headerV2"  	 type="headerGTPV2Type"    minOccurs="0" maxOccurs="1"/>
                    <xs:element name="tv"         type="tagGTPType"         minOccurs="0" maxOccurs="unbounded" />                    
                    <xs:element name="tlv"         type="tagGTPType"         minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="tliv"        type="tagGTPType"         minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
				<xs:attribute name="channel" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The name of the channel to transport the message. Don't use it with listenpoint (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenpoint" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The name of the listenpoint to transport the message. Don't use it with channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remoteHost" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The remote host to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remotePort" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The remote port to send the message to. Don't use it with the channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remoteURL" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (url)</xs:appinfo>
						<xs:documentation>The remote URL to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="transport" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>enumeration (UDP, TCP, SCTP, TLS)</xs:appinfo>
						<xs:documentation>The protocol transport to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="destScenario" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (scenario name)</xs:appinfo>
						<xs:documentation>The destination scenario if the request commes to IMSloader again (case of proxy testing). This attribute should contain the name of the scenario to route the same message to.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="delay" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Float</xs:appinfo>
						<xs:documentation>The time delay (in seconds) when the message sending is differed.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
            </xs:extension>            
        </xs:complexContent>
    </xs:complexType>

<!--                                                                             receiveMessage -->
    <xs:complexType name="receiveMessageGTPType">
        <xs:complexContent>
            <xs:extension base="operationType" >
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="parameter"  type="parameterType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="test"       type="testType"      minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="and"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="or"         type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="not"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>     
				<xs:attribute name="channel" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The channel name to transport the message. Don't use it with listenpoint (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenpoint" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The listenpoint name to transport the message. Don't use it with channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="request" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are waiting for a request whereas false means a response. If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The message type we are waiting for. If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="result" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The message result (for response only) we are waiting for. If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="timeout" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Float</xs:appinfo>
						<xs:documentation>The timeout i.e. the maximum time (in seconds) we are waiting for. The default value is configurable (ppp.properties/operations.RECEIVE_TIMEOUT) If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="failedOnReceive" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are not waiting a message i.e. if we will receive a message , then the operation status is set to FAILED. The default value is false.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="failedOnTimeout" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are waiting a message i.e. if we won't receive any message , then the operation status is set to FAILED. The default value is true.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                          GTPP (PRIME) header -->
    <xs:complexType name="headerGTPPrimeType">
        <xs:attribute name="name"            type="xs:string" />
        <xs:attribute name="type"            type="xs:string" />
        <xs:attribute name="length"          type="xs:string" />
        <xs:attribute name="sequenceNumber" type="xs:string" use="required" />
    </xs:complexType>

<!-- 																			                                    GTP V1 Header -->    
    <xs:complexType name="headerGTPV1Type">
    	<xs:attribute name="name"            type="xs:string" />
        <xs:attribute name="version"	type="xs:string" />
        <xs:attribute name="protocolType"	type="xs:string" />
        <xs:attribute name="extensionHeaderFlag"	type="xs:string" />
        <xs:attribute name="sequenceNumberFlag" type="xs:string" />
        <xs:attribute name="nPduNumberFlag" type="xs:string" />
        <xs:attribute name="messageType" type="xs:string" />
        <xs:attribute name="length" type="xs:string" />
        <xs:attribute name="teid" type="xs:string" />
        <xs:attribute name="sequenceNumber" type="xs:string" />
        <xs:attribute name="nPduNumber" type="xs:string" />
        <xs:attribute name="nextExtensionType" type="xs:string" />
    </xs:complexType>

<!-- 																			                                    GTP V2 Header -->    
    <xs:complexType name="headerGTPV2Type">
    	<xs:attribute name="name"            type="xs:string" />
        <xs:attribute name="version"	type="xs:string" />
        <xs:attribute name="piggyFlag"	type="xs:string" />
        <xs:attribute name="teidFlag"	type="xs:string" />
        <xs:attribute name="messageType" type="xs:string" />
        <xs:attribute name="tunnelEndpointId" type="xs:string" />
        <xs:attribute name="sequenceNumber" type="xs:string" />
    </xs:complexType>

<!--                                                                                     tlv -->
    <xs:complexType name="tagGTPType">
        <xs:sequence>
            <xs:element name="attribute"  	  type="attributeGTPType"  minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="name"       type="xs:string" />
        <xs:attribute name="tag"       type="xs:string"/>
        <xs:attribute name="length"     type="xs:string" />
        <xs:attribute name="value"      type="xs:string"/>
    </xs:complexType>

<!--                                                                                attribute -->
    <xs:complexType name="attributeGTPType">
        <xs:complexContent>
            <xs:extension base="operationType" >
                <xs:sequence>
                    <xs:element name="attribute"  type="attributeGTPType"   minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
                <xs:attribute name="value"      type="xs:string"/>
                <xs:attribute name="type"       type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
<!--                                                                             END OF GTPP PROTOCOL -->


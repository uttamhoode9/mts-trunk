
################################################################################
#                                                                              #
#                         POP Protocol                                         #
#                                                                              #
################################################################################



###############################################################################
#                                                                             #
# DEFAULT LISTENPOINT : to receive messages.                                  #
# If no channel nor listenpoint are specified in <sendMessagePPP> operations, #
# then this default one is used to fixe the source information (host and port)#
# on the transport layer like UDP based protocol                              #
#                                                                             #
###############################################################################

# Default listen host (IP addresses or DNS name); empty value means to listen
# on all local IP adresses (similar to 0.0.0.0) and that the source IP address 
# is the first local IP address 
# [string]
listenpoint.LOCAL_HOST =

# Default listen port; empty or zero value means no listen port
# [integer]
listenpoint.LOCAL_PORT = 11100

# Flag to listen to UDP transport
# [boolean]
# NOT SUPPORTED : please keep "false" value
listenpoint.LISTEN_UDP = false

# Flag to listen to TCP transport
# [boolean]
listenpoint.LISTEN_TCP = true

# Flag to listen to SCTP transport
# [boolean]
# NOT SUPPORTED : please keep "false" value
listenpoint.LISTEN_SCTP = false

# Flag to listen to TLS transport
# [boolean]
listenpoint.LISTEN_TLS = false

# Default listen port for TLS transport; empty or zero means listen.LOCAL_PORT + 1
# [integer]
listenpoint.LOCAL_PORT_TLS =

# Default transport for endpoints; possible values are : udp, tcp, tls, sctp
# [enumeration] udp|tcp|sctp|tls
listenpoint.TRANSPORT = tcp


#####################################################
# server                                            #
#####################################################

# Welcome message to send by server
# Need to begin by +OK
# If empty, server don't send welcom message
# [string]
server.WELCOME_MESSAGE = +OK Welcome to IMSLoader POP Server


#####################################################
# client                                            #
#####################################################

#
# client wait welcome message
# [boolean]
client.WAIT_WELCOME_MESSAGE = true


#######################################################

# Time (in seconds) of life the messages and transactions
# [float]
MESSAGE_TIME_LIFE = 30

# Timeout duration (in seconds) for the receive operations
# [float]
operations.RECEIVE_TIMEOUT = 30

#######################################################
# route
#######################################################

# The tool automatically routes a received response to the scenario which has sent the corresponding request.
# The transactionID is used internally to make the corresponding between requests and responses.
# This parameter is used to get the transactionID from the message given a list of paths (separated 
# by ',' character). The paths are defined with the setFromMessage operation and are of course 
# protocol dependant
# type list<string> (list of path keywords)
# [string]
route.TRANSACTION_ID = 

# The tool automatically routes a received request to the scenario given in the "destScenario" parameter 
# of the send operation in the same testcase. In this case, the tool is simulating a client and server 
# at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by 
# the tool and the same requests the tool has received 
# This parameter is used to get the messageID from the message given a list of paths (separated 
# by ',' character). The path are defined with the setFromMessage operation and are protocol of 
# course dependant
# type list<string> (list of path keywords)
# [string]
route.MESSAGE_ID = 

# The tool routes a received request to the scenario given by its name. In this case, the tool is 
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message 
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage 
# operation and are of course protocol dependant
# type list<string> (list of path keywords)
# [string]
route.SCENARIO_NAME = message.protocol

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled has a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type list<string> (list of path keywords)
# [string]
route.RETRANSMISSION_ID =

# By default, the tool routes a received responses to the scenario which has sent the corresponding 
# request; if this parameter equals to false, then this mechanism is deasctivated and the responses 
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and 
# dispatch the response to the scenario with the same name
# [boolean]
route.DEFAULT_RESPONSE = true


################################################################################
#                                                                              #
#                         UDP Protocol                                         #
#                                                                              #
################################################################################


###############################################################################
#                                                                             #
# dafault listenpoint : if the listenpoint is not specified in                #
# send operations, then the default one is used to send the message           #
#                                                                             #
###############################################################################

# Default listen host (IP addresses or DNS name); empty value means to listen 
# [string]
listenpoint.LOCAL_HOST =

# Default listen port; empty or zero value means no listen port
# [integer]
listenpoint.LOCAL_PORT = 11000


#######################################################

# Time (in seconds) of life the messages and transactions
# [float]
MESSAGE_TIME_LIFE = 5

# Timeout duration (in seconds) for the receive operations
# [float]
operations.RECEIVE_TIMEOUT = 5


#######################################################
# socket parameters
#######################################################

# Socket flag SO_RCVBUF
# ets the SO_RCVBUF option to the specified value for this Socket. 
# The SO_RCVBUF option is used by the platform's networking code as a hint 
# for the size to set the underlying network I/O buffers.
# [integer] 
socket.RECEIVE_BUFFER = 8192

# Enable/disable the SO_REUSEADDR socket option. 
# When a TCP connection is closed the connection may remain in a timeout state 
# for a period of time after the connection is closed (typically known as the 
# TIME_WAIT state or 2MSL wait state). For applications using a well known socket 
# address or port it may not be possible to bind a socket to the required 
# SocketAddress if there is a connection in the timeout state involving the 
# socket address or port.
# [boolean] 
socket.REUSE_ADDRESS = false

# Sets the SO_SNDBUF option to the specified value for this Socket. The SO_SNDBUF 
# option is used by the platform's networking code as a hint for the size to set 
# the underlying network I/O buffers.
# [integer] 
socket.SEND_BUFFER = 8192

# Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds. 
# With this option set to a non-zero timeout, a read() call on the InputStream 
# associated with this Socket will block for only this amount of time.
# The option must be enabled prior to entering the blocking operation to have 
# effect. The timeout must be > 0. A timeout of zero is interpreted as an 
# infinite timeout.
# [integer] 
socket.TIMEOUT = 0

# Sets traffic class or type-of-service octet in the IP header for packets sent 
# from this Socket. As the underlying network implementation may ignore this 
# value applications should consider it a hint. 
# The tc must be in the range 0 <= tc <= 255.
# for Internet Protocol v4 the value consists of an octet with precedence and 
# TOS fields as detailed in RFC 1349.
# [integer] 
socket.TRAFFIC_CLASS = 0


#######################################################

# Flag to set the use of Non-blocking I/O
# Enabling this allows having more opened listenpoints
# [boolean]
USE_NIO = false


#######################################################
## Route

# The tool automatically routes a received response to the scenario which has sent the corresponding request.
# The transactionID is used internally to make the corresponding between requests and responses.
# This parameter is used to get the transactionID from the message given a list of paths (separated 
# by ',' character). The paths are defined with the setFromMessage operation and are of course 
# protocol dependant
# type list<string> (list of path keywords)
# [string]
route.TRANSACTION_ID = 

# The tool automatically routes a received request to the scenario given in the "destScenario" parameter 
# of the send operation in the same testcase. In this case, the tool is simulating a client and server 
# at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by 
# the tool and the same requests the tool has received 
# This parameter is used to get the messageID from the message given a list of paths (separated 
# by ',' character). The path are defined with the setFromMessage operation and are protocol of 
# course dependant
# type list<string> (list of path keywords)
# [string]
route.MESSAGE_ID = 

# The tool routes a received request to the scenario given by its name. In this case, the tool is 
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message 
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage 
# operation and are of course protocol dependant
# type list<string> (list of path keywords)
# [string]
route.SCENARIO_NAME = message.protocol|channel.name|listenpoint.name

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled has a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type list<string> (list of path keywords)
# [string]
route.RETRANSMISSION_ID =

# By default, the tool routes a received responses to the scenario which has sent the corresponding 
# request; if this parameter equals to false, then this mechanism is deasctivated and the responses 
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and 
# dispatch the response to the scenario with the same name
# [boolean]
route.DEFAULT_RESPONSE = true

# Size of the buffer (in byte) to store the UDP message. It should be greater than the biggest 
# UDP message we are waiting for.
# [integer]
DEFAULT_BUFFER_LENGHT = 10000

###################################################

# test use only
NB_ITERATION=100000





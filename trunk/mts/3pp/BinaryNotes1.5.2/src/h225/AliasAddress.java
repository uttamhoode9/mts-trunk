
package h225;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Choice ( name = "AliasAddress" )
    public class AliasAddress implements IASN1PreparedElement {
            
    @ASN1String( name = "", 
        stringType =  UniversalTag.IA5String , isUCS = false )
    
        @ASN1Element ( name = "e164", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private String e164 = null;
                
  
    @ASN1String( name = "", 
        stringType =  UniversalTag.BMPString , isUCS = false )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 256L 
		
	   )
	   
        @ASN1Element ( name = "h323-ID", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private String h323_ID = null;
                
  
        
        public String getE164 () {
            return this.e164;
        }

        public boolean isE164Selected () {
            return this.e164 != null;
        }

        private void setE164 (String value) {
            this.e164 = value;
        }

        
        public void selectE164 (String value) {
            this.e164 = value;
            
                    setH323_ID(null);
                            
        }

        
  
        
        public String getH323_ID () {
            return this.h323_ID;
        }

        public boolean isH323_IDSelected () {
            return this.h323_ID != null;
        }

        private void setH323_ID (String value) {
            this.h323_ID = value;
        }

        
        public void selectH323_ID (String value) {
            this.h323_ID = value;
            
                    setE164(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AliasAddress.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            
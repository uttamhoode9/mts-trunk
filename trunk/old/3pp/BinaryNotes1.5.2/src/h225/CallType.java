
package h225;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Choice ( name = "CallType" )
    public class CallType implements IASN1PreparedElement {
            
        @ASN1Null ( name = "pointToPoint" ) 
    
        @ASN1Element ( name = "pointToPoint", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject pointToPoint = null;
                
  
        @ASN1Null ( name = "oneToN" ) 
    
        @ASN1Element ( name = "oneToN", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject oneToN = null;
                
  
        @ASN1Null ( name = "nToOne" ) 
    
        @ASN1Element ( name = "nToOne", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject nToOne = null;
                
  
        @ASN1Null ( name = "nToN" ) 
    
        @ASN1Element ( name = "nToN", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject nToN = null;
                
  
        
        public org.bn.types.NullObject getPointToPoint () {
            return this.pointToPoint;
        }

        public boolean isPointToPointSelected () {
            return this.pointToPoint != null;
        }

        private void setPointToPoint (org.bn.types.NullObject value) {
            this.pointToPoint = value;
        }

        
        public void selectPointToPoint () {
            selectPointToPoint (new org.bn.types.NullObject());
	}
	
        public void selectPointToPoint (org.bn.types.NullObject value) {
            this.pointToPoint = value;
            
                    setOneToN(null);
                
                    setNToOne(null);
                
                    setNToN(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getOneToN () {
            return this.oneToN;
        }

        public boolean isOneToNSelected () {
            return this.oneToN != null;
        }

        private void setOneToN (org.bn.types.NullObject value) {
            this.oneToN = value;
        }

        
        public void selectOneToN () {
            selectOneToN (new org.bn.types.NullObject());
	}
	
        public void selectOneToN (org.bn.types.NullObject value) {
            this.oneToN = value;
            
                    setPointToPoint(null);
                
                    setNToOne(null);
                
                    setNToN(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getNToOne () {
            return this.nToOne;
        }

        public boolean isNToOneSelected () {
            return this.nToOne != null;
        }

        private void setNToOne (org.bn.types.NullObject value) {
            this.nToOne = value;
        }

        
        public void selectNToOne () {
            selectNToOne (new org.bn.types.NullObject());
	}
	
        public void selectNToOne (org.bn.types.NullObject value) {
            this.nToOne = value;
            
                    setPointToPoint(null);
                
                    setOneToN(null);
                
                    setNToN(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getNToN () {
            return this.nToN;
        }

        public boolean isNToNSelected () {
            return this.nToN != null;
        }

        private void setNToN (org.bn.types.NullObject value) {
            this.nToN = value;
        }

        
        public void selectNToN () {
            selectNToN (new org.bn.types.NullObject());
	}
	
        public void selectNToN (org.bn.types.NullObject value) {
            this.nToN = value;
            
                    setPointToPoint(null);
                
                    setOneToN(null);
                
                    setNToOne(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(CallType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            

package h225;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "VendorIdentifier", isSet = false )
    public class VendorIdentifier implements IASN1PreparedElement {
            
        @ASN1Element ( name = "vendor", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private H221NonStandard vendor = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 256L 
		
	   )
	   
        @ASN1Element ( name = "productId", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private byte[] productId = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 256L 
		
	   )
	   
        @ASN1Element ( name = "versionId", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private byte[] versionId = null;
                
  
        
        public H221NonStandard getVendor () {
            return this.vendor;
        }

        

        public void setVendor (H221NonStandard value) {
            this.vendor = value;
        }
        
  
        
        public byte[] getProductId () {
            return this.productId;
        }

        
        public boolean isProductIdPresent () {
            return this.productId != null;
        }
        

        public void setProductId (byte[] value) {
            this.productId = value;
        }
        
  
        
        public byte[] getVersionId () {
            return this.versionId;
        }

        
        public boolean isVersionIdPresent () {
            return this.versionId != null;
        }
        

        public void setVersionId (byte[] value) {
            this.versionId = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(VendorIdentifier.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            
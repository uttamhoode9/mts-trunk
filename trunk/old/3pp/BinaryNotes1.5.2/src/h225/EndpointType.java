
package h225;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "EndpointType", isSet = false )
    public class EndpointType implements IASN1PreparedElement {
            
        @ASN1Element ( name = "nonStandardData", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonStandardParameter nonStandardData = null;
                
  
        @ASN1Element ( name = "vendor", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private VendorIdentifier vendor = null;
                
  
        @ASN1Element ( name = "gatekeeper", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private GatekeeperInfo gatekeeper = null;
                
  
        @ASN1Element ( name = "gateway", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private GatewayInfo gateway = null;
                
  
        @ASN1Element ( name = "mcu", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private McuInfo mcu = null;
                
  
        @ASN1Element ( name = "terminal", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private TerminalInfo terminal = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "mc", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Boolean mc = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "undefinedNode", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Boolean undefinedNode = null;
                
  
        
        public NonStandardParameter getNonStandardData () {
            return this.nonStandardData;
        }

        
        public boolean isNonStandardDataPresent () {
            return this.nonStandardData != null;
        }
        

        public void setNonStandardData (NonStandardParameter value) {
            this.nonStandardData = value;
        }
        
  
        
        public VendorIdentifier getVendor () {
            return this.vendor;
        }

        
        public boolean isVendorPresent () {
            return this.vendor != null;
        }
        

        public void setVendor (VendorIdentifier value) {
            this.vendor = value;
        }
        
  
        
        public GatekeeperInfo getGatekeeper () {
            return this.gatekeeper;
        }

        
        public boolean isGatekeeperPresent () {
            return this.gatekeeper != null;
        }
        

        public void setGatekeeper (GatekeeperInfo value) {
            this.gatekeeper = value;
        }
        
  
        
        public GatewayInfo getGateway () {
            return this.gateway;
        }

        
        public boolean isGatewayPresent () {
            return this.gateway != null;
        }
        

        public void setGateway (GatewayInfo value) {
            this.gateway = value;
        }
        
  
        
        public McuInfo getMcu () {
            return this.mcu;
        }

        
        public boolean isMcuPresent () {
            return this.mcu != null;
        }
        

        public void setMcu (McuInfo value) {
            this.mcu = value;
        }
        
  
        
        public TerminalInfo getTerminal () {
            return this.terminal;
        }

        
        public boolean isTerminalPresent () {
            return this.terminal != null;
        }
        

        public void setTerminal (TerminalInfo value) {
            this.terminal = value;
        }
        
  
        
        public Boolean getMc () {
            return this.mc;
        }

        

        public void setMc (Boolean value) {
            this.mc = value;
        }
        
  
        
        public Boolean getUndefinedNode () {
            return this.undefinedNode;
        }

        

        public void setUndefinedNode (Boolean value) {
            this.undefinedNode = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(EndpointType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            
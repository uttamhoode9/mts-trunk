
package h225;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Choice ( name = "UnregRejectReason" )
    public class UnregRejectReason implements IASN1PreparedElement {
            
        @ASN1Null ( name = "notCurrentlyRegistered" ) 
    
        @ASN1Element ( name = "notCurrentlyRegistered", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject notCurrentlyRegistered = null;
                
  
        @ASN1Null ( name = "callInProgress" ) 
    
        @ASN1Element ( name = "callInProgress", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject callInProgress = null;
                
  
        @ASN1Null ( name = "undefinedReason" ) 
    
        @ASN1Element ( name = "undefinedReason", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject undefinedReason = null;
                
  
        
        public org.bn.types.NullObject getNotCurrentlyRegistered () {
            return this.notCurrentlyRegistered;
        }

        public boolean isNotCurrentlyRegisteredSelected () {
            return this.notCurrentlyRegistered != null;
        }

        private void setNotCurrentlyRegistered (org.bn.types.NullObject value) {
            this.notCurrentlyRegistered = value;
        }

        
        public void selectNotCurrentlyRegistered () {
            selectNotCurrentlyRegistered (new org.bn.types.NullObject());
	}
	
        public void selectNotCurrentlyRegistered (org.bn.types.NullObject value) {
            this.notCurrentlyRegistered = value;
            
                    setCallInProgress(null);
                
                    setUndefinedReason(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getCallInProgress () {
            return this.callInProgress;
        }

        public boolean isCallInProgressSelected () {
            return this.callInProgress != null;
        }

        private void setCallInProgress (org.bn.types.NullObject value) {
            this.callInProgress = value;
        }

        
        public void selectCallInProgress () {
            selectCallInProgress (new org.bn.types.NullObject());
	}
	
        public void selectCallInProgress (org.bn.types.NullObject value) {
            this.callInProgress = value;
            
                    setNotCurrentlyRegistered(null);
                
                    setUndefinedReason(null);
                            
        }

        
  
        
        public org.bn.types.NullObject getUndefinedReason () {
            return this.undefinedReason;
        }

        public boolean isUndefinedReasonSelected () {
            return this.undefinedReason != null;
        }

        private void setUndefinedReason (org.bn.types.NullObject value) {
            this.undefinedReason = value;
        }

        
        public void selectUndefinedReason () {
            selectUndefinedReason (new org.bn.types.NullObject());
	}
	
        public void selectUndefinedReason (org.bn.types.NullObject value) {
            this.undefinedReason = value;
            
                    setNotCurrentlyRegistered(null);
                
                    setCallInProgress(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(UnregRejectReason.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            
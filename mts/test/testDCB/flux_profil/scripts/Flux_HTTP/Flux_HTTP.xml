<!-- To use this part of XML code in a scenario, - input parameters must be defined and setted locally (by the caller scenario). - output parameters may be used in the scenario after the "call".  Input parameters : - [RADIUSsocketOpen]   :  - [source_ip]          :  - [radius_nas_port]           :  - [radius_secret]             :  - [radius_ip]          :  - [radius_auth_port]   :  - [msisdn]             :  - [radius_acct_port]   :  - [nas_ip_address]     :  - [calling_station_id] :  - [called_station_id]  :  - [3gpp_charging_id]   :  - [3gpp_sgsn_address]  :  - [nas_identifier]     :  - [HTTPconnectionOpen] :  - [protocol]           :  - [server]             :  - [http_port]          :  - [resources_size]     :  - [resources]          :   Output parameters : - [RADIUSsocketName]   :  - [RADIUSsocketOpen]   :  - [HTTPconnectionName] :  - [HTTPconnectionOpen] :   -->
<!-- open RADIUS Connection -->
<!--    send Radius Access-Request
  <sendMessageRADIUS listenpoint="[ggsn_radius_socket_name]" remoteHost="[radius_host_http]" remotePort="[radius_port_http_auth]">
     Header
    <header code="1"/>

     AVPs
     User-Name (1)
    <avp code="1" value="[msisdn]"/>

     User-Password (2)
    <avp code="2" value="User-Password"/>

     Nas-IP-Address (4)
    <avp code="4" value="[source_ip]"/>

     Code: Nas-Port (5)
    <avp code="5" value="[radius_nas_port]"/>

     Calling-Station-Id (31)
    <avp code="31" value=""/>

     Called-Station-Id (30)
    <avp code="30" value=""/>
  </sendMessageRADIUS>
  <parameter name="[test:radiusRequest]" operation="number.add" value="[test:radiusRequest]" value2="1"/>
  <parameter name="[testcase:profilRequest_[index]]" operation="number.add" value="[testcase:profilRequest_[index]]" value2="1"/>

  <receiveMessageRADIUS listenpoint="[ggsn_radius_socket_name]" request="false"/>
  <parameter name="[test:radiusResponse]" operation="number.add" value="[test:radiusResponse]" value2="1"/>
  <parameter name="[testcase:profilResponse_[index]]" operation="number.add" value="[testcase:profilResponse_[index]]" value2="1"/>-->

<!-- send Radius Accounting-Request Start -->
<parameter name="[timestamp]" operation="system.timestamp" value="1970"/>
<parameter name="[timestamp]" operation="number.divide" value="[timestamp]" value2="1000"/>
<parameter name="[timestamp]" operation="number.floor" value="[timestamp]" />
<sendMessageRADIUS listenpoint="[ggsn_radius_socket_name]" remoteHost="[radius_host_http]" remotePort="[radius_port_http_acct]">
    <!-- Header -->
    <header code="4"/>
    <!-- AVPs -->
    <!--Acct-Status-Type(40) -->
    <avp code="40" value="Start"/>
    <!-- User-Name (1) -->
    <avp code="1" value="void"/><!-- old value [msisdn]-->
    <!-- NAS-IP-Address(4) -->
    <avp code="4" value="[nas_ip_address]"/>
    <!-- NAS-Port(5) -->
    <!-- <avp code="5" value="[radius_nas_port]"/> -->
    <!-- Framed-IP-Address(8) -->
    <avp code="8" value="[source_ip]"/>
    <!-- Calling-Station-Id(31) -->
    <avp code="31" value="[calling_station_id]"/>
    <!-- Called-Station-Id(30) -->
    <avp code="30" value="[called_station_id]"/>
    <!-- Acct-Session-Id(44) -->
    <avp code="44" value="[Acct-Session-Id]"/>
    <!-- Event-Timestamp(55) -->
    <!-- <avp code="55" value="[timestamp]"/> -->
    <!-- Framed-Protocol(7) -->
    <avp code="7" value="GPRS-PDP-Context"/>
    <!-- Vendor-Specific(26) 3GPP-IMSI -->
    <avp code="26" value="3GPP">
        <avp code="1" value="[imsi]"/>
    </avp>
    <!-- Vendor-Specific(26) 3GPP-Charging-ID -->
    <avp code="26" value="3GPP">
        <avp code="2" value="[3gpp_charging_id]"/>
    </avp>
    <avp code="26" value="3GPP">
        <avp code="3" value="0"/><!-- IPV4 (0)-->
    </avp>
    <!-- Vendor-Specific(26) 3GPP-SGSN-Address -->
    <avp code="26" value="3GPP">
        <avp code="6" value="[3gpp_sgsn_address]"/>
    </avp>
    <avp code="26" value="3GPP">
        <avp code="20" value="33353739393430313033343330323635"/><!-- IMEISV -->
    </avp>

    <avp code="26" value="3GPP">
        <avp code="21" value="01"/><!-- UTRAN -->
    </avp>

    <avp code="26" value="3GPP">
        <avp code="22" value="0102F810970378FD"/><!-- UserLocationInfo -->
    </avp>

    <!-- NAS-Identifier(32) -->
    <avp code="32" value="[nas_identifier]"/>

    <!-- Service-Type(6) -->
	<avp code="6" value="Framed-User"/>
	<!-- NAS-Port-Type(61) -->
	<avp code="61" value="Virtual"/>
	<!-- Vendor-Specific(26) 3GPP-GGSN-Address -->
	<avp code="26" value="3GPP">
    	<avp code="7" value="212.234.96.26"/>
    </avp>
	<!-- Vendor-Specific(26) 3GPP-Gharging-Characteristics-->
	<avp code="26" value="3GPP">
        <avp code="13" value="0800"/>
    </avp>
	<!-- Vendor-Specific(26) 3GPP-SGSN-MMC-MNC-->
	<avp code="26" value="3GPP">
        <avp code="18" value="20801"/>
    </avp>
	<!-- Acct-Authentic(45)-->
	<avp code="45" value="Local"/>
    <!-- Acct-Delay-Time(41)-->
	<avp code="41" value="0"/>
</sendMessageRADIUS>
<parameter name="[test:radiusRequest]" operation="number.add" value="[test:radiusRequest]" value2="1"/>
<parameter name="[testcase:profilRequest_[index]]" operation="number.add" value="[testcase:profilRequest_[index]]" value2="1"/>

<receiveMessageRADIUS listenpoint="[ggsn_radius_socket_name]" request="false"/>
<parameter name="[test:radiusResponse]" operation="number.add" value="[test:radiusResponse]" value2="1"/>
<parameter name="[testcase:profilResponse_[index]]" operation="number.add" value="[testcase:profilResponse_[index]]" value2="1"/>

<parameter name="[accounting_session_running]" operation="set" value="true"/>
<parameter name="[accounting_session_host]" operation="set" value="[radius_host_http]"/>
<parameter name="[accounting_session_port]" operation="set" value="[radius_port_http_acct]"/>
<!-- Changement de socket pour browsing -->
<!-- open HTTP Connection -->
<parameter name="[HTTPconnectionName]" operation="set" value="connection_http_[testcase:index]"/>
<parameter name="[HTTPconnectionOpen]" operation="set" value="false"/>
<openChannelHTTP name="[HTTPconnectionName]" localHost="[source_ip]" remoteURL="[http_protocol]://[http_server_host]:[http_server_port]"/>
<parameter name="[HTTPconnectionOpen]" operation="set" value="true"/>
<parameter name="[j]" operation="set" value="0"/>

<while>
    <condition>
        <test parameter="[j]" condition="number.lowerThan" value="[resources_size]"/>
    </condition>
    <do>
        <!-- send HTTP Request -->
        <parameter name="[resources_protocol]" operation="set" value="[resources_protocols([j])]"/>
        <parameter name="[resources_host]" operation="set" value="[resources_hosts([j])]"/>
        <parameter name="[resources_resource]" operation="set" value="[resources_resources([j])]"/>
        <sendMessageHTTP channel="[HTTPconnectionName]">
<![CDATA[GET [resources_protocol][resources_host][resources_resource] HTTP/1.1
Host: [resources_host]
Accept-charset: text/html
Content-Type: text/html
Content-Encoding: utf-8;iso-8859
User-Agent: IMSLoader
]]>
        </sendMessageHTTP>
        <parameter name="[test:httpRequest]" operation="number.add" value="[test:httpRequest]" value2="1"/>
        <parameter name="[testcase:profilRequest_[index]]" operation="number.add" value="[testcase:profilRequest_[index]]" value2="1"/>
        <receiveMessageHTTP request="false">
            <parameter name="[result]" operation="protocol.setFromMessage" value="message:result" />
        </receiveMessageHTTP>
        
        <if>
            <condition>
                <test parameter="[result]" condition="string.matches" value="[http_result]" />
            </condition>
            <then>
                <parameter name="[test:httpResponse]" operation="number.add" value="[test:httpResponse]" value2="1"/>
                <parameter name="[testcase:profilResponse_[index]]" operation="number.add" value="[testcase:profilResponse_[index]]" value2="1"/>
            </then>
            <else>
                <!--
                  - Mise a jour des statistiques
                  -->
                <stats>
                    <flow name="[0msisdn] http failure" shortDesc="http failure" description="[0msisdn] http failure" longDesc="[0msisdn] http failure">
                        <increase>1</increase>
                    </flow>
                </stats>
                <goto label="break" />
            </else>
        </if>
        
        <if>
            <condition>
                <test parameter="[result]" condition="string.matches" value="2[0-9][0-9]" />
            </condition>
            <then>
                <!-- Next HTTP resource -->
                <parameter name="[j]" operation="number.add" value="[j]" value2="1"/>
            </then>
            <else>
                <!--parameter name="[close_http]" operation="set" value="false"/-->
                <goto label="break" />
            </else>
        </if>
    </do>
</while>
<label name="break" />

<!--
  - Essaie de fermer la connexion HTTP. Toute erreur est ignoree.
  -->
<try>
    <do>
        <closeChannelHTTP name="[HTTPconnectionName]"/>
        <parameter name="[HTTPconnectionOpen]" operation="set" value="false"/>
    </do>
    <finally>
        <parameter name="[HTTPconnectionOpen]" operation="set" value="false"/>
    </finally>
</try>

<pause seconds="0"/>

<!-- send Radius Accounting-Request Stop -->
<parameter name="[timestamp]" operation="system.timestamp" value="1970"/>
<parameter name="[timestamp]" operation="number.divide" value="[timestamp]" value2="1000"/>
<parameter name="[timestamp]" operation="number.floor" value="[timestamp]" />
<sendMessageRADIUS listenpoint="[ggsn_radius_socket_name]" remoteHost="[radius_host_http]" remotePort="[radius_port_http_acct]">
    <!-- Header -->
    <header code="4"/>
    <!-- AVPs -->
    <!--Acct-Status-Type(40) -->
    <avp code="40" value="Stop"/>
    <!-- User-Name (1) -->
    <avp code="1" value="[msisdn]"/>
    <!-- NAS-IP-Address(4) -->
    <avp code="4" value="[nas_ip_address]"/>
    <!-- NAS-Port(5) -->
    <avp code="5" value="[radius_nas_port]"/>
    <!-- Framed-IP-Address(8) -->
    <avp code="8" value="[source_ip]"/>
    <!-- Calling-Station-Id(31) -->
    <avp code="31" value="[calling_station_id]"/>
    <!-- Called-Station-Id(30) -->
    <avp code="30" value="[called_station_id]"/>
    <!-- Acct-Session-Id(44) -->
    <avp code="44" value="[Acct-Session-Id]"/>
    <!-- Event-Timestamp(55) -->
    <avp code="55" value="[timestamp]"/>
    <!-- Framed-Protocol(7) -->
    <avp code="7" value="GPRS-PDP-Context"/>
    <!-- Vendor-Specific(26) 3GPP-Charging-ID -->
    <avp code="26" value="3GPP">
        <avp code="2" value="[3gpp_charging_id]"/>
    </avp>
    <!-- Vendor-Specific(26) 3GPP-SGSN-Address -->
    <avp code="26" value="3GPP">
        <avp code="6" value="[3gpp_sgsn_address]"/>
    </avp>
    <!-- NAS-Identifier(32) -->
    <avp code="32" value="[nas_identifier]"/>
</sendMessageRADIUS>
<parameter name="[test:radiusRequest]" operation="number.add" value="[test:radiusRequest]" value2="1"/>
<parameter name="[testcase:profilRequest_[index]]" operation="number.add" value="[testcase:profilRequest_[index]]" value2="1"/>

<receiveMessageRADIUS listenpoint="[ggsn_radius_socket_name]" request="false"/>
<parameter name="[test:radiusResponse]" operation="number.add" value="[test:radiusResponse]" value2="1"/>
<parameter name="[testcase:profilResponse_[index]]" operation="number.add" value="[testcase:profilResponse_[index]]" value2="1"/>

<parameter name="[accounting_session_running]" operation="set" value="false"/>

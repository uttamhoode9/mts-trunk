# Default listen port; empty or zero value means no listen port
# [integer] 
listenpoint.LOCAL_PORT = 7070

# Flag to listen to TCP transport
# [boolean] 
listenpoint.LISTEN_TCP = false

# Flag to listen to TLS transport
# [boolean] 
listenpoint.LISTEN_TLS = false

# The sessionID is used internally to maintain sessions ie the correspondance between many 
# messages that are linked each together.
# The tool uses session for internal routing : it automatically routes a received message 
# to the scenario which has initiated the session.
# This parameter is used to get the sessionID from the message given a list of paths (separated 
# by ',' character). The paths are defined with the setFromMessage operation and are of course 
# protocol dependant
# type list<string> (list of path keywords)
# [string] 
route.SESSION_ID = 

# The tool automatically routes a received request to the scenario given in the "destScenario" parameter 
# of the send operation in the same testcase. In this case, the tool is simulating a client and server 
# at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by 
# the tool and the same requests the tool has received 
# This parameter is used to get the messageID from the message given a list of paths (separated 
# by ',' character). The path are defined with the setFromMessage operation and are protocol of 
# course dependant
# type list<string> (list of path keywords)
# [string] 
route.MESSAGE_ID = 

# The tool routes a received request to the scenario given by its name. In this case, the tool is 
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message 
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage 
# operation and are of course protocol dependant
# type list<string> (list of path keywords)
# [string] 
route.SCENARIO_NAME = message.request,message.type

# By default, the tool routes a received responses to the scenario which has sent the corresponding 
# request; if this parameter equals to false, then this mechanism is deasctivated and the responses 
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and 
# dispatch the response to the scenario with the same name
# [boolean] 
route.DEFAULT_RESPONSE = false


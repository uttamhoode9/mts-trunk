
################################################################################
#                                                                              #
#                         SIP Protocol                                         #
#                                                                              #
################################################################################



###############################################################################
#                                                                             #
# dafault listenpoint : if the listenpoint is not specified in                #
# send operations, then the default one is used to send the message           #
#                                                                             #
###############################################################################

# Default listen host (IP addresses or DNS name); empty value means to listen 
# type string
listenpoint.LOCAL_HOST =

# Default listen port; empty or zero value means no listen port
# type integer
listenpoint.LOCAL_PORT =

# Flag to listen to UDP transport
# type boolean (true|false)
listenpoint.LISTEN_UDP = true

# Flag to listen to TCP transport
# type boolean (true|false)
listenpoint.LISTEN_TCP = true

# Flag to listen to SCTP transport
# type boolean (true|false)
listenpoint.LISTEN_SCTP = false

# Flag to listen to TLS transport
# type boolean (true|false)
listenpoint.LISTEN_TLS = true

# Flag to listen to TLS transport
# type boolean (true|false)
listenpoint.LISTEN_TLS = true

# Default listen port for TLS transport; empty or zero means listen.LOCAL_PORT + 1
# type integer
listenpoint.LOCAL_PORT_TLS =

# Default transport for sending messages; possible values are : udp, tcp, sctp, tls, rfc
# (where rfc means that transport is chosen using the RFC 3261)
# type enum udp|tcp|rfc|sctp|tls
listenpoint.TRANSPORT = udp

#######################################################

# Time of life the messages and transactions (in s)
# type float
MESSAGE_TIME_LIFE = 35

# Timeout (s) for receive operations
# type float
operations.RECEIVE_TIMEOUT = 35 

#######################################################

# Automatic retransmission management for requests and responses : true/false
# type boolean
retransmit.MANAGEMENT = true


# Retransmission filtering; a retransmission messages is not routed to the right scenario : true/false
# type boolean
retransmit.FILTERING = true

# Retransmission list of timers in seconds
# type list<float>
retransmit.TIMERS = 0.5, 1, 2, 4, 8, 8, 8

#######################################################

# The tool automatically routes a received response to the scenario which has sent the corresponding request.
# The transactionID is used internally to make the corresponding between requests and responses.
# This parameter is used to get the transactionID from the message given a list of paths (separated 
# by ',' character). The paths are defined with the setFromMessage operation and are of course 
# protocol dependant
# type string
route.TRANSACTION_ID = header.CSeq,header.TopmostVia.Parameter.branch

# The tool automatically routes a received request to the scenario given in the 'destScenario' parameter 
# of the sending tag (sendRequestXXX) in the same testcase. In this case, the tool is simulating a 
# client and server at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by 
# the tool and the same requests the tool has received 
# This parameter is used to get the messageID from the message given a list of paths (separated 
# by ',' character). The path are defined with the setFromMessage operation and are protocol of 
# course dependant
# type string
route.MESSAGE_ID = header.To.Address.URI.User,message.type
# route.MESSAGE_ID = header.Route.Address.URI.Parameter.testerid
# route.MESSAGE_ID = header.Route.Parameter.TesterId
# route.MESSAGE_ID = header.To.Address.URI.Parameter.id

# The tool routes a received request to the scenario given by its name. In this case, the tool is 
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message 
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage 
# operation and are of course protocol dependant
# type string
# route.SCENARIO_NAME = message.type
route.SCENARIO_NAME = listenpoint.localPort
# route.SCENARIO_NAME = header.To.Address.URI.User

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled has a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type string
route.RETRANSMISSION_ID = message.messageId,message.transactionId,firstline

# By default, the tool routes a received responses to the scenario which has sent the corresponding 
# request; if this parameter equals to false, then this mechanism is deasctivated and the responses 
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and 
# dispatch the response to the scenario with the same name
# type boolean true|false
route.DEFAULT_RESPONSE = false

###################################################

# Retransmission management (use the transaction of the SIP stack) : true/false
# type boolean
gov.nist.javax.sip.RETRANS_MANAGEMENT = false

# Retransmission timer in milleseconds
# type integer
gov.nist.javax.sip.RETRANS_TIMER = 500


###################################################

# test use only
NB_ITERATION=1000

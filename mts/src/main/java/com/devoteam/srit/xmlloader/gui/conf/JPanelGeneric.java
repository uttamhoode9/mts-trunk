/* 
 * Copyright 2012 Devoteam http://www.devoteam.com
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * 
 * This file is part of Multi-Protocol Test Suite (MTS).
 * 
 * Multi-Protocol Test Suite (MTS) is free software: you can redistribute
 * it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the
 * License.
 * 
 * Multi-Protocol Test Suite (MTS) is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Multi-Protocol Test Suite (MTS).
 * If not, see <http://www.gnu.org/licenses/>.
 * 
 */

package com.devoteam.srit.xmlloader.gui.conf;

import com.devoteam.srit.xmlloader.core.PropertiesEnhanced;
import com.devoteam.srit.xmlloader.core.PropertiesParametersStructure;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author jbor
 */
public abstract class JPanelGeneric extends javax.swing.JPanel implements JPanelConfInterface, DocumentListener, ActionListener{

    protected PropertiesParametersStructure propertiesParameterStructure;
    protected PropertiesParametersStructure newPropertiesParameterStructure;
    private Color defaultColor;

    /** Creates new form JPanelGeneric */
    public JPanelGeneric(PropertiesEnhanced config, String name) {
        initComponents();
        this.propertiesParameterStructure = config.getPropertiesParametersStructure(name);
        this.newPropertiesParameterStructure = propertiesParameterStructure.clone();
        this.defaultColor = this.getBackground();
        
        this.jLabelName.setText(this.propertiesParameterStructure.getName());
        this.jLabelName.setToolTipText(this.propertiesParameterStructure.getName());
        String description = this.propertiesParameterStructure.getDescription();
        this.jTextFieldDescription.setText(this.propertiesParameterStructure.getDescription());
        if (!description.equals("")){
            description = "<html>" + description.replaceAll("\n", "<br/>") + "</html>";
            this.jTextFieldDescription.setToolTipText(description);
        }
        this.jTextFieldDescription.setCaretPosition(0);
    }

    public void init(){
        this.initSpecific();
        this.jPanelSpecific.add(this.getSpecificComponent());
        reset();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelSpecific = new javax.swing.JPanel();
        jLabelName = new javax.swing.JLabel();
        jTextFieldDescription = new javax.swing.JTextField();
        jPanelReloadGloable = new javax.swing.JPanel();
        jButtonGlobale = new javax.swing.JButton();
        jPanelRevert = new javax.swing.JPanel();
        jButtonRevert = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        setAlignmentX(0.0F);

        jPanelSpecific.setLayout(new javax.swing.BoxLayout(jPanelSpecific, javax.swing.BoxLayout.Y_AXIS));

        jLabelName.setText("Name");
        jLabelName.setMaximumSize(new java.awt.Dimension(20, 20));
        jLabelName.setFont(new Font("Tahoma", Font.PLAIN, 12));

        jTextFieldDescription.setEditable(false);
        jTextFieldDescription.setText("Description");
        jTextFieldDescription.setBorder(null);
        jTextFieldDescription.setFocusable(false);

        jPanelReloadGloable.setMaximumSize(new java.awt.Dimension(20, 20));
        jPanelReloadGloable.setMinimumSize(new java.awt.Dimension(20, 20));

        jButtonGlobale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/view-refresh.png"))); // NOI18N
        jButtonGlobale.setToolTipText("Default");
        jButtonGlobale.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonGlobale.setMaximumSize(new java.awt.Dimension(20, 20));
        jButtonGlobale.setMinimumSize(new java.awt.Dimension(20, 20));
        jButtonGlobale.setPreferredSize(new java.awt.Dimension(20, 20));
        jButtonGlobale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGlobaleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelReloadGloableLayout = new javax.swing.GroupLayout(jPanelReloadGloable);
        jPanelReloadGloable.setLayout(jPanelReloadGloableLayout);
        jPanelReloadGloableLayout.setHorizontalGroup(
            jPanelReloadGloableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonGlobale, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
        );
        jPanelReloadGloableLayout.setVerticalGroup(
            jPanelReloadGloableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonGlobale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanelRevert.setMaximumSize(new java.awt.Dimension(20, 20));
        jPanelRevert.setMinimumSize(new java.awt.Dimension(20, 20));
        jPanelRevert.setPreferredSize(new java.awt.Dimension(20, 20));

        jButtonRevert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-undo.png"))); // NOI18N
        jButtonRevert.setToolTipText("Undo");
        jButtonRevert.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonRevert.setMaximumSize(new java.awt.Dimension(20, 20));
        jButtonRevert.setMinimumSize(new java.awt.Dimension(20, 20));
        jButtonRevert.setPreferredSize(new java.awt.Dimension(20, 20));
        jButtonRevert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRevertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRevertLayout = new javax.swing.GroupLayout(jPanelRevert);
        jPanelRevert.setLayout(jPanelRevertLayout);
        jPanelRevertLayout.setHorizontalGroup(
            jPanelRevertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRevertLayout.createSequentialGroup()
                .addComponent(jButtonRevert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelRevertLayout.setVerticalGroup(
            jPanelRevertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonRevert, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelReloadGloable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelRevert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelSpecific, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelSpecific, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
            .addComponent(jPanelReloadGloable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTextFieldDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
            .addComponent(jPanelRevert, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelName, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGlobaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGlobaleActionPerformed
        removeLocaleValue();
        refresh();
    }//GEN-LAST:event_jButtonGlobaleActionPerformed

    private void jButtonRevertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRevertActionPerformed
        reset();
    }//GEN-LAST:event_jButtonRevertActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGlobale;
    private javax.swing.JButton jButtonRevert;
    protected javax.swing.JLabel jLabelName;
    private javax.swing.JPanel jPanelReloadGloable;
    private javax.swing.JPanel jPanelRevert;
    private javax.swing.JPanel jPanelSpecific;
    private javax.swing.JTextField jTextFieldDescription;
    // End of variables declaration//GEN-END:variables


    @Override
    public void insertUpdate(DocumentEvent e) {
        touched();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        touched();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        touched();
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        touched();
    }
    public String getDescription(){
        return this.propertiesParameterStructure.getDescription();
    }  
    public boolean getRestart(){
        return this.propertiesParameterStructure.getRestart();
    }
    public boolean hasLocale(){
        return newPropertiesParameterStructure.getLocaleValue() != null;
    }

    public boolean hasGlobale(){
        return newPropertiesParameterStructure.getDefaultValue() != null;
    }

    @Override
    public void setBackground(Color c){
        super.setBackground(c);
        if (this.jPanelRevert != null){
            this.jPanelRevert.setBackground(c);
        }
        if(null != jTextFieldDescription){
            jTextFieldDescription.setBackground(c);
        }
    }

    public void removeLocaleValue(){
        newPropertiesParameterStructure.setLocaleValue(null);
    }
   
    public boolean isModified(){
        String oldLocale = this.propertiesParameterStructure.getLocaleValue();
        String newLocale = this.newPropertiesParameterStructure.getLocaleValue();
        boolean value;
        if(null == oldLocale && null == newLocale){
            value = false;
        }
        else if (null != oldLocale && null == newLocale){
            value = true;
        }
        else if (null == oldLocale && null != newLocale){
            value = true;
        }
        else if(!oldLocale.equals(newLocale)){
            value = true;
        }
        else{
            value = false;
        }
        return value;
    }

    public void reset(){
        this.resetSpecific();
    }

    public void refresh(){
        this.refreshSpecific();

        //modification du petit bouton de "reload global"
        if(hasGlobale()){
            this.jButtonGlobale.setEnabled(true);
        }
        else{
            this.jButtonGlobale.setEnabled(false);
        }        

        if(hasLocale()){            
            setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
            this.jButtonGlobale.setVisible(true);
        }
        else{
            //modification de la marge pour que le panel reste aligne avec les autres meme si on ajoute le bouton
            setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 22, 2, 2));
            this.jButtonGlobale.setVisible(false);
        }

        //modification du petit bouton
        if(isModified()){
            this.jButtonRevert.setVisible(true);
            this.jButtonRevert.setEnabled(true);
        }
        else{
            this.jButtonRevert.setVisible(false);
            this.jButtonRevert.setEnabled(false);
        }

        //recuperation de la jframeconf
        Component component = this;
        while(null != component && !(component instanceof JFrameConf)){
            component = component.getParent();
        }

        //modification de la couleur du champ
        if(isModified()){
//            this.setBackground(Color.red);
            Color red = new Color(255, 80, 65);
            this.setBackground(red);
        }
        else{
            if(null != component){
                JFrameConf jFrameConf = (JFrameConf) component;
                int i = jFrameConf.getJPanelContainer().getListOfGeneric().indexOf(this);
                if (i%2 != 0){
                    this.setBackground(this.defaultColor);
                }
                else{
                    this.setBackground(this.defaultColor.brighter());
                }
            }
        }
        
        //modification de l'etat des boutons generaux
        if (isModified()){
            if(null != component){
                JFrameConf jFrameConf = (JFrameConf) component;
                jFrameConf.setApplyEnable(true);
                jFrameConf.setUndoAllEnable(true);
            }   
        }
        else{
            if(null != component){
                JFrameConf jFrameConf = (JFrameConf) component;
                jFrameConf.setApplyEnable(false);
                jFrameConf.setUndoAllEnable(false);
            }
        }        
    }

    public void touched(){
        this.touchedSpecific();        
    }

    abstract public void touchedSpecific();

    abstract public void refreshSpecific();

    abstract public void initSpecific();

    abstract public void resetSpecific();
      
    abstract public Component getSpecificComponent();

    abstract public boolean isDisplayedValueTheInitOne();
}
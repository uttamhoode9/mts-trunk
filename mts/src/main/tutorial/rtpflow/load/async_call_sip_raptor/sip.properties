# Default listen host (IP addresses or DNS name); empty value means to listen
# [string] 
listenpoint.LOCAL_HOST = 

# Default listen port; empty or zero value means no listen port
# [integer] 
listenpoint.LOCAL_PORT = 7070

# Flag to listen to UDP transport
# [boolean] 
listenpoint.LISTEN_UDP = true

# Flag to listen to TCP transport
# [boolean] 
listenpoint.LISTEN_TCP = true

# Flag to listen to SCTP transport
# [boolean] 
listenpoint.LISTEN_SCTP = false

# Flag to listen to TLS transport
# [boolean] 
listenpoint.LISTEN_TLS = true

# Default listen port for TLS transport; empty or zero means listen.LOCAL_PORT + 1
# [integer] 
listenpoint.LOCAL_PORT_TLS = 

# Default transport for sending messages; possible values are : udp, tcp, sctp, tls, rfc
# (where rfc means that transport is chosen using the RFC 3261)
# [enumeration] udp|tcp|rfc|sctp|tls 
listenpoint.TRANSPORT = udp

# Time (in seconds) of life the messages and transactions and retransmission objects
# [float] 
MESSAGE_TIME_LIFE = 35

# Time (in seconds) of life the session objects
# [float] 
SESSION_TIME_LIFE = 400

# Timeout duration (in seconds) for the receive operations
# [float] 
operations.RECEIVE_TIMEOUT = 35

# Flag to activate the automatic retransmission sending for messages
# if true then a retransmission messages are sent
# [boolean] 
retransmit.MANAGEMENT = true

# Flag to activate the retransmission filtering on messages receipt; 
# if true then a retransmission messages are not routed to the scenario
# they are ignored
# [boolean] 
retransmit.FILTERING = true

# Retransmission list of timers in seconds
# type list<float>
# [string] 
retransmit.TIMERS = 0.5, 1, 2, 4, 8, 8, 8

# The transactionID is used internally to make the corresponding between requests and responses.
# The tool uses transaction for internal routing : it automatically routes a received response 
# to the scenario which has sent the corresponding request.
# This parameter is used to get the transactionID from the message given a list of paths (separated 
# by ',' character). The paths are defined with the setFromMessage operation and are of course 
# protocol dependant
# type list<string> (list of path keywords)
# [string] 
route.TRANSACTION_ID = header.CSeq,header.TopmostVia.Parameter.branch

# The tool automatically routes a received request to the scenario given in the "destScenario" parameter 
# of the send operation in the same testcase. In this case, the tool is simulating a client and server 
# at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by 
# the tool and the same requests the tool has received 
# This parameter is used to get the messageID from the message given a list of paths (separated 
# by ',' character). The path are defined with the setFromMessage operation and are protocol of 
# course dependant
# type list<string> (list of path keywords)
# [string] 
route.MESSAGE_ID = header.To.Address.URI.User,message.type

# The tool routes a received request to the scenario given by its name. In this case, the tool is 
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message 
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage 
# operation and are of course protocol dependant
# type list<string> (list of path keywords)
# [string] 
route.SCENARIO_NAME = listenpoint.localPort

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled as a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type list<string> (list of path keywords)
# [string] 
route.RETRANSMISSION_ID = message.transactionId,message.transactionId,firstline

# By default, the tool routes a received responses to the scenario which has sent the corresponding 
# request; if this parameter equals to false, then this mechanism is deasctivated and the responses 
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and 
# dispatch the response to the scenario with the same name
# [boolean] 
route.DEFAULT_RESPONSE = false

# test use only
# [string] 
NB_ITERATION = 1000

# Retransmission management (use the transaction of the SIP stack) : true/false
# type boolean
# [string] 
gov.nist.javax.sip.RETRANS_MANAGEMENT = false

# Retransmission timer in milleseconds
# type integer
# [string] 
gov.nist.javax.sip.RETRANS_TIMER = 500


<?xml version="1.0" encoding="UTF-8"?>

<!-- scenario server-->
<scenario>

    <!-- attend message USER-->
    <receiveMessagePOP request="true" type="USER">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[arg]" operation="protocol.setFromMessage" value="request.arguments" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <test parameter="[command]" condition="string.equals" value="USER"/>
    </receiveMessagePOP>
    
    <!-- envoi reponse USER-->
    <sendMessagePOP name="Send USER" transactionId="[transactionId]">
<![CDATA[
+OK [arg] is a real hoopy frood
]]>
    </sendMessagePOP>
    
    <!-- attend message PASS-->
    <receiveMessagePOP request="true" type="PASS">
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
    </receiveMessagePOP>

    <!-- envoi reponse PASS-->
    <sendMessagePOP name="Send PASS" transactionId="[transactionId]">
<![CDATA[
-ERR maildrop already locked
]]>
    </sendMessagePOP>

    <!-- attend message USER-->
    <receiveMessagePOP request="true" type="USER">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[argument]" operation="protocol.setFromMessage" value="request.arguments" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <test parameter="[command]" condition="string.equals" value="USER"/>
    </receiveMessagePOP>
    
    <!-- envoi reponse USER-->
    <sendMessagePOP name="Send USER" transactionId="[transactionId]">
<![CDATA[
+OK [arg] is a real hoopy frood
]]>
    </sendMessagePOP>
    
    <!-- attend message PASS-->
    <receiveMessagePOP request="true" type="PASS">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <test parameter="[command]" condition="string.equals" value="PASS"/>
    </receiveMessagePOP>

    <!-- envoi reponse PASS-->
    <sendMessagePOP name="Send PASS" transactionId="[transactionId]">
<![CDATA[
+OK [arg]'s maildrop has 2 messages (320 octets)
]]>
    </sendMessagePOP>

    <!-- attend message NOOP-->
    <receiveMessagePOP request="true" type="NOOP">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <!--test parameter="[command]" condition="string.equals" value="NOOP"/-->
    </receiveMessagePOP>

    <!-- envoi reponse NOOP-->
    <sendMessagePOP name="Send NOOP response" transactionId="[transactionId]">
<![CDATA[
+OK dewey POP server signing off
]]>
    </sendMessagePOP>

    <!-- attend message STAT-->
    <receiveMessagePOP request="true" type="STAT">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <test parameter="[command]" condition="string.equals" value="STAT"/>
    </receiveMessagePOP>

    <!-- envoi reponse STAT-->
    <sendMessagePOP name="Send STAT response" transactionId="[transactionId]">
<![CDATA[
+OK 2 320
]]>
    </sendMessagePOP>

    <!-- attend message LIST-->
    <receiveMessagePOP request="true" type="LIST">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <test parameter="[command]" condition="string.equals" value="LIST"/>
    </receiveMessagePOP>

    <!-- envoi reponse LIST-->
    <sendMessagePOP name="Send LIST response" transactionId="[transactionId]">
<![CDATA[
-ERR no such message, only 2 messages in maildrop
]]>
    </sendMessagePOP>

    <!-- attend message LIST-->
    <receiveMessagePOP request="true" type="LIST">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <test parameter="[command]" condition="string.equals" value="LIST"/>
    </receiveMessagePOP>

    <!-- envoi reponse LIST-->
    <sendMessagePOP name="Send LIST response" transactionId="[transactionId]">
<![CDATA[
+OK 2 messages (320 octets)
1 120
2 200
]]>
    </sendMessagePOP>

    <!-- attend message TOP-->
    <!--receiveMessagePOP request="true" type="TOP">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <test parameter="[command]" condition="string.equals" value="TOP"/>
    </receiveMessagePOP-->

    <!-- envoi reponse LIST-->
    <!--sendMessagePOP name="Send TOP response" transactionId="[transactionId]">
<![CDATA[
+OK 2 messages (320 octets)
1 120
2 200
]]>
    </sendMessagePOP-->
    
    <!-- attend message RETR-->
    <receiveMessagePOP request="true" type="RETR">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <test parameter="[command]" condition="string.equals" value="RETR"/>
    </receiveMessagePOP>

    <!-- envoi reponse RETR-->
    <sendMessagePOP name="Send RETR response" transactionId="[transactionId]">
<![CDATA[
+OK 120 octets
......
.
]]>
    </sendMessagePOP>

    <!-- attend message QUIT-->
    <receiveMessagePOP request="true">
        <parameter name="[command]" operation="protocol.setFromMessage" value="request.command" />
        <parameter name="[transactionId]" operation="protocol.setFromMessage" value="message.transactionId" />
        <test parameter="[command]" condition="string.equals" value="QUIT"/>
    </receiveMessagePOP>

    <!-- envoi reponse QUIT-->
    <sendMessagePOP name="Send QUIT response" transactionId="[transactionId]">
<![CDATA[
+OK dewey POP server signing off
]]>
    </sendMessagePOP>
    
    <finally>
        <closeChannelPOP name="[connection]"/>
    </finally>

</scenario>

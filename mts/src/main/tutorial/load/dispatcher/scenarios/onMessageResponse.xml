
<scenario>
    <parameter name="[item]" operation="list.dequeue" value="[testcaseName]" value2="[queueTimeout]" />

    <if>
        <condition>
            <test parameter="[item]" condition="list.isEmpty" />
        </condition>
        <then>
            <exit failed="false" />
        </then>
    </if>
    
<!-- (specific) : do your job with [item]  -->
    <!-- get the initial invite -->
    <parameter name="[lastToUser]" operation="protocol.setFromMessage" value="header.To.Address.Uri.User" value2="[item]" />
    <try>
        <finally>
            <parameter name="[test:contextMutex]" operation="system.semaphorewait" value2="0" />
            
            <parameter name="[contextId]" value="[test:[lastToUser]_invite_contextId]" />
            <parameter name="[item]" value="[test:context_[contextId]_lastReceivedInvite]" />
            
            <parameter name="[test:contextMutex]" operation="system.semaphorenotify" />
        </finally>
    </try>
    
    
    
    <!-- send 200 OK for INVITE -->
    <parameter name="[To]" operation="protocol.setFromMessage" value="header.To" value2="[item]" />
    <parameter name="[ToUser]" operation="protocol.setFromMessage" value="header.To.Address.Uri.User" value2="[item]" />
    <parameter name="[From]" operation="protocol.setFromMessage" value="header.From" value2="[item]" />
    <parameter name="[CallId]" operation="protocol.setFromMessage" value="header.Call-ID" value2="[item]" />
    <parameter name="[CSeq]" operation="protocol.setFromMessage" value="header.CSeq" value2="[item]" />
    <parameter name="[localTag]" operation="number.uid" />
    <parameter name="[Via]" operation="protocol.setFromMessage" value="header.Via" value2="[item]" />
    <parameter name="[lastRecord-Route]" operation="protocol.setFromMessage" value="header.Record-Route" value2="[item]" />
    <parameter name="[listenpoint]" operation="protocol.setFromMessage" value="listenpoint.name" value2="[item]" />

    <parameter name="[Port-Tester]" operation="protocol.setFromMessage" value="listenpoint.localPort" value2="[item]" />
    
    <sendMessageSIP listenpoint="[listenpoint]" remoteHost="[Host-Server]" remotePort="[Port-Server]" delay="[RingingDuration]">
<![CDATA[SIP/2.0 200 OK
To: [To];tag=[localTag]
From: [From]
Call-ID: [CallId]
Via: [Via]
Record-Route: [lastRecord-Route]
CSeq: [CSeq]
Contact: <sip:[ToUser]@[Host-Tester]:[Port-Tester]>
Content-Type: application/sdp
Content-Length: auto

v=0
o=[lastToUser] 8 2 IN IP4 [Host-Tester_called]
s=CounterPath X-Lite 3.0
c=IN IP4 [Host-Tester_called]
t=0 0
m=audio 6666 RTP/AVP 0 8 101
a=alt:1 1 : u/3OLkFR kRrJT9km [Host-Tester_called] [portRTP]
a=fmtp:101 0-15
a=rtpmap:101 telephone-event/8000
a=sendrecv
]]>
    </sendMessageSIP>    
    
    
<!-- (specific) : end  -->
</scenario>
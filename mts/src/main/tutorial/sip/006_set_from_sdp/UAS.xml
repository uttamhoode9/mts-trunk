<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>

  <receiveMessageSIP name="Wait INVITE" request="true" type="INVITE">
    <parameter name="[To]" operation="protocol.setFromMessage" value="header.To"/>   
    <parameter name="[From]" operation="protocol.setFromMessage" value="header.From"/>       
    <parameter name="[CallId]" operation="protocol.setFromMessage" value="header.Call-ID"/>
    <parameter name="[Cseq]" operation="protocol.setFromMessage" value="header.CSeq"/>
    <parameter name="[Via]" operation="protocol.setFromMessage" value="header.Via"/>
    <parameter name="[Contact]" operation="protocol.setFromMessage" value="header.Contact"/>
    <parameter name="[localTag]" operation="string.random" value="10"/>
  </receiveMessageSIP>

    <!-- test content(N):xxxxx -->
    <parameter name="[SDP0]" operation="protocol.setFromMessage" value="content(0)"/>
    <test parameter="[SDP0]" condition="string.contains" value="s=SDP Seminar"/>
    <parameter name="[SDP1]" operation="protocol.setFromMessage" value="content(1)"/>
    <test parameter="[SDP1]" condition="string.contains" value="Content-Disposition: recipient-list"/>
    <parameter name="[SDPType0]" operation="protocol.setFromMessage" value="content(0).Type"/>
    <test parameter="[SDPType0]" condition="string.equals" value="Content-Type: application/sdp"/>
    <parameter name="[SDPType1]" operation="protocol.setFromMessage" value="content(1).Type"/>
    <test parameter="[SDPType1]" condition="string.equals" value="Content-Type: application/resource-lists+xml"/>
    <parameter name="[SDPSDP0]" operation="protocol.setFromMessage" value="content(0).Sdp"/>
    <test parameter="[SDPSDP0]" condition="string.contains" value="t=3034423619 3042462419"/>
    <parameter name="[SDPSDP1]" operation="protocol.setFromMessage" value="content(1).Sdp"/>
    <test parameter="[SDPSDP1]" condition="string.contains" value="resource-lists"/>

    <!-- test content(N):Sdp:Version:xxx -->
    <parameter name="[SDPVersion0]" operation="protocol.setFromMessage" value="content(0).Sdp.Version"/>
    <test parameter="[SDPVersion0]" condition="string.equals" value="0"/>

    <!-- test content(N):Sdp:Origin:xxx -->
    <parameter name="[SDPOrigin0]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin"/>
    <test parameter="[SDPOrigin0]" condition="string.contains" value="mhandley 2890844526 2890842807 IN IP4 126.16.64.4"/>
    <parameter name="[SDPOriginAddress]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.Address"/>
    <test parameter="[SDPOriginAddress]" condition="string.equals" value="126.16.64.4"/>
    <parameter name="[SDPOriginAddressType]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.AddressType"/>
    <test parameter="[SDPOriginAddressType]" condition="string.equals" value="IP4"/>
    <parameter name="[SDPOriginSessionVersion0]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.SessionVersion"/>
    <test parameter="[SDPOriginSessionVersion0]" condition="string.equals" value="2890842807"/>
    <parameter name="[SDPOriginSessionId0]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.SessionId"/>
    <test parameter="[SDPOriginSessionId0]" condition="string.equals" value="2890844526"/>
    <parameter name="[SDPOriginNetworkType]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.NetworkType"/>
    <test parameter="[SDPOriginNetworkType]" condition="string.equals" value="IN"/>
    <parameter name="[SDPOriginAddress]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.Address"/>
    <test parameter="[SDPOriginAddress]" condition="string.equals" value="126.16.64.4"/>
    <parameter name="[SDPOriginUserName0]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.UserName"/>
    <test parameter="[SDPOriginUserName0]" condition="string.equals" value="mhandley"/>

    <!-- test content(N):Sdp:Email:xxx -->
    <parameter name="[SDPEmail0]" operation="protocol.setFromMessage" value="content(0).Sdp.Email"/>
    <test parameter="[SDPEmail0]" condition="string.contains" value="mjh@isi.edu"/>

    <!-- test content(N):Sdp:Connection:xxx -->
    <parameter name="[SDPConnection0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection"/>
    <test parameter="[SDPConnection0]" condition="string.contains" value="IN IP4 224.2.17.12/127"/>
    <parameter name="[SDPConnectionAddress0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection.Address"/>
    <test parameter="[SDPConnectionAddress0]" condition="string.equals" value="224.2.17.12"/>
    <parameter name="[SDPConnectionAddressType0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection.AddressType"/>
    <test parameter="[SDPConnectionAddressType0]" condition="string.equals" value="IP4"/>
    <parameter name="[SDPConnectionNetworkType0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection.NetworkType"/>
    <test parameter="[SDPConnectionNetworkType0]" condition="string.equals" value="IN"/>

    <!-- if parser failed then use the following to retrieve the connection.address -->
    <parameter name="[content0]" operation="protocol.setFromMessage" value="content(0)"/>
    <parameter name="[connection]" operation="string.regexmatches" value="[content0]" value2="c=[^\r\n]*"/>
    <parameter name="[connection]" operation="string.split" value="[connection(0)]" value2=" "/>
    <parameter name="[connection]" operation="list.set" value="[connection(2)]"/>
    <parameter name="[connection]" operation="string.regexmatches" value="[connection]" value2="[\.\d]+"/>
    <parameter name="[connectionAddress]" operation="list.set" value="[connection(0)]"/>
    <test parameter="[connectionAddress]" condition="string.equals" value="224.2.17.12"/>

    <!-- test content(N):Sdp:Information:xxx -->
    <parameter name="[SDPInformation0]" operation="protocol.setFromMessage" value="content(0).Sdp.Information"/>
    <test parameter="[SDPInformation0]" condition="string.contains" value="A Seminar on the session description protocol"/>

    <!-- test content(N):Sdp:Uri:xxx -->
    <parameter name="[SDPUri0]" operation="protocol.setFromMessage" value="content(0).Sdp.Uri"/>
    <test parameter="[SDPUri0]" condition="string.contains" value="http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps"/>

    <!-- test content(N):Sdp:Media:xxx -->
    <parameter name="[SDPMedia0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media"/>
    <test parameter="[SDPMedia0(0)]" condition="string.contains" value="49232/2 RTP/AVP 98"/>
    <test parameter="[SDPMedia0(1)]" condition="string.contains" value="49230/3 RTP/AVP 96"/>
    <parameter name="[SDPMediaInformation0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Information"/>
    <test parameter="[SDPMediaInformation0(0)]" condition="string.equals" value="mavideo"/>
    <test parameter="[SDPMediaInformation0(1)]" condition="string.equals" value="monaudio"/>
    <parameter name="[SDPMediaAttribute0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Attribut"/>
    <test parameter="[SDPMediaAttribute0(0)]" condition="string.contains" value="a=rtpmap:97 amr/8000/1"/>
    <test parameter="[SDPMediaAttribute0(1)]" condition="string.contains" value="a=fmtp:97 mode-set=1;octet-align=1;crc=0"/>
    <test parameter="[SDPMediaAttribute0(2)]" condition="string.contains" value="a=rtpmap:96 L8/8000"/>
    <parameter name="[SDPMediaAttributeRTPMAPValue0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Attribut.rtpmap"/>
    <test parameter="[SDPMediaAttributeRTPMAPValue0(0)]" condition="string.equals" value="97 amr/8000/1"/>
    <test parameter="[SDPMediaAttributeRTPMAPValue0(1)]" condition="string.equals" value="96 L8/8000"/>
    <parameter name="[SDPMediaAttributeFMTPValue0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Attribut.fmtp"/>
    <test parameter="[SDPMediaAttributeFMTPValue0(0)]" condition="string.contains" value="97 mode-set=1;octet-align=1;crc=0"/>
    <parameter name="[SDPMediaPort0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Port"/>
    <test parameter="[SDPMediaPort0(0)]" condition="string.equals" value="49232"/>
    <test parameter="[SDPMediaPort0(1)]" condition="string.equals" value="49230"/>
    <parameter name="[SDPMediaProtocol0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Protocol"/>
    <test parameter="[SDPMediaProtocol0(0)]" condition="string.equals" value="RTP/AVP"/>
    <test parameter="[SDPMediaProtocol0(1)]" condition="string.equals" value="RTP/AVP"/>
    <parameter name="[SDPMediaFormat0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Format"/>
    <test parameter="[SDPMediaFormat0(0)]" condition="string.equals" value="98"/>
    <test parameter="[SDPMediaFormat0(1)]" condition="string.equals" value="96"/>
    <parameter name="[SDPMediaPortCount0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.PortCount"/>
    <test parameter="[SDPMediaPortCount0(0)]" condition="string.equals" value="2"/>
    <test parameter="[SDPMediaPortCount0(1)]" condition="string.equals" value="3"/>
    <parameter name="[SDPMediaType0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Type"/>
    <test parameter="[SDPMediaType0(0)]" condition="string.equals" value="video"/>
    <test parameter="[SDPMediaType0(1)]" condition="string.equals" value="audio"/>
    <parameter name="[SDPMediaBandWidth]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.BandWidth"/>
    <test parameter="[SDPMediaBandWidth(0)]" condition="string.contains" value="b=SA:256"/>
    <test parameter="[SDPMediaBandWidth(1)]" condition="string.contains" value="b=CT:128"/>
    <parameter name="[SDPMediaBandWidthType]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.BandWidth.Type"/>
    <test parameter="[SDPMediaBandWidthType(0)]" condition="string.equals" value="SA"/>
    <test parameter="[SDPMediaBandWidthType(1)]" condition="string.equals" value="CT"/>
    <parameter name="[SDPMediaBandWidthValue]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.BandWidth.Value"/>
    <test parameter="[SDPMediaBandWidthValue(0)]" condition="string.equals" value="256"/>
    <test parameter="[SDPMediaBandWidthValue(1)]" condition="string.equals" value="128"/>

    <!-- if parser failed then use the following to retrieve the connection.address -->
    <parameter name="[media]" operation="string.regexmatches" value="[content0]" value2 ="m=[^\r\n]*"/>
    <parameter name="[media]" operation="string.regexmatches" value="[media]" value2="m=[^ ]* [^ ]*"/>
    <parameter name="[media]" operation="string.regexmatches" value="[media]" value2=" [\d]*"/>
    <parameter name="[media]" operation="string.regexmatches" value="[media]" value2="[\d]+"/>
    <parameter name="[mediaPort]" operation="string.split" value="[media]" value2=" "/>
    <test parameter="[mediaPort(0)]" condition="string.equals" value="49232"/>
    <test parameter="[mediaPort(1)]" condition="string.equals" value="49230"/>

    <!-- test content(N):Sdp:SessionName:xxx -->
    <parameter name="[SDPSessionName]" operation="protocol.setFromMessage" value="content(0).Sdp.SessionName"/>
    <test parameter="[SDPSessionName]" condition="string.contains" value="SDP Seminar"/>

    <!-- test content(N):Sdp:Time:xxx -->
    <parameter name="[SDPTime]" operation="protocol.setFromMessage" value="content(0).Sdp.Time"/>
    <test parameter="[SDPTime]" condition="string.contains" value="t=3034423619 3042462419"/>
    <parameter name="[SDPTimeStart]" operation="protocol.setFromMessage" value="content(0).Sdp.Time.Start"/>
    <!--test parameter="[SDPTimeStart]" condition="string.equals" value="2873397496"/-->
    <parameter name="[SDPTimeStop]" operation="protocol.setFromMessage" value="content(0).Sdp.Time.Stop"/>
    <!--test parameter="[SDPTimeStop]" condition="string.equals" value="2873404696"/-->

    <!-- test content(N):Sdp:BandWidth:xxx -->
    <parameter name="[SDPBandWidth]" operation="protocol.setFromMessage" value="content(0).Sdp.BandWidth"/>
    <test parameter="[SDPBandWidth]" condition="string.contains" value="b=CT:128"/>
    <parameter name="[SDPBandWidthType]" operation="protocol.setFromMessage" value="content(0).Sdp.BandWidth.Type"/>
    <test parameter="[SDPBandWidthType]" condition="string.equals" value="CT"/>
    <parameter name="[SDPBandWidthValue]" operation="protocol.setFromMessage" value="content(0).Sdp.BandWidth.Value"/>
    <test parameter="[SDPBandWidthValue]" condition="string.equals" value="128"/>

    <!-- test content(N):Sdp:Attribut:xxx -->
    <parameter name="[SDPAttribute0]" operation="protocol.setFromMessage" value="content(0).Sdp.Attribut"/>
    <test parameter="[SDPAttribute0(0)]" condition="string.contains" value="a=type:H332"/>
    <test parameter="[SDPAttribute0(1)]" condition="string.contains" value="a=recvonly:20"/>
    <parameter name="[SDPAttributeRecvonly0]" operation="protocol.setFromMessage" value="content(0).Sdp.Attribut.recvonly"/>
    <test parameter="[SDPAttributeRecvonly0]" condition="string.equals" value="20"/>

    <!-- errors occured with the following operations on the SDP jar caused by classes TimeZoneAdjustment, RepeatTime and MediaDescription-->
    <!--parameter name="[SDPMediaMimeParameters0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.MimeParameters"/-->
    <!--parameter name="[SDPMediaMimeTypes0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.MimeTypes"/-->

    <!-- test content(N):Sdp:ZoneAdjustment:xxx -->
    <!--parameter name="[SDPZoneAdjustment]" operation="protocol.setFromMessage" value="content(0).Sdp.ZoneAdjustment"/-->

    <!-- test content(N):Sdp:RepeatTime:xxx -->
    <!--parameter name="[SDPRepeatTime]" operation="protocol.setFromMessage" value="content(0).Sdp.RepeatTime"/-->
    <!--parameter name="[SDPRepeatTimeDuration]" operation="protocol.setFromMessage" value="content(0).Sdp.RepeatTime.Duration"/-->
    <!--parameter name="[SDPRepeatTimeInterval]" operation="protocol.setFromMessage" value="content(0).Sdp.RepeatTime.Duration.Interval"/-->
    <!--parameter name="[SDPRepeatTimeOffset]" operation="protocol.setFromMessage" value="content(0).Sdp.RepeatTime.Duration.Offset"/-->

    <!-- test content(N):xml:xpath:xxx -->
    <parameter name="[XMLlistRef]" operation="set">
<![CDATA[<list>
<entry uri="bob"/>
</list>]]></parameter>
    <parameter name="[XMLList]" operation="protocol.setFromMessage" value="content(1).XML.xpath./resource-lists/list"/>
    <test parameter="[XMLList]" condition="string.equals" value="[XMLlistRef]"/>
    <parameter name="[XMLEntryURI]" operation="protocol.setFromMessage" value="content(1).xml.XPATH.//list/entry/@uri"/>
    <test parameter="[XMLEntryURI]" condition="string.equals" value="bob"/>

   <sendMessageSIP name="Send 100 Trying">
<![CDATA[SIP/2.0 100 Trying
To: [To];tag=[localTag]
From: [From]
Call-ID: [CallId]
CSeq: [Cseq]
Contact: <sip:alice@[Adresse-Tester]>
Via: [Via]
User-Agent: XmlLoader
Content-Length: 0]]>
  </sendMessageSIP>  

  <sendMessageSIP name="Send 180 Ringing">
<![CDATA[SIP/2.0 180 Ringing
To: [To];tag=[localTag]
From: [From]
Call-ID: [CallId]
CSeq: [Cseq]
Contact: [To]
Via: [Via]
User-Agent: XmlLoader
Content-Length: 0]]>
  </sendMessageSIP>  
 
  <sendMessageSIP name="Send 200 OK">
<!--******************* BEGIN MESSAGE ********************-->
<![CDATA[SIP/2.0 200 OK
To: [To];tag=[localTag]
From: [From]
Call-ID:[CallId]
CSeq: [Cseq]
Contact: [To]
Via: [Via]
User-Agent: XmlLoader
Content-Length: x

v=0
o=mhandley 2890844526 2890842807 IN IP4 126.16.64.4
s=SDP Seminar
i=A Seminar on the session description protocol
u=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps
e=mjh@isi.edu (Mark Handley)
c=IN IP4 224.2.17.12/127
t=3034423619 3042462419
a=type:H332
a=recvonly:20
b=CT:128
m=video 49232/2 RTP/AVP 98
i=mavideo
a=rtpmap:97 amr/8000/1
a=fmtp:97 mode-set=1;octet-align=1;crc=0
b=SA:256
c=IN IP4 224.2.17.12/127
m=audio 49230/3 RTP/AVP 96
i=monaudio
a=rtpmap:96 L8/8000
b=CT:128
c=IN IP4 224.2.17.12/127
]]>
<!--******************** END MESSAGE *********************-->
  </sendMessageSIP>

  <receiveMessageSIP name="Wait ack" request="true" type="ACK">
  </receiveMessageSIP>

  <receiveMessageSIP name="Wait BYE" request="true" type="BYE">        
    <parameter name="[To]" operation="protocol.setFromMessage" value="header.To"/>
    <parameter name="[From]" operation="protocol.setFromMessage" value="header.From"/>
    <parameter name="[Via]" operation="protocol.setFromMessage" value="header.Via"/> 
    <parameter name="[Cseq]" operation="protocol.setFromMessage" value="header.CSeq"/>
    <parameter name="[Content]" operation="protocol.setFromMessage" value="content"/>
  </receiveMessageSIP>

  <test parameter="[Content]" condition="list.isEmpty"/>

  <sendMessageSIP name="Send 200 OK">
<!--******************* BEGIN MESSAGE ********************-->
<![CDATA[SIP/2.0 200 OK
To: [To]
From: [From]
Call-ID: [CallId]
CSeq: [Cseq]
Via: [Via]
User-Agent: XmlLoader
Content-Length: 0

]]>
<!--******************** END MESSAGE *********************-->
  </sendMessageSIP>

</scenario>

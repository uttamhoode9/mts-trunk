<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>

    <function name="build_Authorization_Header">
        <input>
            <parameter name="[function:msg]" type="string"/>     
            <parameter name="[function:userName]" type="string"/>
            <parameter name="[function:uri]" type="string"/>       
            <parameter name="[function:password]" type="string"/>
            
        </input>

        <do>
        
            <parameter name="[lastCSeqMethod]" operation="protocol.setFromMessage" value="header.CSeq.method" value2="[msg]"/>
            <parameter name="[lastAuthRealm]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.realm" value2="[msg]"/>									
        		<parameter name="[lastAuthNonce]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.nonce" value2="[msg]"/>					
		        <parameter name="[lastAuthQop]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.qop" value2="[msg]"/>
            <parameter name="[lastOpaque]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.opaque" value2="[msg]"/>
            <parameter name="[lastStale]" operation="protocol.setFromMessage" value="header.WWW-Authenticate.Attribute.stale" value2="[msg]"/>

            <parameter name="[newNonceCount]" operation="set" value="00000001"/>
            <parameter name="[newCnonce]" operation="binary.random" value="4"/>
            <call name="calcul_digest_MD5" >
                <input>
                    <parameter name="[function:realm]" value="[lastAuthRealm]"/>
                    <parameter name="[function:userName]" value="[userName]"/>
                    <parameter name="[function:password]" value="[password]"/>
                		<parameter name="[function:method]" value="[lastCSeqMethod]"/>
                		<parameter name="[function:uri]" value="[uri]"/>
                    
                    <parameter name="[function:nonce]" value="[lastAuthNonce]"/>
                    <parameter name="[function:qop]" value="[lastAuthQop]"/>
                    <parameter name="[function:nonceCount]" value="[newNonceCount]" />
                    <parameter name="[function:cnonce]" value="[newCnonce]" />
                </input>
                <output>
                    <parameter name="[response]" value="[function:res]"/>
                </output>
            </call>    

            <parameter name="[authorization]" value="Digest"/>
            <parameter name="[authorization]" value="[authorization] username=&quot;[userName]&quot;"/>
            <parameter name="[authorization]" value="[authorization], realm=&quot;[lastAuthRealm]&quot;"/>
            <parameter name="[authorization]" value="[authorization], uri=&quot;[uri]&quot;"/>
            <parameter name="[authorization]" value="[authorization], nonce=&quot;[lastAuthNonce]&quot;"/>
            <parameter name="[authorization]" value="[authorization], response=&quot;[response]&quot;"/>
            <if>
              <condition>
                <test parameter="[lastOpaque]" condition="isEmpty" not="true"/>
              </condition>
              <then>
                <parameter name="[authorization]" value="[authorization], qop=&quot;[lastAuthQop]&quot;"/>  
                <parameter name="[authorization]" value="[authorization], nc=[newNonceCount]"/>
                <parameter name="[authorization]" value="[authorization], cnonce=&quot;[newCnonce]&quot;"/>
              </then>
            </if>          
            <if>
              <condition>
                <test parameter="[lastOpaque]" condition="isEmpty" not="true"/>
              </condition>
              <then>
                <parameter name="[authorization]" value="[authorization], opaque=&quot;[lastOpaque]&quot;"/>
              </then>
            </if>
            <if>
              <condition>
                <test parameter="[lastStale]" condition="isEmpty" not="true"/>
              </condition>
              <then>
                <parameter name="[authorization]" value="[authorization], stale=[lastStale]"/>
              </then>
            </if>
        </do>

        <output>
            <parameter name="[function:authorization]"/>
        </output>        
        
    </function>


    <parameter name="[testcase:URI]" operation="set" value="sip:[domainName]" />	
	  <parameter name="[localTag]" operation="string.random" value="10"/>
	  <parameter name="[newCallId]" operation="number.random" value="10000000"/>
	  <parameter name="[newCseq]" operation="number.random" value="10000000"/>
  	<parameter name="[MaxForwards]" operation="set" value="70"/>
  	<parameter name="[newBranchId]" operation="string.random" value="10"/>

	<sendMessageSIP name="Send REGISTER" destScenario="bob" 
                  remoteHost="[remoteHostSIP]" remotePort="[remotePortSIP]">
<![CDATA[REGISTER sip:[domainName] SIP/2.0
To: "[userName]" <sip:[userName]@[domainName]>
From: "[userName]" <sip:[userName]@[domainName]>;tag=[localTag]
Call-ID:[newCallId]
CSeq: [newCseq] REGISTER
Via: SIP/2.0/[transportResponse] [localSIP];branch=z9hG4bK[newBranchId]
Max-Forwards: [MaxForwards]
Contact: <sip:[userName]@[localSIP]>
Expires: 3600
Content-Length: 0]]>
        </sendMessageSIP>

	<receiveMessageSIP name="receive REGISTER response" request="false" type="REGISTER">
		<parameter name="[StatusCode]" operation="protocol.setFromMessage" value="firstline.StatusCode"/>
    <parameter name="[lastMsg]" operation="protocol.setFromMessage" value="message"/>	
	</receiveMessageSIP>

	<if>
	<condition>
		<test parameter="[StatusCode]" condition="string.equals" value="401" />
	</condition>
	<then>	

    <call name="build_Authorization_Header" >
        <input>
            <parameter name="[function:msg]" value="[lastMsg]"/>     
            <parameter name="[function:userName]" value="[userName]@[domainName]"/>
            <parameter name="[function:uri]" value="sip:[domainName]"/>       
            <parameter name="[function:password]" value="[password]"/>
        </input>
        <output>
            <parameter name="[authorization]" value="[function:authorization]"/>
        </output>
    </call>
    
			
  	<parameter name="[newBranchId]" operation="string.random" value="10"/>
  	<parameter name="[newCseq]" operation="number.add" value="[newCseq]" value2="1"/>			
		<sendMessageSIP name="Send REGISTER" destScenario="bob" 
                    remoteHost="[remoteHostSIP]" remotePort="[remotePortSIP]">
<![CDATA[REGISTER sip:[domainName] SIP/2.0
To: "[userName]" <sip:[userName]@[domainName]>
From: "[userName]" <sip:[userName]@[domainName]>;tag=[localTag]
Call-ID:[newCallId]
CSeq: [newCseq] REGISTER
Via: SIP/2.0/[transportResponse] [localSIP];branch=z9hG4bK[newBranchId]
Max-Forwards: [MaxForwards]
Contact: <sip:[userName]@[localSIP]>
Authorization: [authorization]
Expires: 3600
Content-Length: 0]]>
	        </sendMessageSIP>

    	<receiveMessageSIP name="200 OK" type="REGISTER" result="200">
    		<parameter name="[To]" operation="protocol.setFromMessage" value="header.To"/>  	
    		<parameter name="[From]" operation="protocol.setFromMessage" value="header.From"/>  	
    		<parameter name="[CallId]" operation="protocol.setFromMessage" value="header.Call-ID"/>
    		<parameter name="[Cseq]" operation="protocol.setFromMessage" value="header.CSeq"/>
    	</receiveMessageSIP>

      	<parameter name="[newBranchId]" operation="string.random" value="10"/>  
      	<parameter name="[newCseq]" operation="number.add" value="[newCseq]" value2="1"/>  
    	<sendMessageSIP name="Send REGISTER" remoteHost="[remoteHostSIP]" remotePort="[remotePortSIP]">
<![CDATA[
REGISTER sip:[domainName] SIP/2.0
To: [To]
From: [From]
Call-ID:[CallId]
CSeq: [newCseq] REGISTER
Via: SIP/2.0/[transportResponse] [localSIP];branch=z9hG4bK[newBranchId]
Max-Forwards: [MaxForwards]
Contact: <sip:[userName]@[localSIP]>
Expires: 0
Content-Length: 0
]]>
            </sendMessageSIP>
    
    	<receiveMessageSIP name="200 OK" type="REGISTER" result="200">
    	</receiveMessageSIP>
	
	</then>
	</if>
</scenario>

<?xml version="1.0" encoding="UTF-8"?>

<!-- scenario client-->
<scenario>

    <parameter name="[connection]" operation="set" value="channelSMPP" />
    <openChannelSMPP name="[connection]" remoteHost="[test:remoteHostSMPP]" remotePort="[test:remotePortSMPP]"/>

    <parameter name="[num]" operation="set" value="1" />
    <sendMessageSMPP channel="[connection]">
        <header name="bind_transceiver" sequence_number="[num]" />
        <attribute name="system_id" value="IMSLoader"/>
        <attribute name="password" value="coucou"/>
        <attribute name="system_type" value="windows MC"/>
        <attribute name="interface_version" value="2"/>
        <attribute name="addr_ton" value="8"/>
        <attribute name="addr_npi" value="3"/>
        <attribute name="address_range" value="255.255.255.0"/>
    </sendMessageSMPP>

    <receiveMessageSMPP request="false" type="bind_transceiver:9" result="0">
        <parameter name="seqNum" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="system_id" operation="protocol.setFromMessage" value="attribute.system_id"/>
        <parameter name="sc_interface_version" operation="protocol.setFromMessage" value="tlv.sc_interface_version"/>
        <test parameter="[seqNum]" condition="string.equals" value="[num]"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
        <test parameter="[system_id]" condition="string.equals" value="test"/>
        <test parameter="[sc_interface_version]" condition="string.equals" value="6"/>
    </receiveMessageSMPP>

    <receiveMessageSMPP request="true" type="deliver_sm:5">
        <parameter name="seqNum" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="connection" operation="protocol.setFromMessage" value="channel.name"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="service_type" operation="protocol.setFromMessage" value="attribute.service_type"/>
        <parameter name="source_addr_ton" operation="protocol.setFromMessage" value="attribute.source_addr_ton"/>
        <parameter name="source_addr_npi" operation="protocol.setFromMessage" value="attribute.source_addr_npi"/>
        <parameter name="source_addr" operation="protocol.setFromMessage" value="attribute.source_addr"/>
        <parameter name="dest_addr_ton" operation="protocol.setFromMessage" value="attribute.dest_addr_ton"/>
        <parameter name="dest_addr_npi" operation="protocol.setFromMessage" value="attribute.dest_addr_npi"/>
        <parameter name="destination_addr" operation="protocol.setFromMessage" value="attribute.destination_addr"/>
        <parameter name="esm_class" operation="protocol.setFromMessage" value="attribute.esm_class"/>
        <parameter name="protocol_id" operation="protocol.setFromMessage" value="attribute.protocol_id"/>
        <parameter name="priority_flag" operation="protocol.setFromMessage" value="attribute.priority_flag"/>
        <parameter name="schedule_delivery_time" operation="protocol.setFromMessage" value="attribute.schedule_delivery_time"/>
        <parameter name="validity_period" operation="protocol.setFromMessage" value="attribute.validity_period"/>
        <parameter name="registered_delivery" operation="protocol.setFromMessage" value="attribute.registered_delivery"/>
        <parameter name="replace_if_present_flag" operation="protocol.setFromMessage" value="attribute.replace_if_present_flag"/>
        <parameter name="data_coding" operation="protocol.setFromMessage" value="attribute.data_coding"/>
        <parameter name="sm_default_msg_id" operation="protocol.setFromMessage" value="attribute.sm_default_msg_id"/>
        <parameter name="sm_length" operation="protocol.setFromMessage" value="attribute.sm_length"/>
        <parameter name="short_message" operation="protocol.setFromMessage" value="attribute.short_message"/>
        <parameter name="[short_message]" operation="binary.tostring" value="[short_message]"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
        <test parameter="[service_type]" condition="string.equals" value=""/>
        <test parameter="[source_addr_ton]" condition="string.equals" value="0"/>
        <test parameter="[source_addr_npi]" condition="string.equals" value="0"/>
        <test parameter="[source_addr]" condition="string.equals" value=""/>
        <test parameter="[dest_addr_ton]" condition="string.equals" value="1"/>
        <test parameter="[dest_addr_npi]" condition="string.equals" value="8"/>
        <test parameter="[destination_addr]" condition="string.equals" value="172.016.021.207"/>
        <test parameter="[esm_class]" condition="string.equals" value="0"/>
        <test parameter="[protocol_id]" condition="string.equals" value="0"/>
        <test parameter="[priority_flag]" condition="string.equals" value="2"/>
        <test parameter="[schedule_delivery_time]" condition="string.equals" value=""/>
        <test parameter="[validity_period]" condition="string.equals" value=""/>
        <test parameter="[registered_delivery]" condition="string.equals" value="3"/>
        <test parameter="[replace_if_present_flag]" condition="string.equals" value="0"/>
        <test parameter="[data_coding]" condition="string.equals" value="0"/>
        <test parameter="[sm_default_msg_id]" condition="string.equals" value="128"/>
        <test parameter="[sm_length]" condition="string.equals" value="23"/>
        <test parameter="[short_message]" condition="string.equals" value="test de sms à délivrer."/>
    </receiveMessageSMPP>

    <sendMessageSMPP channel="[connection]">
        <header name="deliver_sm_resp" sequence_number="[seqNum]"/>
        <attribute name="message_id" value=""/>
    </sendMessageSMPP>

    <receiveMessageSMPP request="true" type="deliver_sm:5">
        <parameter name="seqNum" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="connection" operation="protocol.setFromMessage" value="channel.name"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="service_type" operation="protocol.setFromMessage" value="attribute.service_type"/>
        <parameter name="source_addr_ton" operation="protocol.setFromMessage" value="attribute.source_addr_ton"/>
        <parameter name="source_addr_npi" operation="protocol.setFromMessage" value="attribute.source_addr_npi"/>
        <parameter name="source_addr" operation="protocol.setFromMessage" value="attribute.source_addr"/>
        <parameter name="dest_addr_ton" operation="protocol.setFromMessage" value="attribute.dest_addr_ton"/>
        <parameter name="dest_addr_npi" operation="protocol.setFromMessage" value="attribute.dest_addr_npi"/>
        <parameter name="destination_addr" operation="protocol.setFromMessage" value="attribute.destination_addr"/>
        <parameter name="esm_class" operation="protocol.setFromMessage" value="attribute.esm_class"/>
        <parameter name="protocol_id" operation="protocol.setFromMessage" value="attribute.protocol_id"/>
        <parameter name="priority_flag" operation="protocol.setFromMessage" value="attribute.priority_flag"/>
        <parameter name="schedule_delivery_time" operation="protocol.setFromMessage" value="attribute.schedule_delivery_time"/>
        <parameter name="validity_period" operation="protocol.setFromMessage" value="attribute.validity_period"/>
        <parameter name="registered_delivery" operation="protocol.setFromMessage" value="attribute.registered_delivery"/>
        <parameter name="replace_if_present_flag" operation="protocol.setFromMessage" value="attribute.replace_if_present_flag"/>
        <parameter name="data_coding" operation="protocol.setFromMessage" value="attribute.data_coding"/>
        <parameter name="sm_default_msg_id" operation="protocol.setFromMessage" value="attribute.sm_default_msg_id"/>
        <parameter name="sm_length" operation="protocol.setFromMessage" value="attribute.sm_length"/>
        <parameter name="short_message" operation="protocol.setFromMessage" value="attribute.short_message"/>
        <parameter name="[short_message]" operation="binary.tostring" value="[short_message]"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
        <test parameter="[service_type]" condition="string.equals" value=""/>
        <test parameter="[source_addr_ton]" condition="string.equals" value="0"/>
        <test parameter="[source_addr_npi]" condition="string.equals" value="0"/>
        <test parameter="[source_addr]" condition="string.equals" value=""/>
        <test parameter="[dest_addr_ton]" condition="string.equals" value="1"/>
        <test parameter="[dest_addr_npi]" condition="string.equals" value="8"/>
        <test parameter="[destination_addr]" condition="string.equals" value="172.016.021.207"/>
        <test parameter="[esm_class]" condition="string.equals" value="0"/>
        <test parameter="[protocol_id]" condition="string.equals" value="0"/>
        <test parameter="[priority_flag]" condition="string.equals" value="2"/>
        <test parameter="[schedule_delivery_time]" condition="string.equals" value=""/>
        <test parameter="[validity_period]" condition="string.equals" value=""/>
        <test parameter="[registered_delivery]" condition="string.equals" value="3"/>
        <test parameter="[replace_if_present_flag]" condition="string.equals" value="0"/>
        <test parameter="[data_coding]" condition="string.equals" value="0"/>
        <test parameter="[sm_default_msg_id]" condition="string.equals" value="128"/>
        <test parameter="[sm_length]" condition="string.equals" value="30"/>
        <test parameter="[short_message]" condition="string.equals" value="second sms de test à délivrer."/>
    </receiveMessageSMPP>

    <sendMessageSMPP channel="[connection]">
        <header name="deliver_sm_resp" sequence_number="[seqNum]"/>
        <attribute name="message_id" value=""/>
    </sendMessageSMPP>

    <parameter name="[num]" operation="number.add" value="[num]" value2="1" />
    <sendMessageSMPP channel="[connection]">
        <header name="query_sm" sequence_number="[num]" />
        <attribute name="message_id" value="2"/>
        <attribute name="source_addr_ton" value="0"/>
        <attribute name="source_addr_npi" value="0"/>
        <attribute name="source_addr" value=""/>
    </sendMessageSMPP>

    <receiveMessageSMPP request="false" type="query_sm" result="0">
        <parameter name="seqNum" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="message_id" operation="protocol.setFromMessage" value="attribute.message_id"/>
        <parameter name="final_date" operation="protocol.setFromMessage" value="attribute.final_date"/>
        <parameter name="message_state" operation="protocol.setFromMessage" value="attribute.message_state"/>
        <parameter name="error_code" operation="protocol.setFromMessage" value="attribute.error_code"/>
        <test parameter="[seqNum]" condition="string.equals" value="[num]"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
        <test parameter="[message_id]" condition="string.equals" value="2"/>
        <test parameter="[final_date]" condition="string.equals" value=""/>
        <test parameter="[message_state]" condition="string.equals" value="1"/>
        <test parameter="[error_code]" condition="string.equals" value="0"/>
    </receiveMessageSMPP>

    <parameter name="[num]" operation="number.add" value="[num]" value2="1" />
    <sendMessageSMPP channel="[connection]">
        <header name="query_broadcast_sm" sequence_number="[num]" />
        <attribute name="message_id" value="3"/>
        <attribute name="source_addr_ton" value="0"/>
        <attribute name="source_addr_npi" value="0"/>
        <attribute name="source_addr" value=""/>
    </sendMessageSMPP>

    <receiveMessageSMPP request="false" type="query_broadcast_sm:112" result="0">
        <parameter name="seqNum" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="message_id" operation="protocol.setFromMessage" value="attribute.message_id"/>
        <parameter name="message_state" operation="protocol.setFromMessage" value="tlv.message_state"/>
        <parameter name="broadcast_area_identifier" operation="protocol.setFromMessage" value="tlv.broadcast_area_identifier"/>
        <parameter name="[broadcast_area_identifier]" operation="binary.toString" value="[broadcast_area_identifier]"/>
        <parameter name="broadcast_area_success" operation="protocol.setFromMessage" value="tlv.broadcast_area_success"/>
        <test parameter="[seqNum]" condition="string.equals" value="[num]"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
        <test parameter="[message_id]" condition="string.equals" value="2"/>
        <test parameter="[message_state]" condition="string.equals" value="2"/>
        <test parameter="[broadcast_area_identifier]" condition="string.equals" value="coucou"/>
        <test parameter="[broadcast_area_success]" condition="string.equals" value="255"/>
    </receiveMessageSMPP>

    <parameter name="[num]" operation="number.add" value="[num]" value2="1" />
    <sendMessageSMPP channel="[connection]">
        <header name="data_sm" sequence_number="[num]" />
        <attribute name="service_type" value=""/>
        <attribute name="source_addr_ton" value="1"/>
        <attribute name="source_addr_npi" value="1"/>
        <attribute name="source_addr" value=""/>
        <attribute name="dest_addr_ton" value="1"/>
        <attribute name="dest_addr_npi" value="8"/>
        <attribute name="destination_addr" value="172.016.021.207"/>
        <attribute name="esm_class" value="0"/>
        <attribute name="registered_delivery" value="3"/>
        <attribute name="data_coding" value="1"/>
    </sendMessageSMPP>

    <receiveMessageSMPP request="false" type="data_sm:103" result="0">
        <parameter name="seqNum" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <parameter name="message_id" operation="protocol.setFromMessage" value="attribute.message_id"/>
        <test parameter="[seqNum]" condition="string.equals" value="[num]"/>
        <test parameter="[message_id]" condition="string.equals" value="messageId"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
    </receiveMessageSMPP>

    <parameter name="[num]" operation="number.add" value="[num]" value2="1" />
    <sendMessageSMPP channel="[connection]">
        <header name="unbind" sequence_number="[num]" />
    </sendMessageSMPP>

    <receiveMessageSMPP request="false" type="unbind:6" result="0">
        <parameter name="seqNum" operation="protocol.setFromMessage" value="header.sequence_number"/>
        <parameter name="malformed" operation="protocol.setFromMessage" value="malformed"/>
        <test parameter="[seqNum]" condition="string.equals" value="[num]"/>
        <test parameter="[malformed]" condition="boolean.equals" value="false"/>
    </receiveMessageSMPP>

    <finally>
        <closeChannelSMPP name="[connection]"/>
    </finally>
    
</scenario>

<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>

	<parameter name="[test:SEM1]" operation="system.semaphorewait" value="1"/>

	<stats>
        	<counter name="ActiveSession" summary="Act Sess" complete="Count of active sessions"/>	
        	<counter name="INVITEout" summary="INV_out" complete="Send an outgoing INVITE"/>
		<counter name="INVITE2xxin" summary="INV2xx_in" complete="Receive an incoming INVITE/2xx OK"/>        
		<counter name="BYExxxin" summary="BYExxx_in" complete="Receive an incoming BYE/XXX OK"/>			
    	</stats>

  	<parameter name="[nextTimestamp]" operation="setFromSystem" value="Timestamp" value2="1970"/>
  	<parameter name="[finalTimestamp]" operation="set" value="[nextTimestamp]"/>
	<parameter name="[tempDuration]" operation="multiply" value="[TestDurationSec]" value2="1000"/>  	
	<parameter name="[finalTimestamp]" operation="add" value="[finalTimestamp]" value2="[tempDuration]"/>
  	
	<parameter name="[session]" operation="set" value="0"/>			

	<!-- start main loop -->	
	<label name="begin"/>
		
	<parameter name="[received]" operation="set" value="false"/>			
	<receiveMessage name="wait_SIP_request" timeout="0.1" failedOnTimeout="false">
		<parameter name="[firstlineStatusCode]" operation="setFromMessage" value="firstline:StatusCode"/>
		<parameter name="[received]" operation="set" value="true"/>	
		<parameter name="[lastMethod]" operation="setFromMessage" value="message:type"/>	
		<parameter name="[lastIsRequest]" operation="setFromMessage" value="message:request"/>  		
		<parameter name="[lastResult]" operation="setFromMessage" value="message:result"/>  				
		<parameter name="[lastFirstline]" operation="setFromMessage" value="firstline"/>  	
		<parameter name="[lastTo]" operation="setFromMessage" value="header:To"/>
		<parameter name="[lastInviteeURI]" operation="setFromMessage" value="header:To:Address:URI"/>
	  	<parameter name="[lastFrom]" operation="setFromMessage" value="header:From"/>
		<parameter name="[lastInviterURI]" operation="setFromMessage" value="header:From:Address:URI"/>
		<parameter name="[lastInviteeName]" operation="setFromUri" value="[lastInviteeURI]" value2="User"/>
		<parameter name="[lastInviterName]" operation="setFromUri" value="[lastInviterURI]" value2="User"/>
	  	<parameter name="[lastCallId]" operation="setFromMessage" value="header:Call-ID"/>		  		  	
	  	<parameter name="[lastCSeq]" operation="setFromMessage" value="header:CSeq"/>
    	<parameter name="[lastCseqNumber]" operation="setFromMessage" value="header:CSeqNumber"/>   	  	
	  	<parameter name="[lastVia]" operation="setFromMessage" value="header:Via"/>
	  	<parameter name="[lastRoute]" operation="setFromMessage" value="header:Route"/>		  		  	
	  	<parameter name="[lastRecord-Route]" operation="setFromMessage" value="header:Record-Route"/>
	  	<parameter name="[lastContact]" operation="setFromMessage" value="header:Contact"/>		  		  	
    	<parameter name="[lastContactURI]" operation="setFromMessage" value="header:Contact:Address:URI"/>		  	
	  	<parameter name="[lastMax-Forwards]" operation="setFromMessage" value="header:Max-Forwards"/>		  		  	
		<parameter name="[lastHeaderOthers]" operation="setFromMessage" value="header:Others"/>		  		  		  	
	  	<parameter name="[lastContent]" operation="setFromMessage" value="content"/>		  		  	
	  	<parameter name="[lastServiceTrigger]" operation="setFromMessage" value="header:ServiceTrigger"/>		  		  		  	
	</receiveMessage>
		
		<parameter name="[Record-Route-Size]" operation="size" value="[lastRecord-Route]"/>
		<parameter name="[Record-Route-Inv]" operation="create"/>
		
		<while>
			<condition>
				<test parameter="[Record-Route-Size]" condition="greaterThan" value="0"/>
			</condition>
			<do>
				<parameter name="[temp]" operation="getFirst" value="[Record-Route]" />
				<parameter name="[lastRecord-Route]" operation="removeFirst" value="[lastRecord-Route]" />
			<parameter name="[Record-Route-Inv]" operation="addFirst" value="[Record-Route-Inv]" value2="[temp]"/>
			<parameter name="[Record-Route-Size]" operation="size" value="[lastRecord-Route]"/>
			</do>
		</while>
	
	<if>
	    <condition>
			<test parameter="[firstlineStatusCode]" condition="equals" value="408"/>
	    </condition>
	    <then>
			<goto  name="goto_sendINVITE" label="sendINVITE" state="true"/>	    	
	    </then>
	</if>	


	<if>
	    <condition>
			<test parameter="[received]" condition="equals" value="false"/>
	    </condition>
	    <then>
			<goto  name="goto_sendINVITE" label="sendINVITE" state="true"/>	    	
	    </then>
	</if>

	<if>
	    <condition>
	    	<test parameter="[received]" 		condition="equals" value="true"/>
			<test parameter="[lastIsRequest]" 	condition="equals" value="false"/>
	    	<test parameter="[lastMethod]" 		condition="equals" value="INVITE"/>
	    	<test parameter="[lastResult]" 		condition="matches" value="[2-9][0-9][0-9]"/>
	    </condition>
	    <then>
		<goto  name="goto_Request" label="recINVITE23456xx" state="true"/>
	    </then>
	</if>

	<if>
	    <condition>
	    	<test parameter="[received]" condition="equals" value="true"/>		  		  		    
			<test parameter="[lastIsRequest]" condition="equals" value="false"/>		  		  		    		
	    	<test parameter="[lastMethod]" condition="equals" value="BYE"/>
	    </condition>
	    <then>
		<goto  name="goto_recBYExxx" label="recBYExxx" state="true"/>	    	
	    </then>
	</if>

        <goto  name="goto_begin" label="begin" state="true"/>	    	                
	<!-- end main loop -->
	
	<label name="sendINVITE"/>	
		        
	<parameter name="[currentTimestamp]" operation="setFromSystem" value="Timestamp" value2="1970"/>
    <parameter name="[delay]" operation="substract" value="[nextTimestamp]" value2="[currentTimestamp]"/>  	  	

  	<!--log name="log" level="2">Pause = [delay] ms</log-->
  	<!--pause name="pause between INVITE" milliseconds="[delay]"/-->        		
       	<if>
       	    <condition>
				<test parameter="[currentTimestamp]" condition="lowerThan" value="[nextTimestamp]"/>
			</condition>
	    <then>
        	<goto  name="goto_begin" label="begin" state="true"/>	    	                	    
	    </then>
		</if>
		
	<parameter name="[numberFreeInviters]" operation="size" value="[test:freeInvitersNames]"/>
	<parameter name="[numberFreeInvitees]" operation="size" value="[test:freeInviteesNames]"/>
		
		<if>
			<condition>
				<test parameter="[numberFreeInviters]" condition="equals" value="0"/>
				<test parameter="[numberFreeInvitees]" condition="equals" value="0"/>
			</condition>
		<then>
			<goto  name="goto_begin" label="begin" state="true"/>	    
		</then>
		</if>
		
	
  	<!--parameter name="[currentTimestamp]" operation="setFromSystem" value="Timestamp" value2="1970"/-->  	  	
       	<parameter name="[nextTimestamp]" operation="add" value="[nextTimestamp]" value2="[delayINVITE]"/>  	
       	       	        
       	<if>
       	    <condition>
    		<test parameter="[currentTimestamp]" condition="lowerThan" value="[finalTimestamp]"/>       	     
	    </condition>
	    <then>
		<parameter name="[session]" operation="add" value="[session]" value2="1"/>				    
	  	<stats>
  		    <counter name="ActiveSession"><increase>1</increase></counter>  	
  	    	<counter name="INVITEout"><increase>1</increase></counter>
    	</stats>
		<parameter name="[test:SEMusers]" operation="system.semaphorewait" value="1"/>
		<parameter name="[inviterName]" operation="getFirst" value="[freeInvitersNames]"/>
		<parameter name="[freeInvitersNames]" operation="removeFirst" value="[freeInvitersNames]"/>
		<parameter name="[inviteeName]" operation="getFirst" value="[freeInviteesNames]"/>
		<parameter name="[freeInviteesNames]" operation="removeFirst" value="[freeInviteesNames]"/>
		<parameter name="[test:SEMusers]" operation="system.semaphorenotify" value="1"/>
		<log level="0">[freeInvitersNames]</log>
		<log level="0">[freeInviteesNames]</log>	
	  	<parameter name="[localTag]" operation="identifier" value="newString" value2="10"/>
	  	<parameter name="[newCallId]" operation="identifier" value="newInteger" value2="10000000"/>
  		<parameter name="[newCseqNumber]" operation="identifier" value="newInteger" value2="10000000"/>
  		<parameter name="[newBranchId]" operation="identifier" value="newString" value2="10"/>  
		
		<sendRequestSIP name="Send INVITE">
<![CDATA[INVITE sip:[inviteeName]@[domainName] SIP/2.0
To: "[inviteeName]" <sip:[inviteeName]@[domainName]>
From: "[inviterName]" <sip:[inviterName]@[domainName]>;tag=[localTag]
Via: SIP/2.0/UDP [Adresse-Tester];branch=z9hG4bK[newBranchId]
Call-ID: [newCallId]
CSeq: [newCseqNumber] INVITE
Max-Forwards: 70
Allow: INVITE, ACK, BYE, CANCEL, REFER, MESSAGE, SUBSCRIBE, NOTIFY, PUBLISH
Contact: <sip:[inviterName]@[Adresse-Tester]>
P-Preferred-Identity: "[inviterName]" <sip:[inviterName]@[domainName]>
P-Access-Network-Info: 3GPP-UTRAN-TDD; utran-cell-id-3gpp=00000000
Privacy: none
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Route: [test:SCSCF[inviterName]]
Content-Type: multipart/mixed;boundary="----=_Part_0"
Content-Length: x

------=_Part_0
Content-Type: application/sdp

v=0
o=[inviterName] 999 999 IN IP4 [Host-Tester]
s=-
c=IN IP4 [Host-Tester]
t=0 0
m=audio 45200 RTP/AVP 97
a=rtpmap:97 amr/8000/1
a=fmtp:97 mode-set=1;octet-align=1;crc=0
a=+g.poc.talkburst
a=maxptime:200
a=ptime:200
m=application 25463 udp TBCP
a=fmtp:TBCP queuing=0;tb_priority=1;timestamp=0

------=_Part_0
Content-Type: application/resource-lists+xml
Content-Disposition: recipient-list

<?xml version="1.0" encoding="UTF-8"?>
<resource-lists xmlns="urn:ietf:params:xml:ns:resource-lists" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<list>
<entry uri="[inviteeName]"/>
</list>
</resource-lists>
------=_Part_0--]]>

  		</sendRequestSIP>
	    </then>	
	</if>

        <goto name="goto_begin" label="begin" state="true"/>	    	                        

	<label name="recINVITE23456xx"/>	
    
      	<parameter name="[newBranchId]" operation="identifier" value="newString" value2="10"/>
      	
  	<sendRequestSIP name="Send ACK" delay="0">
<![CDATA[ACK [lastContactURI] SIP/2.0
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCseqNumber] ACK
Via: SIP/2.0/UDP [Adresse-Tester];branch=z9hG4bK[newBranchId]
Contact: <sip:[lastInviterName]@[Adresse-Tester]>
P-Preferred-Identity: "[lastInviterName]" <sip:[lastInviterName]@[domainName]>
P-Access-Network-Info: 3GPP-UTRAN-TDD; utran-cell-id-3gpp=00000000
Privacy: none
P-Asserted-Identity: <sip:[lastInviterName]@[domainName]
Route: [Record-Route-Inv]
Max-Forwards: 70
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Content-Length: 0
]]>
</sendRequestSIP>

	<if>
	    <condition>
	    	<test parameter="[lastResult]" condition="matches" value="[3-9][0-9][0-9]"/>	    		    	
	    </condition>
	    <then>
	  	<stats>
  		    <counter name="ActiveSession"><decrease>1</decrease></counter>  	
    		</stats>	    	    		  
		<goto  name="goto_begin" label="begin" state="true"/>	    	                
	    </then>
	</if>

  	<stats>
  	    <counter name="INVITE2xxin"><increase>1</increase></counter>
    </stats>	    	    	

      	<parameter name="[newBranchId]" operation="identifier" value="newString" value2="10"/>
  	<parameter name="[newCseqNumber]" operation="identifier" value="newInteger" value2="10000000"/>
    
	
	
  	<sendRequestSIP name="Send BYE" delay="[CallDurationSec]">
<![CDATA[BYE [lastContactURI] SIP/2.0
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [newCseqNumber] BYE
Route: [Record-Route-Inv]
Contact: <sip:[lastInviterName]@[Adresse-Tester]>
P-Preferred-Identity: "[lastInviterName]" <sip:[lastInviterName]@[domainName]>
P-Access-Network-Info: 3GPP-UTRAN-TDD; utran-cell-id-3gpp=00000000
Privacy: none
Via: SIP/2.0/UDP [Adresse-Tester];branch=z9hG4bK[newBranchId]
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Max-Forwards: 70
Content-Length: 0
]]>
  	</sendRequestSIP>
	
	<parameter name="[test:SEMusers]" operation="system.semaphorewait" value="1"/>
	<parameter name="[freeInvitersNames]" operation="addLast" value="[freeInvitersNames]" value2="[lastInviterName]"/>
	<parameter name="[freeInviteesNames]" operation="addLast" value="[freeInviteesNames]" value2="[lastInviteeName]"/>
	<parameter name="[test:SEMusers]" operation="system.semaphorenotify" value="1"/>

	<goto  name="goto_begin" label="begin" state="true"/>	    	                
        
        <label name="recBYExxx"/>	

  	<stats>
  	    <counter name="ActiveSession"><decrease>1</decrease></counter>  	
  	    <counter name="BYExxxin"><increase>1</increase></counter>
    	</stats>	    	    	

	<parameter name="[session]" operation="substract" value="[session]" value2="1"/>			
	<if>
	    <condition>
	    	<test parameter="[session]" condition="equals" value="0"/>		  		  		    
	    </condition>
	    <then>
		<exit name="exit scenario" failed="false"/>	    	
	    </then>
	</if>
	
	<goto  name="goto_begin" label="begin" state="true"/>    	                	        	        

</scenario>

<?xml version="1.0" encoding="UTF-8"?>

<!-- scenario server-->
<scenario>

    <createListenpointGTP name="listenpoint" localPort="3387"/>
    
    <parameter name="[testcase:sem1]" operation="system.semaphorenotify" />

    <receiveMessageGTP name="receive message">
        <parameter name="[channel]" operation="protocol.setFromMessage" value="channel.name"/>
        <parameter name="[seqNum]" operation="protocol.setFromMessage" value="header.sequenceNumber"/>
        <parameter name="[binary]" operation="protocol.setFromMessage" value="message.binary"/>
        <parameter name="[tunnelEndpointId]" operation="protocol.setFromMessage" value="header.tunnelEndpointId"/>         
    </receiveMessageGTP>

    <parameter name="[version]" operation="protocol.setFromMessage" value="header.version"/>
    <test parameter="[version]" condition="number.equals" value="2"/>
    <parameter name="[piggyFlag]" operation="protocol.setFromMessage" value="header.piggyFlag"/>
    <test parameter="[piggyFlag]" condition="boolean.equals" value="0"/>    
    <parameter name="[teidFlag]" operation="protocol.setFromMessage" value="header.teidFlag"/>
    <test parameter="[teidFlag]" condition="boolean.equals" value="1"/>
    <parameter name="[messageType]" operation="protocol.setFromMessage" value="header.messageType"/>
    <test parameter="[messageType]" condition="number.equals" value="32"/>
    <parameter name="[name]" operation="protocol.setFromMessage" value="header.name"/>
    <test parameter="[name]" condition="string.equals" value="createSessionRequest"/>
    <parameter name="[tunnelEndpointId]" operation="protocol.setFromMessage" value="header.tunnelEndpointId"/>
    <test parameter="[tunnelEndpointId]" condition="number.equals" value="0"/>                    
    <parameter name="[sequenceNumber]" operation="protocol.setFromMessage" value="header.sequenceNumber"/>
    <test parameter="[sequenceNumber]" condition="number.equals" value="5682690"/>
    
    <parameter name="[IMSI]" operation="protocol.setFromMessage" value="element.IMSI.field.IMSI"/>
    <test parameter="[IMSI]" condition="string.equals" value="208014420002670"/>   
    <parameter name="[IMSI]" operation="protocol.setFromMessage" value="element.IMSI"/>
    <test parameter="[IMSI]" condition="binary.equals" value="0100080002084124002076f0"/>
    
    <parameter name="[MSISDN]" operation="protocol.setFromMessage" value="element.MSISDN.field.MSISDN"/>
    <test parameter="[MSISDN]" condition="string.equals" value="33699902670"/>
    <parameter name="[MSISDN]" operation="protocol.setFromMessage" value="element.MSISDN"/>
    <test parameter="[MSISDN]" condition="binary.equals" value="4c0006003396992076f0"/>
    
    <parameter name="[MEI]" operation="protocol.setFromMessage" value="element.MEI.field.MEI"/>
    <test parameter="[MEI]" condition="number.equals" value="0044204291218110"/>
    <parameter name="[MEI]" operation="protocol.setFromMessage" value="element.MEI"/>
    <test parameter="[MEI]" condition="binary.equals" value="4b0008000044204291218110"/>
    
    <parameter name="[ULI.spare1]" operation="protocol.setFromMessage" value="element.ULI.field.spare1"/>
    <test parameter="[ULI.spare1]" condition="number.equals" value="0"/>
    <parameter name="[ULI.LAI]" operation="protocol.setFromMessage" value="element.ULI.field.LAI"/>
    <test parameter="[ULI.LAI]" condition="number.equals" value="0"/>
    <parameter name="[ULI.ECGI]" operation="protocol.setFromMessage" value="element.ULI.field.ECGI"/>
    <test parameter="[ULI.ECGI]" condition="number.equals" value="1"/>
    <parameter name="[ULI.TAI]" operation="protocol.setFromMessage" value="element.ULI.field.TAI"/>
    <test parameter="[ULI.TAI]" condition="number.equals" value="1"/>
    <parameter name="[ULI.RAI]" operation="protocol.setFromMessage" value="element.ULI.field.RAI"/>
    <test parameter="[ULI.RAI]" condition="number.equals" value="0"/>
    <parameter name="[ULI.SAI]" operation="protocol.setFromMessage" value="element.ULI.field.SAI"/>
    <test parameter="[ULI.SAI]" condition="number.equals" value="0"/>
    <parameter name="[ULI.CGI]" operation="protocol.setFromMessage" value="element.ULI.field.CGI"/>
    <test parameter="[ULI.CGI]" condition="number.equals" value="0"/>
    <parameter name="[ULI.TAI_MMC1]" operation="protocol.setFromMessage" value="element.ULI.field.TAI_MMC1"/>
    <test parameter="[ULI.TAI_MMC1]" condition="string.equals" value="208,01"/>
    <parameter name="[ULI.TAI_Tracking Area Code]" operation="protocol.setFromMessage" value="element.ULI.field.TAI_Tracking Area Code"/>
    <test parameter="[ULI.TAI_Tracking Area Code]" condition="number.equals" value="102"/>
    <parameter name="[ULI.ECGI_MMC2]" operation="protocol.setFromMessage" value="element.ULI.field.ECGI_MMC2"/>
    <test parameter="[ULI.ECGI_MMC2]" condition="string.equals" value="208,01"/>
    <parameter name="[ULI.ECGI_spare2]" operation="protocol.setFromMessage" value="element.ULI.field.ECGI_spare2"/>
    <test parameter="[ULI.ECGI_spare2]" condition="number.equals" value="0"/>
    <parameter name="[ULI.ECGI_ECI]" operation="protocol.setFromMessage" value="element.ULI.field.ECGI_ECI"/>
    <test parameter="[ULI.ECGI_ECI]" condition="number.equals" value="26500"/>
    <parameter name="[ULI]" operation="protocol.setFromMessage" value="element.ULI"/>
    <test parameter="[ULI]" condition="binary.equals" value="56000d001802f810006602f81000006784"/>
    
    <parameter name="[Serving Network.MMC]" operation="protocol.setFromMessage" value="element.Serving Network.field.MMC"/>
    <test parameter="[Serving Network.MMC]" condition="string.equals" value="208,01"/>
    <parameter name="[Serving Network]" operation="protocol.setFromMessage" value="element.Serving Network"/>
    <test parameter="[Serving Network]" condition="binary.equals" value="5300030002f810"/>

    <parameter name="[RAT Type]" operation="protocol.setFromMessage" value="element.RAT Type.field.RAT Type"/>
    <test parameter="[RAT Type]" condition="string.equals" value="EUTRAN:6"/>
    <parameter name="[RAT Type]" operation="protocol.setFromMessage" value="element.RAT Type"/>
    <test parameter="[RAT Type]" condition="binary.equals" value="5200010006"/>
    
    <parameter name="[F-TEID.V4]" operation="protocol.setFromMessage" value="element.F-TEID.field.V4"/>
    <test parameter="[F-TEID.V4]" condition="boolean.equals" value="1"/>
    <parameter name="[F-TEID.V6]" operation="protocol.setFromMessage" value="element.F-TEID.field.V6"/>
    <test parameter="[F-TEID.V6]" condition="boolean.equals" value="0"/>
    <parameter name="[F-TEID.Interface Type]" operation="protocol.setFromMessage" value="element.F-TEID.field.Interface Type"/>
    <test parameter="[F-TEID.Interface Type]" condition="string.equals" value="S5/S8 SGW GTP-C:6"/>
    <parameter name="[TEID / GRE Key]" operation="protocol.setFromMessage" value="element.F-TEID.field.TEID / GRE Key"/>
    <test parameter="[TEID / GRE Key]" condition="string.equals" value="2509643778"/>
    <parameter name="[IPv4 address]" operation="protocol.setFromMessage" value="element.F-TEID.field.IPv4 address"/>  
    <test parameter="[IPv4 address]" condition="string.equals" value="172.20.70.42"/>
    <parameter name="[F-TEID]" operation="protocol.setFromMessage" value="element.F-TEID"/>
    <test parameter="[F-TEID]" condition="binary.equals" value="570009008695962002ac14462a"/>
    
    <parameter name="[APN01]" operation="protocol.setFromMessage" value="element.APN.field.APN01"/>
    <test parameter="[APN01]" condition="string.equals" value="nis6coepc"/>
    <parameter name="[APN02]" operation="protocol.setFromMessage" value="element.APN.field.APN02"/>
    <test parameter="[APN02]" condition="string.equals" value="mnc001"/>
    <parameter name="[APN03]" operation="protocol.setFromMessage" value="element.APN.field.APN03"/>
    <test parameter="[APN03]" condition="string.equals" value="mcc208"/>
    <parameter name="[APN04]" operation="protocol.setFromMessage" value="element.APN.field.APN04"/>
    <test parameter="[APN04]" condition="string.equals" value="gprs"/>    
    <parameter name="[APN]" operation="protocol.setFromMessage" value="element.APN"/>
    <test parameter="[APN]" condition="binary.equals" value="47001d00096e697336636f657063066d6e63303031066d63633230380467707273"/>
    
    <parameter name="[Selection Mode.spare]" operation="protocol.setFromMessage" value="element.Selection Mode.field.spare"/>
    <test parameter="[Selection Mode.spare]" condition="boolean.equals" value="0"/>
    <parameter name="[Selection Mode]" operation="protocol.setFromMessage" value="element.Selection Mode.field.Selection Mode"/>
    <test parameter="[Selection Mode]" condition="string.equals" value="MS or network provided APN, subscribed verified:0"/>
    <parameter name="[Selection Mode]" operation="protocol.setFromMessage" value="element.Selection Mode"/>
    <test parameter="[Selection Mode]" condition="binary.equals" value="8000010000"/>    

    <parameter name="[PDN Type.spare]" operation="protocol.setFromMessage" value="element.PDN Type.field.spare"/>
    <test parameter="[PDN Type.spare]" condition="boolean.equals" value="0"/>
    <parameter name="[PDN Type]" operation="protocol.setFromMessage" value="element.PDN Type.field.PDN Type"/>
    <test parameter="[PDN Type]" condition="string.equals" value="IPv4:1"/>
    <parameter name="[PDN Type]" operation="protocol.setFromMessage" value="element.PDN Type"/>
    <test parameter="[PDN Type]" condition="binary.equals" value="6300010001"/>    
    
    <parameter name="[PAA.spare]" operation="protocol.setFromMessage" value="element.PAA.field.spare"/>
    <test parameter="[PAA.spare]" condition="boolean.equals" value="0"/>
    <parameter name="[PAA.PDN Type]" operation="protocol.setFromMessage" value="element.PAA.field.PDN Type"/>
    <test parameter="[PAA.PDN Type]" condition="string.equals" value="IPv4:1"/>
    <parameter name="[PAA.IPv4 address]" operation="protocol.setFromMessage" value="element.PAA.field.IPv4 address"/>
    <test parameter="[PAA.IPv4 address]" condition="number.equals" value="0"/>    
    <parameter name="[PAA]" operation="protocol.setFromMessage" value="element.PAA"/>
    <test parameter="[PAA]" condition="binary.equals" value="4f0005000100000000"/>    

    <parameter name="[Indication.DAF]" operation="protocol.setFromMessage" value="element.Indication.field.DAF"/>
    <test parameter="[Indication.DAF]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.DTF]" operation="protocol.setFromMessage" value="element.Indication.field.DTF"/>
    <test parameter="[Indication.DTF]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.HI]" operation="protocol.setFromMessage" value="element.Indication.field.HI"/>
    <test parameter="[Indication.HI]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.DFI]" operation="protocol.setFromMessage" value="element.Indication.field.DFI"/>
    <test parameter="[Indication.DFI]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.OI]" operation="protocol.setFromMessage" value="element.Indication.field.OI"/>
    <test parameter="[Indication.OI]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.ISRSI]" operation="protocol.setFromMessage" value="element.Indication.field.ISRSI"/>
    <test parameter="[Indication.ISRSI]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.ISRAI]" operation="protocol.setFromMessage" value="element.Indication.field.ISRAI"/>
    <test parameter="[Indication.ISRAI]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.SGWCI]" operation="protocol.setFromMessage" value="element.Indication.field.SGWCI"/>
    <test parameter="[Indication.SGWCI]" condition="boolean.equals" value="false"/>
    
    <parameter name="[Indication.SQCI]" operation="protocol.setFromMessage" value="element.Indication.field.SQCI"/>
    <test parameter="[Indication.SQCI]" condition="boolean.equals" value="false"/>    
    <parameter name="[Indication.UIMSI]" operation="protocol.setFromMessage" value="element.Indication.field.UIMSI"/>
    <test parameter="[Indication.UIMSI]" condition="boolean.equals" value="false"/>    
    <parameter name="[Indication.CFSI]" operation="protocol.setFromMessage" value="element.Indication.field.CFSI"/>
    <test parameter="[Indication.CFSI]" condition="boolean.equals" value="false"/>    
    <parameter name="[Indication.PT]" operation="protocol.setFromMessage" value="element.Indication.field.PT"/>
    <test parameter="[Indication.PT]" condition="boolean.equals" value="True"/>    
    <parameter name="[Indication.TDI]" operation="protocol.setFromMessage" value="element.Indication.field.TDI"/>
    <test parameter="[Indication.TDI]" condition="boolean.equals" value="false"/>    
    <parameter name="[Indication.SI]" operation="protocol.setFromMessage" value="element.Indication.field.SI"/>
    <test parameter="[Indication.SI]" condition="boolean.equals" value="false"/>    
    <parameter name="[Indication.MSV]" operation="protocol.setFromMessage" value="element.Indication.field.MSV"/>
    <test parameter="[Indication.MSV]" condition="boolean.equals" value="false"/>
        
    <parameter name="[Indication.RetLoc]" operation="protocol.setFromMessage" value="element.Indication.field.RetLoc"/>
    <test parameter="[Indication.RetLoc]" condition="boolean.equals" value="false"/>    
    <parameter name="[Indication.PBIC]" operation="protocol.setFromMessage" value="element.Indication.field.PBIC"/>
    <test parameter="[Indication.PBIC]" condition="boolean.equals" value="false"/>    
    <parameter name="[Indication.SRNI]" operation="protocol.setFromMessage" value="element.Indication.field.SRNI"/>
    <test parameter="[Indication.SRNI]" condition="boolean.equals" value="false"/>    
    <parameter name="[Indication.S6AF]" operation="protocol.setFromMessage" value="element.Indication.field.S6AF"/>
    <test parameter="[Indication.S6AF]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.S4AF]" operation="protocol.setFromMessage" value="element.Indication.field.S4AF"/>
    <test parameter="[Indication.S4AF]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.MBMDT]" operation="protocol.setFromMessage" value="element.Indication.field.MBMDT"/>
    <test parameter="[Indication.MBMDT]" condition="boolean.equals" value="false"/>
    <parameter name="[Indication.SRAU]" operation="protocol.setFromMessage" value="element.Indication.field.SRAU"/>
    <test parameter="[Indication.SRAU]" condition="boolean.equals" value="false"/>            
    <parameter name="[Indication.CCRSI]" operation="protocol.setFromMessage" value="element.Indication.field.CCRSI"/>
    <test parameter="[Indication.CCRSI]" condition="boolean.equals" value="false"/>            
    <parameter name="[Indication]" operation="protocol.setFromMessage" value="element.Indication"/>
    <test parameter="[Indication]" condition="binary.equals" value="4d000300001800"/>  
                                            
    <parameter name="[APN Restriction.Restriction Type value]" operation="protocol.setFromMessage" value="element.APN Restriction.field.Restriction Type value"/>
    <test parameter="[APN Restriction.Restriction Type value]" condition="string.equals" value="No Existing Contexts or Restriction:0"/>
    <parameter name="[APN Restriction]" operation="protocol.setFromMessage" value="element.APN Restriction"/>
    <test parameter="[APN Restriction]" condition="binary.equals" value="7f00010000"/>
                    
    <parameter name="[AMBR.APN-AMBR for uplink]" operation="protocol.setFromMessage" value="element.AMBR.field.APN-AMBR for uplink"/>
    <test parameter="[AMBR.APN-AMBR for uplink]" condition="number.equals" value="50000"/>
    <parameter name="[AMBR.APN-AMBR for downlink]" operation="protocol.setFromMessage" value="element.AMBR.field.APN-AMBR for downlink"/>
    <test parameter="[AMBR.APN-AMBR for downlink]" condition="number.equals" value="100000"/>
    <parameter name="[AMBR]" operation="protocol.setFromMessage" value="element.AMBR"/>
    <test parameter="[AMBR]" condition="binary.equals" value="480008000000c350000186a0"/>

    <parameter name="[PCO]" operation="protocol.setFromMessage" value="element.PCO.field.PCO"/>
    <test parameter="[PCO]" condition="binary.equals" value="8080211001000010810600000000830600000000000d00000a00"/>
    <parameter name="[PCO]" operation="protocol.setFromMessage" value="element.PCO"/>
    <test parameter="[PCO]" condition="binary.equals" value="4e001a008080211001000010810600000000830600000000000d00000a00"/>

    <parameter name="[Bearer Context]" operation="protocol.setFromMessage" value="element.Bearer Context.field.Bearer Context"/>
    <test parameter="[Bearer Context]" condition="binary.equals" value="4900010005570009028480002002ac14462a5000160004070000000000000000000000000000000000000000"/>
    <parameter name="[Bearer Context]" operation="protocol.setFromMessage" value="element.Bearer Context"/>
    <test parameter="[Bearer Context]" condition="binary.equals" value="5d002c004900010005570009028480002002ac14462a5000160004070000000000000000000000000000000000000000"/>

    <parameter name="[UE Time Zone.Time Zone]" operation="protocol.setFromMessage" value="element.UE Time Zone.field.Time Zone"/>
    <test parameter="[UE Time Zone.Time Zone]" condition="number.equals" value="64"/>
    <parameter name="[UE Time Zone.spare]" operation="protocol.setFromMessage" value="element.UE Time Zone.field.spare"/>
    <test parameter="[UE Time Zone.spare]" condition="number.equals" value="0"/>
    <parameter name="[UE Time Zone.Daylight Saving Time]" operation="protocol.setFromMessage" value="element.UE Time Zone.field.Daylight Saving Time"/>
    <test parameter="[UE Time Zone.Daylight Saving Time]" condition="string.equals" value="No adjustment for Daylight Saving Time:0"/>
    <parameter name="[UE Time Zone]" operation="protocol.setFromMessage" value="element.UE Time Zone"/>
    <test parameter="[UE Time Zone]" condition="binary.equals" value="720002004000"/>

    <parameter name="[Charging Characteristics]" operation="protocol.setFromMessage" value="element.Charging Characteristics.field.Charging Characteristics value"/>
    <test parameter="[Charging Characteristics]" condition="number.equals" value="2048"/>
    <parameter name="[Charging Characteristics]" operation="protocol.setFromMessage" value="element.Charging Characteristics"/>
    <test parameter="[Charging Characteristics]" condition="binary.equals" value="5f0002000800"/>
                                        
    <sendMessageGTP name="send message" channel="[channel]">
        <headerV2 name="echoResponse" piggyFlag = "0" teidFlag = "1" tunnelEndpointId = "[tunnelEndpointId]" sequenceNumber="[seqNum]"/>
        <element identifier="Recovery" coding="TLIV">
            <field name="Recovery" value="23"/>
        </element>
    </sendMessageGTP>

    <finally>
        <removeListenpointGTP name="listenpoint"/>
    </finally>
</scenario>

<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>

    <function name="decodeRTPEvent">
        <input>
            <parameter name="[function:binaryRTPEvent]"  type="binary" />
        </input>        
        <do>        
            <!-- use binary.elementToXml operation -->
            <parameter name="[xmlEAP]" operation="binary.elementToXml" value="[binaryRTPEvent]" value2="binary/dictionary_RTPEvent.xml"/>
                 
            <!-- use binary.elementSetFrom operation -->                 
            <parameter name="[event]" operation="binary.elementSetFrom" value="[binaryRTPEvent]" value2="element.HeaderRTPEvent.field.event" value3="binary/dictionary_RTPEvent.xml"/>
            <parameter name="[flag_E]" operation="binary.elementSetFrom" value="[binaryRTPEvent]" value2="element.HeaderRTPEvent.field.flag_E" value3="binary/dictionary_RTPEvent.xml"/>    
            <parameter name="[flag_R]" operation="binary.elementSetFrom" value="[binaryRTPEvent]" value2="element.HeaderRTPEvent.field.flag_R" value3="binary/dictionary_RTPEvent.xml"/>    
            <parameter name="[volume]" operation="binary.elementSetFrom" value="[binaryRTPEvent]" value2="element.HeaderRTPEvent.field.volume" value3="binary/dictionary_RTPEvent.xml"/>    
            <parameter name="[duration]" operation="binary.elementSetFrom" value="[binaryRTPEvent]" value2="element.HeaderRTPEvent.field.duration" value3="binary/dictionary_RTPEvent.xml"/>
                            
        </do>                 
        <output>
            <parameter name="[function:event]"/>
            <parameter name="[function:flag_E]"/>
            <parameter name="[function:flag_R]"/>            
            <parameter name="[function:volume]"/>
            <parameter name="[function:duration]"/>
        </output>  
    </function>

    
    <parameter name="[portSdpInvitee]" operation="set" value="11000" description="Port pour le bloc sdp de l'invitee du XMLloader"/>
    	
  	<receiveMessageSIP name="Wait INVITE" type="INVITE" request="true">
        <parameter name="[lastTo]" operation="protocol.setFromMessage" value="header.To"/>
        <parameter name="[lastFrom]" operation="protocol.setFromMessage" value="header.From"/>
        <parameter name="[lastCallId]" operation="protocol.setFromMessage" value="header.Call-Id"/>
        <parameter name="[lastCseq]" operation="protocol.setFromMessage" value="header.CSeq"/>
        <parameter name="[remoteCseqNumber]" operation="protocol.setFromMessage" value="header.CSeq.Number"/>
        <parameter name="[lastVia]" operation="protocol.setFromMessage" value="header.Via"/>
        <parameter name="[contact]" operation="protocol.setFromMessage" value="header.Contact"/>
        <parameter name="[MaxForwards]" operation="protocol.setFromMessage" value="header.Max-Forwards"/>
        <parameter name="[localTag]" operation="string.random" value="10"/>
        <parameter name="[SDPConnectionAddress0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection.Address"/>
        <parameter name="[SDPMediaPort0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Port"/>
  	</receiveMessageSIP>

  	<sendMessageSIP name="Send 100 Trying">
<!--******************* BEGIN MESSAGE ********************-->
<![CDATA[SIP/2.0 100 Trying
To: [lastTo];tag=[localTag]
From: [lastFrom]
Via: [lastVia]
Call-ID: [lastCallId]
CSeq: [lastCseq]
Proxy-Authorization: IMS_GPRS_SCHEMA token="999"
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Max-Forwards: 70
Content-Length: 0
]]>
<!--******************** END MESSAGE *********************-->
  	</sendMessageSIP>

  	<sendMessageSIP name="Send 180 Ringing">
<!--******************* BEGIN MESSAGE ********************-->
<![CDATA[SIP/2.0 180 Ringing
To: [lastTo];tag=[localTag]
From: [lastFrom]
Via: [lastVia]
Call-ID: [lastCallId]
CSeq: [lastCseq]
Proxy-Authorization: IMS_GPRS_SCHEMA token="999"
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Max-Forwards: 70
Content-Length: 0
]]>
<!--******************** END MESSAGE *********************-->
  	</sendMessageSIP>

  	<sendMessageSIP name="Send 200 OK">
<!--******************* BEGIN MESSAGE ********************-->
<![CDATA[SIP/2.0 200 OK
To: [lastTo];tag=[localTag]
From: [lastFrom]
Via: [lastVia]
Server: PoC-serv/OMA1.0 XmlLoader/v0.0
Call-ID: [lastCallId]
CSeq: [lastCseq]
Contact: [lastTo]
Max-Forwards: [MaxForwards]
Require: timer
Supported: timer
Session-Expires: 1800;refresher=uac
P-Asserted-Identity: <sip:[inviteeName1]@[100_DOMAIN_ADDR]>,<tel:+3381165049515>
P-Charging-Vector: icid-value=000000018b0a45ed;ggsn=139.10.69.237;pdp-sig=yes;gcid=32665c1f;auth-token=0.18800729653403492
P-Com.Siemens.IMSI-ID: 81165049515
P-Com.Siemens.SGSN-ID: 139.10.69.237
P-Charging-Info: ggsn-addr=139.10.69.237;gcid=32665c1f;msisdn=3381165049515;imsi=81165049515;sgsn-addr=139.10.69.237;ccf=139.10.99.99;ccf_sec=139.10.99.99
Content-Type: application/sdp
Content-Length: x

v=0
o=[invitee] 999 999 IN IP4 [remoteHostRTP]
s=-
c=IN IP4 [remoteHostRTP]
t=0 0
m=audio [remotePortRTP] RTP/AVP 97 106
a=rtpmap:97 amr/8000/1
a=rtpmap:106 telephone-event/8000
a=fmtp:97 mode-set=1;octet-align=1;crc=0
a=+g.poc.talkburst
a=maxptime:200
a=ptime:200
m=application [remotePortRTP] udp TBCP
a=fmtp:TBCP queuing=0;tb_priority=1;timestamp=0]]>
<!--******************** END MESSAGE *********************-->
  	</sendMessageSIP>

  	<receiveMessageSIP name="Wait ack" type="ACK" request="true"/>
	
	  <createListenpointRTP name="invitee" localHost="[remoteHostRTP(0)]" localPort="[remotePortRTP]"/>

    <parameter name="[testcase:RTPSessionOpened]" operation="system.semaphorenotify"/>
      
    <receiveMessageRTP name="ReceivePacketRTP1" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="010a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_1:1"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>    
        
    <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>
    <receiveMessageRTP name="ReceivePacketRTP2" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="018a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_1:1"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="True:1"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>    

    <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>    
    <receiveMessageRTP name="ReceivePacketRTP3" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="090a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_9:9"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>

    <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>    
    <receiveMessageRTP name="ReceivePacketRTP4" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="098a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_9:9"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="True:1"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>
    
    <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>
    <receiveMessageRTP name="ReceivePacketRTP5" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="0a0a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_*:10"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>

    <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>    
    <receiveMessageRTP name="ReceivePacketRTP6" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="0a8a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_*:10"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="True:1"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>
    
    <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>
    <receiveMessageRTP name="ReceivePacketRTP7" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="0b0a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_#:11"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>
    
    <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>
    <receiveMessageRTP name="ReceivePacketRTP7" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="0b8a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_#:11"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="True:1"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>
    
    <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>
    <receiveMessageRTP name="ReceivePacketRTP7" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="0c0a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_A:12"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>        

        <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>
    <receiveMessageRTP name="ReceivePacketRTP7" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="0c8a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_A:12"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="True:1"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>        

        <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>
    <receiveMessageRTP name="ReceivePacketRTP7" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="0f0a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_D:15"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>        

        <parameter name="[testcase:firstSeqnum]" operation="number.add" value="[testcase:firstSeqnum]" value2="1"/>
    <receiveMessageRTP name="ReceivePacketRTP7" type="dynamic:106">
        <parameter name="[lastSeqnum]" operation="protocol.setFromMessage" value="header.seqnum"/>
        <test parameter="[lastSeqnum]" condition="number.equals" value="[testcase:firstSeqnum]"/>        
        <parameter name="[lastPayloadRTPEvent]" operation="protocol.setFromMessage" value="payload.binary"/>	
    </receiveMessageRTP >
    <test parameter="[lastPayloadRTPEvent]" condition="binary.equals" value="0f8a00a0"/>    
    
    <call name="decodeRTPEvent" >
      <input>
          <parameter name="[function:binaryRTPEvent]" value="[lastPayloadRTPEvent]"/>
      </input>
      <output>
          <parameter name="[lastEvent]" value="[function:event]"/>
          <parameter name="[lastFlag_E]" value="[function:flag_E]"/>
          <parameter name="[lastFlag_R]" value="[function:flag_R]"/>          
          <parameter name="[lastVolume]" value="[function:volume]"/>
          <parameter name="[lastDuration]" value="[function:duration]"/>            
      </output>      
    </call>    
    <test parameter="[lastEvent]" condition="string.equals" value="DTMF_D:15"/>
    <test parameter="[lastFlag_E]" condition="string.equalsignorecase" value="True:1"/>    
    <test parameter="[lastFlag_R]" condition="string.equalsignorecase" value="False:0"/>    
    <test parameter="[lastVolume]" condition="string.equals" value="[volume]"/>    
    <test parameter="[lastDuration]" condition="string.equals" value="[duration]"/>        

    <removeListenpointRTP name="invitee"/>

  	<receiveMessageSIP name="Wait BYE" type="BYE" request="true">
        <parameter name="[To]" operation="protocol.setFromMessage" value="header.To"/>
        <parameter name="[From]" operation="protocol.setFromMessage" value="header.From"/>
        <parameter name="[CallId]" operation="protocol.setFromMessage" value="header.Call-Id"/>
        <parameter name="[remoteCseqNumber]" operation="protocol.setFromMessage" value="header.CSeq"/>
        <parameter name="[Contact]" operation="protocol.setFromMessage" value="header.Contact"/>
        <parameter name="[Via]" operation="protocol.setFromMessage" value="header.Via"/>
        <parameter name="[MaxForwards]" operation="protocol.setFromMessage" value="header.Max-Forwards"/>
  	</receiveMessageSIP>

  	<sendMessageSIP name="Send 200 OK">
<!--******************* BEGIN MESSAGE ********************-->
<![CDATA[SIP/2.0 200 OK
To: [To]
From: [From]
Via: [Via]
Call-ID: [CallId]
CSeq: [remoteCseqNumber]
Contact: [contact]
Max-Forwards: MaxForwards  
Proxy-Authorization: IMS_GPRS_SCHEMA token="999"
User-Agent: PoC-client/OMA1.0 XmlLoader/v0.0
Max-Forwards: 70
Content-Length: 0
]]>
<!--******************** END MESSAGE *********************-->
  	</sendMessageSIP>
				
</scenario>

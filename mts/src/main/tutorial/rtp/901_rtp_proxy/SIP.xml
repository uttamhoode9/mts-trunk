<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->

<scenario>
	<parameter name="[ServiceTrigger]" operation="set" value=""/>
	<!--############## parameter ports################-->
   <parameter name="[RTPProxyAddrInviter]" operation="set" value="[localHostSIP]"/>
   <parameter name="[RTPProxyAddrInvitee]" operation="set" value="[localHostSIP]"/>
	<!--############## fini parameter ports################-->


	<label name="Begin"/>

	<receiveMessageSIP name="wait_SIP_request" timeout="0" failedOnTimeout="false">
		<parameter name="[lastIsRequest]" operation="protocol.setFromMessage" value="message.request"/>
		<parameter name="[lastResult]" operation="protocol.setFromMessage" value="message.result"/>
		<parameter name="[lastFirstline]" operation="protocol.setFromMessage" value="firstline"/>
		<parameter name="[lastTo]" operation="protocol.setFromMessage" value="header.To"/>
		<parameter name="[lastToTag]" operation="protocol.setFromMessage" value="header.To.parameter.tag"/>
	  	<parameter name="[lastFrom]" operation="protocol.setFromMessage" value="header.From"/>
	  	<parameter name="[lastCallId]" operation="protocol.setFromMessage" value="header.Call-ID"/>
	  	<parameter name="[lastCSeq]" operation="protocol.setFromMessage" value="header.CSeq"/>
	  	<parameter name="[lastVia]" operation="protocol.setFromMessage" value="header.Via"/>
	  	<parameter name="[lastBranchId]" operation="protocol.setFromMessage" value="header.TopmostVia.Parameter.branch"/>
	  	<parameter name="[lastRecord-Route]" operation="protocol.setFromMessage" value="header.Record-Route"/>
	  	<parameter name="[lastRoute]" operation="protocol.setFromMessage" value="header.Route"/>
	  	<parameter name="[lastContact]" operation="protocol.setFromMessage" value="header.Contact"/>
	  	<parameter name="[lastMax-Forwards]" operation="protocol.setFromMessage" value="header.Max-Forwards"/>
	  	<parameter name="[lastContent]" operation="protocol.setFromMessage" value="content"/>
		<parameter name="[lastMethod]" operation="protocol.setFromMessage" value="firstline.Method"/>
		<parameter name="[lastToAddress]" operation="protocol.setFromMessage" value="header.To.Address"/>
	  	<parameter name="[lastFromAddress]" operation="protocol.setFromMessage" value="header.From.Address"/>
	  	<parameter name="[lastContentLength]" operation="protocol.setFromMessage" value="header.Content-Length"/>
	  	<parameter name="[lastContentType]" operation="protocol.setFromMessage" value="header.Content-Type"/>
	  	<parameter name="[lastServiceTrigger]" operation="protocol.setFromMessage" value="header.ServiceTrigger"/>
        <!--############## parameter ports################-->
        <parameter name="[SDPType0]"		operation="protocol.setFromMessage" value="content(0).Type"/>
        <parameter name="[SDPConnectionAddress0]" operation="protocol.setFromMessage" value="content.Sdp.Connection.Address"/>
        <parameter name="[SDPMediaType0]"	operation="protocol.setFromMessage" value="content(0).Sdp.Media.Type"/>
        <parameter name="[SDPMediaPort0]"	operation="protocol.setFromMessage" value="content(0).Sdp.Media.Port"/>
        <parameter name="[SDPMedia0]"		operation="protocol.setFromMessage" value="content(0).Sdp.Media"/>
        <parameter name="[SDPMedia0Size]"	operation="list.size"				value="[SDPMedia0]"/>
        <parameter name="[SDPConnection0]" operation="protocol.setFromMessage" value="content.Sdp.Connection"/>
        <!--############## fini parameter ports################-->
	</receiveMessageSIP>
	<!--<<<<<<<<<<<<<<<<<<<<<<<<<<  initial ports>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-->
<if>
	<condition><test parameter="[lastMethod]" condition="string.equals" value="INVITE"/></condition>
	<then>

<label name="testNB" />
<!-- ################## verrou ##################-->
	<parameter name="[testcase:nbStart]" operation="system.semaphorewait"  />
<!-- ################## fini verrou ##################-->
<parameter name="[nbExist]" operation="list.find" value="[test:listOfnbs]" value2="[nb]"  />
<parameter name="[nbExist]" operation="list.size" value="[nbExist]"  />
<if>
	<condition>
		<test parameter="[nbExist]"	condition="string.equals" value="0" />
	</condition>
	<then>
		<parameter name="[listSize]" operation="list.size" value="[test:listOfnbs]"/>
		<if>
		<condition>
			<test parameter="[listSize]" condition="number.greaterThan" value="[sizeProxy]" />
		</condition>
		<then>
			<sendMessageSIP name="busy">
<![CDATA[SIP/2.0 486 Busy Here
To: [lastTo]
From: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Via: [lastVia]
Contact: [lastContact]
Content-Type: [lastContentType]
Content-Length: [lastContentLength]
]]>
			</sendMessageSIP>
			<goto label="Begin" state="true" />
		</then>
		</if>
		<parameter name="[test:listOfnbs]" operation="list.addlast" value="[test:listOfnbs]" value2="[nb]" />
		<parameter name="[nb]" operation="number.add" value="[nb]" value2="1"/>
		<parameter name="[test:listOfnbs]" operation="list.addlast" value="[test:listOfnbs]" value2="[nb]" />
		<parameter name="[nb]" operation="number.add" value="[nb]" value2="1"/>
		<parameter name="[nb]" operation="number.modulo" value="[nb]" value2="[sizeProxy]"/>
	</then>
	<else>
		<parameter name="[nb]" operation="number.add" value="[nb]" value2="2"/>
		<parameter name="[nb]" operation="number.modulo" value="[nb]" value2="[sizeProxy]"/>
		<goto label="testNB" state="true" />
	</else>
</if>
<!-- ################## verrou ##################-->
	<parameter name="[testcase:nbStart]" operation="system.semaphorenotify" />
<!-- ################## fini verrou ##################-->
<parameter name="[RTPportInviterLocal]" operation="number.add" value="[RTPportInviterLocalBase]" value2="[nb]"/>
<parameter name="[RTPportInviteeLocal]" operation="number.add" value="[RTPportInviteeLocalBase]" value2="[nb]"/>
<parameter name="[RTPportInviterRemote]" operation="set" value="[SDPMediaPort0]" />

</then>
</if>

<!--<<<<<<<<<<<<<<<<<<<<<<<<<< fini initial ports>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-->
	<!--############## parameter ports################-->

	<parameter name="[size]"	operation="list.size" value="[lastContent]" />
	<if>
		<condition>
			<test parameter="[size]"	condition="string.equals" value="0"/>
		</condition>
		<then>
			<goto label="noRTPtrait" state="true" />
		</then>
	</if>
	<if>
	<condition>
		<test parameter="[scenario:SDPType0]"	condition="exists" />
	</condition>
	<then>
		<parameter name="[SDPType0(0)]"	operation="set" value="application/sdp"/>
	</then>
	</if>
	<if>
	<condition>
		<test parameter="[SDPType0]"	condition="string.contains"	value="application/sdp" />
	</condition>
	<then>
		<if>
		<condition>
			<test parameter="[SDPMedia0Size]"	condition="number.greaterThan"	value="1"/>
		</condition>
		<then><!--only find audio and modify-->
			<!--parameter name="[index]"	operation="list.find" value="[SDPMedia0]" value2="audio"/>
			<parameter name="[SDPMediaPort0]"	operation="set" value="[SDPMediaPort0([index])]"/-->
			<parameter name="[SDPMediaPort0]"	operation="set" value="[SDPMediaPort0(0)]"/>
		</then>
		</if>
	</then>
	<else>
	</else>
	</if>
	<label name="noRTPtrait" />
	<!--############## fini parameter ports################-->
	<if>
	    <condition>
	    	<test parameter="[lastIsRequest]" condition="string.equals" value="true"/>
	    </condition>
	    <then>
			<goto  name="goto_Request" label="Request" state="true"/>
	    </then>
	    <else>
    		<goto  name="goto_Response" label="Response" state="true"/>
	    </else>
	</if>

	<label name="Request"/>

	<parameter name="[newBranchId]" operation="string.random" value="10"/>
	<!--############## parameter ports################-->

	<if>
		<condition>
			<test parameter="[size]"	condition="number.greaterThan" value="0"/>
		</condition>
		<then>
			<parameter name="[contentChanged]" operation="string.regexreplaces" value="[lastContent]" value2=" [SDPMediaPort0] " value3=" [RTPportInviteeLocal] " />
		<!--xxxxxxxxxxxxxxxxxxxxxx  IP changexxxxxxxxxxxxxxxxxxxxxxxxxx-->
			<parameter name="[cLine]" operation="string.regexreplaces" value="[SDPConnection0]" value2="[SDPConnectionAddress0]" value3="[RTPProxyAddrInvitee]" />
			<parameter name="[contentChanged]" operation="string.regexreplaces" value="[contentChanged]" value2="[SDPConnection0]" value3="[cLine]" />
		<!--xxxxxxxxxxxxxxxxxxxxxx fini IP changexxxxxxxxxxxxxxxxxxxxxxxxxx-->

			<parameter name="[lastContent]" operation="set" value="[contentChanged]"/>
		</then>
	</if>
	<!--############## fini parameter ports################-->


		<!-- Max-Forwards -->
	<if><condition><test parameter="[lastMax-Forwards]" condition="list.isEmpty" value="0"/></condition>
	    <then>
		</then>
		<else>
			<if><condition><test parameter="[lastMax-Forwards]" condition="string.equals" value="0"/></condition>
			<then>
			<sendMessageSIP name="Answer 483 Too Many Hop">
<![CDATA[SIP/2.0 483 Too Many Hop
Via: [lastVia]
From: [lastFrom]
To: [lastTo]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Record-Route: <sip:[localSIP];transport=[transportRequest];lr>
Record-Route: [lastRecord-Route]
Content-Length: 0]]>
			</sendMessageSIP>



			<goto  name="goto_Begin" label="Begin" state="true"/></then>
			<else>
				<parameter name="[lastMax-Forwards]" operation="number.substract" value="[lastMax-Forwards]" value2="1"/>
			</else>
			</if>
		</else>
	</if>

    	    	<!-- new From header tag -->
	    	<if>
	    	    <condition>
	    	    	<test parameter="[test:FromTag_[lastCallId]]" condition="exists"/>
	    	    </condition>
	    	    <else>
    	    		<parameter name="[test:FromTag_[lastCallId]]" operation="string.random" value="10"/>
	    	    </else>
	    	</if>
	    	<!-- new Call-ID header -->
	    	<if>
	    	    <condition>
	    	    	<test parameter="[test:CallID_[lastCallId]]" condition="exists"/>
	    	    </condition>
	    	    <else>
	    		<parameter name="[test:CallID_[lastCallId]]" operation="number.random" value="1000000"/>
	    	    </else>
	    	</if>
	    	<!-- new CSeq number -->
	    	<if>
	    	    <condition>
	    	    	<test parameter="[lastMethod]" condition="string.equals" value="ACK"/>
	    	    </condition>

	    	    <else>
   			<parameter name="[test:CSeqNumber_[lastCallId]]" operation="number.uid" value="1000000"/>

	    	    </else>
	    	</if>
	    	<!-- new branch ID-->
		<parameter name="[newBranchId]" operation="string.random" value="10"/>
		<!-- remove the first Route if existing -->
		<parameter name="[lastRoute]" operation="removeFirst" value="[lastRoute]"/>
		<!-- Calculate the transactionID -->
		<parameter name="[newTransactionId]" operation="set" value="[test:CSeqNumber_[lastCallId]] [lastMethod]|z9hG4bK[newBranchId]"/>
		<if>
		    <condition>
	    		<test parameter="[lastMethod]" condition="string.equals" value="ACK"/>
	    	    </condition>
	    	    <else>
		    	<!-- add header in context for the response -->
		    	<parameter name="[test:lastTo_[newTransactionId]]" operation="set" value="[lastTo]"/>
    			<parameter name="[test:lastFrom_[newTransactionId]]" operation="set" value="[lastFrom]"/>
    		  	<parameter name="[test:lastCallId_[newTransactionId]]" operation="set" value="[lastCallId]"/>
    		  	<parameter name="[test:lastCSeq_[newTransactionId]]" operation="set" value="[lastCSeq]"/>
    			<parameter name="[test:lastVia_[newTransactionId]]" operation="set" value="[lastVia]"/>
	            </else>
		</if>

		<if><condition><test parameter="[lastMethod]" condition="string.equals" value="INVITE"/></condition>
		    <then>

<!--====================== RTP=========================-->
	<parameter name="[test:SDPinviter]" operation="set" value="[SDPConnectionAddress0]"/>
<!--====================== fini RTP=========================-->


			<sendMessageSIP name="Answer 100 Trying ">
<![CDATA[SIP/2.0 100 Trying
Via: [lastVia]
From: [lastTo]
To: [lastFrom]
Call-ID: [lastCallId]
CSeq: [lastCSeq]
Record-Route: <sip:[localSIP];transport=[transportRequest];lr>
Record-Route: [lastRecord-Route]
Content-Length: 0]]>
			</sendMessageSIP>
		    </then>
		</if>

		<parameter name="[ToTag]" operation="set" value="[lastToAddress]"/>
		<parameter name="[newCallId]" operation="set" value="[test:CallID_[lastCallId]]"/>
        	<if>
        	<condition>
				<test parameter="[lastToTag_[newCallId]]" condition="exists"/>
		    </condition>
		    <then>
   			<parameter name="[ToTag]" operation="set" value="[ToTag];tag=[lastToTag_[newCallId]]"/>
		    </then>
		    <else>
		    </else>
		</if>

			<sendMessageSIP name="proxy_SIP_request">
<![CDATA[
[lastFirstline]
To: [ToTag]
From: [lastFromAddress];tag=[test:FromTag_[lastCallId]]
Call-ID: [test:CallID_[lastCallId]]
CSeq: [test:CSeqNumber_[lastCallId]] [lastMethod]
Via: SIP/2.0/[transportResponse] [localSIP];branch=z9hG4bK[newBranchId]
Via: [lastVia]
Route: [lastRoute]
Record-Route: <sip:[localSIP];transport=[transportRequest];lr>
Record-Route: [lastRecord-Route]
Contact: [lastContact]
Max-Forwards: [lastMax-Forwards]
ServiceTrigger: [ServiceTrigger]
ServiceTrigger: [lastServiceTrigger]
Content-Type: [lastContentType]
Content-Length: [lastContentLength]

[lastContent]
]]>
		</sendMessageSIP>

	<if>
	    <condition>
    		<test parameter="[lastMethod]" condition="string.equals" value="BYE"/>
    	</condition>
    	<then>
<!--====================== RTP=========================-->
<!--+++++++++++++++++++++++ zhaotest release parameters ++++++++++++++++++++++++-->
<!--after CloseSession-->
<parameter name="[test:RTPportInviterLocal[SN1]]" operation="list.remove" />
<parameter name="[test:RTPportInviterLocal[SN2]]" operation="list.remove" />
<parameter name="[test:RTPportInviteeLocal[SN2]]" operation="list.remove" />
<parameter name="[test:RTPportInviteeLocal[SN1]]" operation="list.remove" />
<parameter name="[test:SDPinviter[SN2]]" operation="list.remove" />
<parameter name="[test:SDPinvitee[SN1]]" operation="list.remove" />
<!--+++++++++++++++++++++++ finizhaotest release parameters ++++++++++++++++++++++++-->

<!--<parameter name="[test:isBYE]" operation="set" value="true"/>-->
<removeListenpointRTP name="[test:SDPinvitee][RTPportInviterLocal]" />
<removeListenpointRTP name="[test:SDPinviter][RTPportInviteeLocal]" />
<!--====================== fini RTP=========================-->

<!--<<<<<<<<<<<<<<<<<<<<<<<<<< initial ports>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-->
<parameter name="[index]" operation="list.find" value="[test:listOfnbs]" value2="[nb]" />
<parameter name="[test:listOfnbs]" operation="list.removeat" value="[test:listOfnbs]" value2="[index]" />
<!--<<<<<<<<<<<<<<<<<<<<<<<<<<fini initial ports>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-->

		</then>
<!--======================RTP=========================-->
		<!--else><parameter name="[test:isBYE]" operation="set" value="false"/></else-->
<!--====================== fini RTP=========================-->
   	</if>

 	<goto  name="loop" label="Begin" state="true"/>

	<label name="Response"/>

	<!--############## parameter ports################-->
	<if>
		<condition>
    		<test parameter="[lastResult]" condition="string.equals" value="100"/>
		</condition>
		<then><goto  name="loop" label="Begin" state="true"/></then>
	</if>
	<if>
		<condition>
			<test parameter="[size]"	condition="string.equals" value="0"/>
		</condition>
		<then></then>
		<else>
			<!--parameter name="[contentChanged]" operation="set" value="[contentChanged(0)] [RTPportInviterLocal] [contentChanged(1)]" /-->
			<parameter name="[contentChanged]" operation="string.regexreplaces" value="[lastContent]" value2=" [SDPMediaPort0] " value3=" [RTPportInviterLocal] "/>
		<!--xxxxxxxxxxxxxxxxxxxxxx IP changexxxxxxxxxxxxxxxxxxxxxxxxxx-->
			<parameter name="[cLine]" operation="string.regexreplaces" value="[SDPConnection0]" value2="[SDPConnectionAddress0]" value3="[RTPProxyAddrInviter]" />
			<parameter name="[contentChanged]" operation="string.regexreplaces" value="[contentChanged]" value2="[SDPConnection0]" value3="[cLine]" />
		<!--xxxxxxxxxxxxxxxxxxxxxx fini IP changexxxxxxxxxxxxxxxxxxxxxxxxxx-->

			<parameter name="[lastContent]" operation="set" value="[contentChanged]"/>
		</else>
	</if>

<!--====================== RTP=========================-->
		<if>
		<condition>
			<test parameter="[lastResult]" condition="string.equals" value="200"/>
			<test parameter="[lastCSeq]" condition="string.contains" value="INVITE"/>
		</condition>
		<then>
			<parameter name="[test:SDPinvitee]" operation="set" value="[SDPConnectionAddress0]"/>
			<parameter name="[RTPportInviteeRemote]" operation="set" value="[SDPMediaPort0]"/>

    		<parameter name="[SN1]" operation="set" value="[test:SDPinviter][RTPportInviterLocal]" />
    		<parameter name="[SN2]" operation="set" value="[test:SDPinvitee][RTPportInviteeLocal]" />

    		<parameter name="[test:RTPportInviterLocal[SN1]]" operation="set" value="[RTPportInviterLocal]" />
    		<parameter name="[test:RTPportInviterLocal[SN2]]" operation="set" value="[RTPportInviterLocal]" />
    		<parameter name="[test:RTPportInviteeLocal[SN2]]" operation="set" value="[RTPportInviteeLocal]" />
    		<parameter name="[test:RTPportInviteeLocal[SN1]]" operation="set" value="[RTPportInviteeLocal]" />
    		<parameter name="[test:SDPinviter[SN2]]" operation="set" value="[test:SDPinviter]" />
    		<parameter name="[test:SDPinvitee[SN1]]" operation="set" value="[test:SDPinvitee]" />

    		<createListenpointRTP name="[SN1]" localPort="[RTPportInviterLocal]"/> <!--remoteHost="[test:SDPinviter]"	remotePort="[RTPportInviterRemote]"/-->
    		<createListenpointRTP name="[SN2]" localPort="[RTPportInviteeLocal]"/> <!--remoteHost="[test:SDPinvitee]" remotePort="[RTPportInviteeRemote]"/-->

		</then>
		</if>
<!--====================== fini RTP=========================-->
	<!--############## fini parameter ports################-->
	<!-- remove the first Via if existing -->
	<parameter name="[lastVia]" operation="removeFirst" value="[lastVia]"/>
        <!-- new To header tag-->
	<if>
	    <condition>
	    	<test parameter="[test:ToTag_[lastCallId]]" condition="exists"/>
	    </condition>
	    <else>
    	    	<parameter name="[test:ToTag_[lastCallId]]" operation="string.random" value="10"/>
	    </else>
	</if>
	<parameter name="[test:lastToTag_[lastCallId]]" operation="set" value="[lastToTag]"/>
	<!-- Calculate the transactionID -->
	<parameter name="[newTransactionId]" operation="set" value="[lastCSeq]|[lastBranchId]"/>
	<sendMessageSIP name="proxy_SIP_response">
<![CDATA[
[lastFirstline]
To: [test:lastTo_[newTransactionId]];tag=[test:ToTag_[lastCallId]]
From: [test:lastFrom_[newTransactionId]]
Call-ID: [test:lastCallId_[newTransactionId]]
CSeq: [test:lastCSeq_[newTransactionId]]
Via: [test:lastVia_[newTransactionId]]
Record-Route: [lastRecord-Route]
Contact: [lastContact]
ServiceTrigger: [ServiceTrigger]
ServiceTrigger: [lastServiceTrigger]
Content-Type: [lastContentType]
Content-Length: [lastContentLength]

[lastContent]
]]>
	</sendMessageSIP>

 	<goto  name="loop" label="Begin" state="true"/>

</scenario>

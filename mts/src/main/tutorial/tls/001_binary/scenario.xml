<?xml version="1.0" encoding="UTF-8"?>

<scenario>

    <openChannelTLS name="channelTLS" remoteHost="[remoteHostTLS]" remotePort="[remotePortTLS]"/>    

    <receiveMessageTLS timeout="1" type="SYN-ACK">
        <parameter name="[channel]" operation="protocol.setFromMessage" value="channel.name"/>    
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.equals" value="" />
    </receiveMessageTLS>

    <sendMessageTLS channel="channelTLS">
        <data format="binary">h41:1 h441:1 b01000001:1 d0000065:1 65</data>
    </sendMessageTLS>

    <sendMessageTLS channel="channelTLS">
        <data format="binary">h41:1 h441:1 b01000001:1 d0000065:1 65</data>
    </sendMessageTLS>

    <receiveMessageTLS channel="[channel]" type="SEQ-ACK" timeout="1">
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.equals" value="AAAAA" />
    </receiveMessageTLS>

    <receiveMessageTLS channel="[channel]" type="SEQ-ACK" timeout="1">
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.equals" value="AAAAA" />
    </receiveMessageTLS>

    <parameter name="[data]" operation="set" value="0123456789" value2="1000"/>    
    <sendMessageTLS channel="channelTLS">
        <data format="text">[data]</data>
    </sendMessageTLS>

    <receiveMessageTLS channel="[channel]" type="SEQ-ACK" timeout="1">
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.contains" value="0123456789" />
    </receiveMessageTLS>

    <receiveMessageTLS channel="[channel]" type="SEQ-ACK" timeout="1">
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.contains" value="0123456789" />
    </receiveMessageTLS>

    <receiveMessageTLS channel="[channel]" type="SEQ-ACK" timeout="1">
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.contains" value="0123456789" />
    </receiveMessageTLS>

    <receiveMessageTLS channel="[channel]" type="SEQ-ACK" timeout="1">
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.contains" value="0123456789" />
    </receiveMessageTLS>

    <receiveMessageTLS channel="[channel]" type="SEQ-ACK" timeout="1">
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.contains" value="0123456789" />
    </receiveMessageTLS>

    <receiveMessageTLS channel="[channel]" type="SEQ-ACK" timeout="1">
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.contains" value="0123456789" />
    </receiveMessageTLS>

    <closeChannelTLS name="channelTLS" />
    
    <receiveMessageTLS channel="channelTLS" type="FIN-ACK" timeout="1">
        <parameter name="[temp]" operation="protocol.setFromMessage" value="data.binary" />
        <parameter name="[contents]" operation="protocol.setFromMessage" value="data.text" />
        <test parameter="[contents]" condition="string.equals" value="" />
    </receiveMessageTLS>
    
</scenario>

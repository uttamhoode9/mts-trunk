<?xml version="1.0" encoding="UTF-8"?>

<scenario>
    <!-- test exists / create / delete -->

	<parameter name="[result]" operation="system.timestamp" />
	<parameter name="[result]" operation="system.timestamp" value="1970"/>
	<parameter name="[result]" operation="system.timestamp" value="1900"/>

    <!-- Java Runtime Environment version -->
    <parameter name="[result]" operation="system.readproperty" value="java.version"/>
    <!-- Java Runtime Environment vendor --> 
    <parameter name="[result]" operation="system.readproperty" value="java.vendor"/>
    <!-- Java vendor URL -->
    <parameter name="[result]" operation="system.readproperty" value="java.vendor.url"/>
    <!-- Java installation directory -->
    <parameter name="[result]" operation="system.readproperty" value="java.home"/>
    <!-- Java Virtual Machine specification version -->
    <parameter name="[result]" operation="system.readproperty" value="java.vm.specification.version"/>
    <!-- Java Virtual Machine specification vendor -->
    <parameter name="[result]" operation="system.readproperty" value="java.vm.specification.vendor"/>
    <!-- Java Virtual Machine specification name -->
    <parameter name="[result]" operation="system.readproperty" value="java.vm.specification.name"/>
    <!-- Java Virtual Machine implementation version --> 
    <parameter name="[result]" operation="system.readproperty" value="java.vm.version"/>
    <!-- Java Virtual Machine implementation vendor -->
    <parameter name="[result]" operation="system.readproperty" value="java.vm.vendor"/>
    <!-- Java Virtual Machine implementation name -->
    <parameter name="[result]" operation="system.readproperty" value="java.vm.name"/>
    <!-- Java Runtime Environment specification version -->
    <parameter name="[result]" operation="system.readproperty" value="java.specification.version"/>
    <!-- Java Runtime Environment specification vendor -->
    <parameter name="[result]" operation="system.readproperty" value="java.specification.vendor"/>
    <!-- Java Runtime Environment specification name -->
    <parameter name="[result]" operation="system.readproperty" value="java.specification.name"/>
    <!-- Java class format version number -->
    <parameter name="[result]" operation="system.readproperty" value="java.class.version"/>
    <!-- Java class path -->
    <parameter name="[result]" operation="system.readproperty" value="java.class.path"/>
    <!-- List of paths to search when loading libraries -->
    <parameter name="[result]" operation="system.readproperty" value="java.library.path"/>
    <!-- Default temp file path -->
    <parameter name="[result]" operation="system.readproperty" value="java.io.tmpdir"/>
    <!-- Name of JIT compiler to use -->
    <parameter name="[result]" operation="system.readproperty" value="java.compiler"/>
    <!-- Path of extension directory or directories -->
    <parameter name="[result]" operation="system.readproperty" value="java.ext.dirs"/>
    <!-- Operating system name -->
    <parameter name="[result]" operation="system.readproperty" value="os.name"/>
    <!-- Operating system architecture -->
    <parameter name="[result]" operation="system.readproperty" value="os.arch"/>
    <!-- Operating system version -->
    <parameter name="[result]" operation="system.readproperty" value="os.version"/> 
    <!-- File separator ("/" on UNIX) -->
    <parameter name="[result]" operation="system.readproperty" value="file.separator"/>
    <!-- Path separator (":" on UNIX) -->
    <parameter name="[result]" operation="system.readproperty" value="path.separator"/>
    <!-- Line separator ("\n" on UNIX) -->
    <parameter name="[result]" operation="system.readproperty" value="line.separator"/>
    <!-- User's account name -->
    <parameter name="[result]" operation="system.readproperty" value="user.name"/>
    <!-- User's home directory -->
    <parameter name="[result]" operation="system.readproperty" value="user.home"/>
    <!-- User's current working directory -->
    <parameter name="[result]" operation="system.readproperty" value="user.dir"/>

    <parameter name="[result]" operation="system.readproperty" value="user.dir"/>
    <test parameter="[result]" condition="string.endswith" value="bin"/>

	<parameter name="[ipaddr]" operation="system.ipaddress" value="lo" value2="6"/>
    <test parameter="[ipaddr]" condition="list.size" value="1"/>
	<parameter name="[ipaddr]" operation="system.ipaddress" value2="6"/>
    <or>
		  <test parameter="[ipaddr]" condition="list.size" value="2"/>
		  <test parameter="[ipaddr]" condition="list.size" value="3"/>
		  <test parameter="[ipaddr]" condition="list.size" value="4"/>
		  <test parameter="[ipaddr]" condition="list.size" value="5"/>
		  <test parameter="[ipaddr]" condition="list.size" value="6"/>
		  <test parameter="[ipaddr]" condition="list.size" value="7"/>
		  <test parameter="[ipaddr]" condition="list.size" value="8"/>
		  <test parameter="[ipaddr]" condition="list.size" value="9"/>
	</or>
	
    <parameter name="[ipaddr]" operation="system.ipaddress" value="eth1" value2="4"/>
    <or>
    	<test parameter="[ipaddr]" condition="list.size" value="0"/>
    	<test parameter="[ipaddr]" condition="list.size" value="1"/>
    </or>
    <parameter name="[ipaddr]" operation="system.ipaddress" value="lo" value2="4"/>
    <test parameter="[ipaddr]" condition="list.size" value="1"/>
    <parameter name="[ipaddr]" operation="system.ipaddress" value2="4"/>
    <or>
		  <test parameter="[ipaddr]" condition="list.size" value="2"/>
		  <test parameter="[ipaddr]" condition="list.size" value="3"/>
		  <test parameter="[ipaddr]" condition="list.size" value="4"/>
		  <test parameter="[ipaddr]" condition="list.size" value="5"/>
		  <test parameter="[ipaddr]" condition="list.size" value="6"/>
		  <test parameter="[ipaddr]" condition="list.size" value="7"/>
		  <test parameter="[ipaddr]" condition="list.size" value="8"/>
		  <test parameter="[ipaddr]" condition="list.size" value="9"/>
	</or>
	  <parameter name="[ipaddr.index]" operation="list.find" value="[ipaddr]" value2="127.0.0.1" />
      <test parameter="[ipaddr.index]" condition="number.greaterequalthan" value="1"/>
   	  <parameter name="[os]" operation="system.readproperty" value="os.name"/>
      <!--if>
        <condition>
		      <test parameter="[os]" condition="string.equals" value="Linux"/> 
	      </condition>
	      <then>
		      <parameter name="[cmd]" operation="system.command" value="./startCmd.sh"/>
	      </then>	
	      <else>
		      <parameter name="[cmd]" operation="system.command" value="./startCmd.bat"/>
	      </else>
      </if-->	
	    <if>
	      <condition>
		      <test parameter="[os]" condition="string.equals" value="Linux"/> 
	      </condition>
	      <then>
		      <parameter name="[cmd]" operation="system.command" value="ping -c 10 -s 1000 -i 0 192.168.190.12"/>	      
		      <parameter name="[cmd]" operation="system.command" value="echo plop"/>
	      </then>	
	      <else>
		      <parameter name="[cmd]" operation="system.command" value="cmd /C ping -n 1 -l 1000 192.168.190.12"/>	      
		      <parameter name="[cmd]" operation="system.command" value="cmd /c echo plop"/>
	      </else>
      </if>	
	
    <test parameter="[cmd.standardOut]" condition="string.contains" value="plop"/>
    <test parameter="[cmd.errorOut]" condition="string.equals" value=""/>
    <test parameter="[cmd.returnCode]" condition="number.equals" value="0"/>

    <stats>
        <reset path=" > user " name="counter"/>
    </stats>
    <parameter name="[statsCounter]" operation="system.statCounter" value=" > user " value2="counter"/>
    <test parameter="[statsCounter]" condition="list.isEmpty"/>

    <stats>
        <counter name="counter" summary="co" complete="cDescr.complete">
            <increase>3.14</increase> 
            <increase>3.14</increase> 
        </counter>
    </stats>

    <parameter name="[statsCounter]" operation="system.statCounter" value=" > user " value2="counter"/>
    <test parameter="[statsCounter]" condition="string.equals" value="statsCounter.Count"/>
    <test parameter="[statsCounter.Count]" condition="number.equals" value="6.28"/>

    <stats>
        <reset path="> user " name="flow"/>
    </stats>
    <parameter name="[statsFlow]" operation="system.statCounter" value="> user " value2="flow"/>
    <test parameter="[statsFlow]" condition="list.isEmpty"/>

    <stats>
        <flow name="flow" summary="fl" complete="fDescr.complete">
            <increase>1.5</increase> 
        </flow>
    </stats>
    <pause name="pause" seconds="0.2"/>
    <stats>
        <flow name="flow">
            <increase>1.5</increase> 
        </flow>
    </stats>
    <pause name="pause" seconds="0.2"/>

    <parameter name="[statsFlow]" operation="system.statCounter" value="> user " value2="flow"/>
    <test parameter="[statsFlow(0)]" condition="string.equals" value="statsFlow.Count"/>
    <test parameter="[[statsFlow(0)]]" condition="number.equals" value="3"/>
    <test parameter="[statsFlow(1)]" condition="string.equals" value="statsFlow.Min"/>
    <test parameter="[[statsFlow(1)]]" condition="number.equals" value="0"/>
    <test parameter="[statsFlow(2)]" condition="string.equals" value="statsFlow.Av"/>
    <!--test parameter="[[statsFlow(2)]]" condition="number.equals" value="0"/-->
    <test parameter="[statsFlow(3)]" condition="string.equals" value="statsFlow.Dev"/>
    <!--test parameter="[[statsFlow(3)]]" condition="number.equals" value="0"/-->
    <test parameter="[statsFlow(4)]" condition="string.equals" value="statsFlow.Max"/>
    <!--test parameter="[[statsFlow(4)]]" condition="number.equals" value="30"/-->

    <stats>
        <reset path="> user " name="percent"/>
    </stats>
    <parameter name="[statsPercent]" operation="system.statCounter" value="> user " value2="percent"/>
    <test parameter="[statsPercent]" condition="list.isEmpty"/>

    <stats>
        <percent name="percent" summary="pc" complete="pDescr.complete">
            <incValue>10</incValue>
            <incTotal>100.0</incTotal>
        </percent>
    </stats>
    <pause name="pause" seconds="0.2"/>
    <stats>
        <percent name="percent">
            <incValue>20</incValue>
            <incTotal>100.0</incTotal>
        </percent>
    </stats>

    <parameter name="[statsPercent]" operation="system.statCounter" value="> user " value2="percent"/>
    <test parameter="[statsPercent(0)]" condition="string.equals" value="statsPercent.Count"/>
    <test parameter="[[statsPercent(0)]]" condition="number.equals" value="30"/>
    <test parameter="[statsPercent(1)]" condition="string.equals" value="statsPercent.Min"/>
    <test parameter="[[statsPercent(1)]]" condition="number.equals" value="0"/>
    <test parameter="[statsPercent(2)]" condition="string.equals" value="statsPercent.Av"/>
    <test parameter="[[statsPercent(2)]]" condition="number.equals" value="15"/>
    <test parameter="[statsPercent(3)]" condition="string.equals" value="statsPercent.Dev"/>
    <test parameter="[[statsPercent(3)]]" condition="number.equals" value="0"/>
    <test parameter="[statsPercent(4)]" condition="string.equals" value="statsPercent.Max"/>
    <!--test parameter="[[statsPercent(4)]]" condition="number.equals" value="20"/-->


    <stats>
        <reset path="> user " name="value"/>
    </stats>
    <parameter name="[statsValue]" operation="system.statCounter" value="> user " value2="value"/>
    <test parameter="[statsValue]" condition="list.isEmpty"/>

    <stats>
        <value name="value" summary="val" complete="vDescr.complete">
    	    <newValue>90</newValue>	
        </value>                
    </stats>
    <pause name="pause" seconds="0.1"/>
    <stats>
        <value name="value">
            <newValue>110</newValue>            
        </value>                
    </stats>
    <pause name="pause" seconds="0.1"/>
    <stats>
        <value name="value">
            <newValue>100</newValue>            
        </value>                
    </stats>
    <pause name="pause" seconds="0.1"/>

    <parameter name="[statsValue]" operation="system.statCounter" value="> user " value2="value"/>
    <test parameter="[statsValue(0)]" condition="string.equals" value="statsValue.Min"/>
    <test parameter="[[statsValue(0)]]" condition="number.equals" value="90"/>
    <test parameter="[statsValue(1)]" condition="string.equals" value="statsValue.Av"/>
    <test parameter="[[statsValue(1)]]" condition="number.equals" value="100"/>
    <test parameter="[statsValue(2)]" condition="string.equals" value="statsValue.Dev"/>
    <!--test parameter="[[statsValue(2)]]" condition="number.equals" value="8.164965809277223"/-->
    <test parameter="[statsValue(3)]" condition="string.equals" value="statsValue.Max"/>
    <test parameter="[[statsValue(3)]]" condition="number.equals" value="110"/>

    <stats>
        <reset path="> user " name="text"/>
    </stats>
    <parameter name="[statsValue]" operation="system.statCounter" value="> user " value2="text"/>
    <test parameter="[statsValue]" condition="list.isEmpty"/>

    <stats>
        <text name="text" summary="txt" complete="tDescr.complete">
    	    <newValue>Bonjour !</newValue>	
        </text>                
    </stats>
    <pause name="pause" seconds="0.1"/>
    <stats>
        <text name="text">
            <newValue>My name is IMSLoader !</newValue>            
        </text>                
    </stats>
    <pause name="pause" seconds="0.1"/>

    <parameter name="[statsText]" operation="system.statCounter" value="> user " value2="text"/>
    <test parameter="[statsText(0)]" condition="string.equals" value="statsText.Text"/>
    <test parameter="[[statsText(0)]]" condition="string.equals" value="My name is IMSLoader !"/>

    <parameter name="[statsNull]" operation="system.statCounter" value="user > value > notdefined" value2="notdefined"/>
    <test parameter="[statsNull]" condition="list.isEmpty"/>

    <parameter name="[ips]" operation="system.iplist" value="192.168.0.0/30" />
    <test parameter="[ips]" condition="list.size" value="2"/>
    <test parameter="[ips(0)]" condition="string.equals" value="192.168.0.1"/>
    <test parameter="[ips(1)]" condition="string.equals" value="192.168.0.2"/>

    <parameter name="[ips]" operation="system.iplist" value="192.168.1.0" value2="255.255.255.252"/>
    <test parameter="[ips]" condition="list.size" value="2"/>
    <test parameter="[ips(0)]" condition="string.equals" value="192.168.1.1"/>
    <test parameter="[ips(1)]" condition="string.equals" value="192.168.1.2"/>

    <!-- sql server is not available in general   
    <parameter name="[sql]" operation="system.querySql" value="localhost::root::test" value2="create database testSystem;" />
    
    <parameter name="[sql]" operation="system.querySql" value="localhost::::testSystem" value2="create table Premier (first integer, second integer, third integer);" />
    <parameter name="[sql]" operation="system.querySql" value="::root::testSystem" value2="insert into Premier values (1,2,3);" />
    <parameter name="[sql]" operation="system.querySql" value="::::testSystem" value2="insert into Premier values (4,5,6);" />
    <parameter name="[sql]" operation="system.querySql" value="::::testSystem" value2="select * from Premier;" />

    <parameter name="[size]" operation="list.size" value="[sql]"/>
    <test parameter="[size]" condition="number.equals" value="3" />
    <parameter name="[premiereValeur]" operation="list.getfirst" value="[sql.first]"/>
    <test parameter="[premiereValeur]" condition="number.equals" value="1"/>
    <parameter name="[derniereValeur]" operation="list.getlast" value="[sql.third]"/>
    <test parameter="[derniereValeur]" condition="number.equals" value="6"/>
    
    <finally>
    	<parameter name="[sql]" operation="system.querySql" value="localhost::::test" value2="drop database testSystem"/>
    </finally>
    -->

</scenario>

<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->
<!-- name="Send 3GPP CX Multimedia Authentication request (MAR/MAA)" -->

<scenario>
    
    <parameter name="[timeout]" operation="set" value="10" />
    <parameter name="[emptyList]" operation="list.create"/>
    <parameter name="[stateValue]" operation="set" value="true"/>

    <parameter name="[stateValue]" operation="set" value="true"/>
    <parameter name="[testcase:newHopByHop]" operation="number.random" value="1000000000"/>
    <parameter name="[testcase:newEndToEnd]" operation="number.random" value="1000000000"/>
    <sendMessageDIAMETER name="SendRequestMAR" remoteURL="diameter://[remoteDIAM]" destScenario="server">
          <header request="true" command="Multimedia-Authentitcation" applicationId="[applicationID]"
                  hopByHop="[newHopByHop]" endToEnd="[newEndToEnd]"/>
          <avp code="Session-Id" value="[sessionId]"/>
          <avp code="Origin-Host" value="[localHostDIAM]"/>
          <avp code="Origin-Realm" value="[localRealmDIAM]"/>
          <avp code="Destination-Host" value="[remoteHostDIAM]"/>	
          <avp code="Destination-Realm" value="[remoteRealmDIAM]"/>		
          <avp code="Vendor-Specific-Application-Id">                                      
              <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>             
              <avp code="Acct-Application-Id" value="[applicationID]"/>
              <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
              <avp code="Auth-Application-Id" value="[applicationID]"/>
              <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
              <avp code="Vendor-Id" value="TGPP"/>
              <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
          </avp>
          <avp code="Auth-Session-State" value="NO_STATE_MAINTAINED"/>
          <avp code="Public-Identity" value="sip:+33875631975@sip.pfdev.fr" type="UTF8String" 
               vendorId="10415" mandatory="false" private="false"/>
          <avp code="Number-Authentication-Items" value="1" vendorId="TGPP"/>
          <avp code="Auth-Data-Item" vendorId="TGPP" state="true">
              <avp code="Item-Number" value="0" vendorId="TGPP"/>
              <avp code="Authentication-Scheme" value="DIGEST" vendorId="TGPP"/>
              <avp code="Authenticate" value='Digest username=\"33875631975@sip.pfdev.fr\",realm=\"sip.pfdev.fr\",cnonce=\"40b18ccf\",nc=00000001,qop=auth,uri=\"sip:sip.pfdev.fr\",nonce=\"21bc27679ddac8fd6c0088817c8ae385\",response=\"38179d99cc34ce0ad002ac4d70e37c0a\",algorithm=MD5' vendorId="TGPP"/>
              <avp code="Authentication-Context" value="INVITE" vendorId="TGPP"/>
          </avp>
          <avp code="99999999" value="1234567890" vendorId="TGPP" state="true"/>
          <avp code="99999999" value="1111111111" vendorId="TGPP" state="false"/>
          <avp code="IMS-Information" vendorId="TGPP" state="true">
              <avp code="Event-Type" value="badValue1" vendorId="TGPP" state="false"/>
              <avp code="Role-Of-Node" value="[emptyList]" vendorId="TGPP" state="false"/>
              <avp code="Node-Functionality" value="1212121" vendorId="TGPP" state="[stateValue]"/>
              <avp code="User-Session-ID" value="[emptyList]" vendorId="TGPP" state="[stateValue]"/>
              <avp code="Calling-Party-Address" value="badValue5" vendorId="TGPP"/>
              <avp code="Called-Party-Address" value="[emptyList]" vendorId="TGPP"/>
          </avp>
          
          <!-- type = OctetString -->
          <avp code="CHAP-Password" type="OctetString" value="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"/>
          <!-- type = UTF8String -->
          <avp code="User-Name" type="UTF8String" value="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"/>
          <!-- type = IPAddress -->
          <avp code="Framed-IP-Address" value="192.168.90.117"/>
          <avp code="Framed-IP-Address" type="IPAddress" value="[2a01:cf00:33:5::6e01]"/>
          <!-- type = Integer32 -->
          <avp code="Management-Privilege-Level" value="-2000000000"/>
          <avp code="136" type="Integer32" value="2000000000"/>
          <!-- type = Integer64 -->
          <!-- TODO -->
          <avp code="447" value="-2000000000000000000" vendorId="0"/>
          <!--avp code="Value-Digits" value="-2000000000000000000" vendorId="0"/-->
          <avp code="447" type="Integer64" value="2000000000000000000"/>
          <!-- type = Unsigned32 -->
          <avp code="NAS-Port" type="Unsigned32" value="4000000000"/>
          <avp code="5" type="Unsigned32" value="2000000000"/>
          <!-- type = Unsigned64 -->
          <avp code="Framed-Interface-Id" value="8000000000000000000"/>
          <avp code="96" type="Unsigned64" value="4000000000000000000"/>
          <!-- type = Time -->
          <avp code="Event-Timestamp" value="20/02/2011 17:35:56:555" vendorId="0"/>
          <avp code="55" type="Time" value="04/08/2015 11:12:59:123" vendorId="0"/>
          <!-- type = Float32 -->
          <avp code="Peak-Traffic-Rate" value="123456789012345678901234567890"/>
          <avp code="498" type="Float32" value="9.876543210e-45"/>
          <avp code="Peak-Traffic-Rate" value="1.234567890e38"/>
          <!-- type = Float64 -->
          <avp code="Cost" vendorId="Ericsson" value="1234567890123456789012345678901234567890123456789012345678901234567890"/>
          <avp code="603" type="Float64" value="-1e308"/>
          <avp code="Cost" type="Float64" value="-1e-323"/>
    </sendMessageDIAMETER>

    <receiveMessageDIAMETER name="Receive Answer (MAA)" request="false" type="Multimedia-Authentitcation:506" result="DIAMETER_SUCCESS:2001"  timeout="[timeout]">
        <parameter name="[result]" operation="protocol.setFromMessage" value="message.result"/>
    </receiveMessageDIAMETER>

        <parameter name="[listenpointName]" operation="protocol.setFromMessage" value=" listenpoint.name  "/>
    <test parameter="[listenpointName]" condition="list.isEmpty"/>
    <parameter name="[listenpointHost]" operation="protocol.setFromMessage" value="listenpoint.localHost"/>
    <test parameter="[listenpointHost]" condition="string.equals" value="0.0.0.0"/>
    <parameter name="[listenpointPort]" operation="protocol.setFromMessage" value="listenpoint.localPort"/>
    <test parameter="[listenpointPort]" condition="string.equals" value="[localPortDIAM]"/>
    
    <parameter name="[request]" operation="protocol.setFromMessage" value="message.request"/>
    <test parameter="[request]" condition="string.equals" value="false"/>
    <parameter name="[type]" operation="protocol.setFromMessage" value="message.type"/>
    <test parameter="[type]" condition="string.equals" value="Multimedia-Authentitcation:506"/>
    <parameter name="[result]" operation="protocol.setFromMessage" value="message.result"/>
    <test parameter="[result]" condition="string.equals" value="2001"/>
    <parameter name="[text]" operation="protocol.setFromMessage" value="message.text"/>
    <parameter name="[binary]" operation="string.toBinary" value="[text]"/>
    <parameter name="[binReference]" operation="set" value="01000278800001fa000010e106f8ad4e06f8ad4d000001074000001c653466363738396631626666653961363437343300000108600000143133372e35382e38342e37380000012840000011636c69656e742e667200000000000125400000143133372e35382e38342e37380000011b40000011636c69656e742e667200000000000104400000200000010a6000000c000028af000001024000000c000010e1000001156000000c0000000100000002e0000029000028af7369703a2b3333383735363331393735407369702e70666465762e667200000000000402e0000010000028af00000001000003fae0000138000028af000003fde0000010000028af00000000000003fce0000010000028af00000002000003fbe00000f8000028af44696765737420757365726e616d653d5c223333383735363331393735407369702e70666465762e66725c222c7265616c6d3d5c227369702e70666465762e66725c222c636e6f6e63653d5c2234306231386363665c222c6e633d30303030303030312c716f703d617574682c7572693d5c227369703a7369702e70666465762e66725c222c6e6f6e63653d5c2232316263323736373964646163386664366330303838383137633861653338355c222c726573706f6e73653d5c2233383137396439396363333463653061643030326163346437306533376330615c222c616c676f726974686d3d4d443500000400e0000012000028af494e5649544500000000036cc0000034000028af0000035ec0000010000028af00127ed90000033fc0000015000028af62616456616c756535000000000000086000000c893a544e00000008600000182a01cf00003300050000000000006e01"/>
    <!--test parameter="[text]" condition="binary.equals" value="[binReference]"/-->
    <parameter name="[xml]" operation="protocol.setFromMessage" value="message.xml"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2=" " value3=""/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="hopByHop=&quot;[0-9]*&quot;" value3="X"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="endToEnd=&quot;[0-9]*&quot;" value3="X"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="code=&quot;263&quot;value=&quot;[0-9,a,b,c,d,e,f]*&quot;" value3="X"/>
    
    <parameter name="[protocol]" operation="protocol.setFromMessage" value="message.protocol"/>
    <test parameter="[protocol]" condition="string.equals" value="DIAMETER"/>
    <parameter name="[request1]" operation="protocol.setFromMessage" value="header.request"/>
    <test parameter="[request1]" condition="string.equals" value="false"/>
    <parameter name="[code]" operation="protocol.setFromMessage" value="header.command"/>
    <test parameter="[code]" condition="string.equals" value="506"/>
    <parameter name="[appId]" operation="protocol.setFromMessage" value="header.applicationId"/>
    <test parameter="[appId]" condition="string.equals" value="[applicationID]"/>
    <parameter name="[hopByHop]" operation="protocol.setFromMessage" value="header.hopByHop"/>
    <test parameter="[hopByHop]" condition="number.equals" value="[newHopByHop]"/>
    <parameter name="[endToEnd]" operation="protocol.setFromMessage" value="header.endToEnd"/>
    <test parameter="[endToEnd]" condition="number.equals" value="[newEndToEnd]"/>
    <parameter name="[error]" operation="protocol.setFromMessage" value="header.error"/>
    <test parameter="[error]" condition="string.equals" value="true"/>
    <parameter name="[proxiable]" operation="protocol.setFromMessage" value="header.proxiable"/>
    <test parameter="[proxiable]" condition="string.equals" value="true"/>
    <parameter name="[retransmit]" operation="protocol.setFromMessage" value="header.retransmit"/>
    <test parameter="[retransmit]" condition="string.equals" value="true"/>

</scenario>

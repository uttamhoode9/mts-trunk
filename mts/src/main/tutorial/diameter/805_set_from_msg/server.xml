<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->
<!-- name="Send 3GPP CX Multimedia Authentication answer (MAR/MAA)" -->

<scenario>
    
    <receiveMessageDIAMETER name="ReceiveRequestMAR" request="true" type="Multimedia-Authentitcation:506">
        <parameter name="[commandCode]" operation="protocol.setFromMessage" value=" header.command "/>
        <parameter name="[hopByHop]" operation="protocol.setFromMessage" value="header.hopByHop"/>
        <parameter name="[endToEnd]" operation="protocol.setFromMessage" value="header.endToEnd"/>
        <parameter name="[sessionId]" operation="protocol.setFromMessage" value="avp.Session-Id.value"/>
    </receiveMessageDIAMETER>
        
    <parameter name="[listenpointName]" operation="protocol.setFromMessage" value=" listenpoint.name  "/>
    <test parameter="[listenpointName]" condition="list.isEmpty"/>
    <parameter name="[listenpointHost]" operation="protocol.setFromMessage" value="listenpoint.localHost"/>
    <test parameter="[listenpointHost]" condition="string.equals" value="0.0.0.0"/>
    <parameter name="[listenpointPort]" operation="protocol.setFromMessage" value="listenpoint.localPort"/>
    <test parameter="[listenpointPort]" condition="string.equals" value="[localPortDIAM]"/>
    
    <parameter name="[request]" operation="protocol.setFromMessage" value="message.request"/>
    <test parameter="[request]" condition="string.equals" value="true"/>
    <parameter name="[type]" operation="protocol.setFromMessage" value="message.type"/>
    <test parameter="[type]" condition="string.equals" value="Multimedia-Authentitcation:506"/>
    <parameter name="[binary]" operation="protocol.setFromMessage" value="message.binary"/>
    <parameter name="[subBinary1]" operation="binary.subBinary" value="[binary]" value2="0" value3="12"/>    
    <test parameter="[subBinary1]" condition="binary.equals" value="01000468800001fa000010e1"/>
    <parameter name="[subBinary2]" operation="binary.subBinary" value="[binary]" value2="20"/>    
    <test parameter="[subBinary2]" condition="binary.equals" value="000001074000002a3136342e34382e3231392e32393b3132333435363738393031323334353637383930000000000108600000153136342e34382e3231392e32390000000000012840000011636c69656e742e667200000000000125400000153136342e34382e3231392e32390000000000011b40000011636c69656e742e6672000000000001044000005c3b9ac9ff6000000c069f6bc7000001034000000c000010e13b9ac9ff6000000c05e30a78000001024000000c000010e13b9ac9ff6000000c499602d20000010a6000000c000028af3b9ac9ff6000000c3b9ac9ff000001156000000c000000010000025980000029000028af7369703a2b3333383735363331393735407369702e70666465762e667200000000000002000000257369703a2b3333333333333333333333407369702e70666465762e667200000000000402e0000010000028af00000001000003fa60000124000003fd6000000c00000000000003fc6000000c00000002000003fb600000f444696765737420757365726e616d653d5c223333383735363331393735407369702e70666465762e66725c222c7265616c6d3d5c227369702e70666465762e66725c222c636e6f6e63653d5c2234306231386363665c222c6e633d30303030303030312c716f703d617574682c7572693d5c227369703a7369702e70666465762e66725c222c6e6f6e63653d5c2232316263323736373964646163386664366330303838383137633861653338355c222c726573706f6e73653d5c2233383137396439396363333463653061643030326163346437306533376330615c222c616c676f726974686d3d4d4435000004006000000e494e56495445000005f5e0ffe0000010000028af499602d20000036cc0000034000028af0000035ec0000010000028af00127ed90000033fc0000015000028af62616456616c7565350000000000000360000046303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a00000000000160000046303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a0000000000086000000cc0a85a7500000008600000182a01cf00003300050000000000006e01000000886000000c88ca6c00000000886000000c77359400000001bf60000010e43e9298b1380000000001bf600000101bc16d674ec80000000000056000000cee6b2800000000056000000c7735940000000060600000106f05b59d3b20000000000060600000103782dace9d900000000000374000000cd10bc16c000000374000000cd96b009b000001f26000000c6fc77488000001f26000000c00000007000001f26000000c7eb9c1d30000025be0000014000000c14e46e5762616fa130000025be0000014000000c1ffe1ccf385ebc8a00000025be0000014000000c18000000000000002"/>
    <parameter name="[text]" operation="protocol.setFromMessage" value="message.text"/>
    <parameter name="[toBinary]" operation="string.toBinary" value="[text]"/>
    <test parameter="[toBinary]" condition="binary.equals" value="[binary]"/>    
    <parameter name="[xml]" operation="protocol.setFromMessage" value="message.xml"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2=" " value3=""/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="hopByHop=&quot;[0-9]*&quot;" value3="X"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="endToEnd=&quot;[0-9]*&quot;" value3="X"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="code=&quot;263&quot;value=&quot;[0-9,a,b,c,d,e,f]*&quot;" value3="X"/>
    
    <parameter name="[protocol]" operation="protocol.setFromMessage" value="message.protocol"/>
    <test parameter="[protocol]" condition="string.equals" value="DIAMETER"/>
    <parameter name="[request1]" operation="protocol.setFromMessage" value="header.request"/>
    <test parameter="[request1]" condition="string.equals" value="true"/>
    <parameter name="[code]" operation="protocol.setFromMessage" value="header.command"/>
    <test parameter="[code]" condition="string.equals" value="506"/>
    <parameter name="[appId]" operation="protocol.setFromMessage" value="header.applicationId"/>
    <test parameter="[appId]" condition="string.equals" value="[applicationID]"/>
    <parameter name="[hopByHop]" operation="protocol.setFromMessage" value="header.hopByHop"/>
    <test parameter="[hopByHop]" condition="number.equals" value="[newHopByHop]"/>
    <parameter name="[endToEnd]" operation="protocol.setFromMessage" value="header.endToEnd"/>
    <test parameter="[endToEnd]" condition="number.equals" value="[newEndToEnd]"/>
    <parameter name="[error]" operation="protocol.setFromMessage" value="header.error"/>
    <test parameter="[error]" condition="string.equals" value="false"/>
    <parameter name="[proxiable]" operation="protocol.setFromMessage" value="header.proxiable"/>
    <test parameter="[proxiable]" condition="string.equals" value="false"/>
    <parameter name="[retransmit]" operation="protocol.setFromMessage" value="header.retransmit"/>
    <test parameter="[retransmit]" condition="string.equals" value="false"/>
    
    <parameter name="[avp0code]" operation="protocol.setFromMessage" value="avp.Session-Id.code"/>
    <test parameter="[avp0code]" condition="number.equals" value="263"/>
    <parameter name="[avp0code]" operation="protocol.setFromMessage" value="avp.Session-Id.value"/>
    <test parameter="[avp0code]" condition="string.equals" value="[localHostDIAM];[testcase:sessionId]"/>
    <parameter name="[avp0value]" operation="protocol.setFromMessage" value="avp.263.value"/>
    <test parameter="[avp0value]" condition="string.equals" value="[localHostDIAM];[testcase:sessionId]"/>
    <parameter name="[avp0binary]" operation="protocol.setFromMessage" value="avp.Session-Id.binary"/>
    <!--test parameter="[avp0binary]" condition="string.equals" value="h49 h4e h56 h49 h54 h45 "/-->
    <parameter name="[avp0vendor]" operation="protocol.setFromMessage" value="avp.Session-Id.vendorId"/>
    <test parameter="[avp0vendor]" condition="string.equals" value="0"/>
    
    <parameter name="[avp1code]" operation="protocol.setFromMessage" value="avp.1018.code"/>
    <test parameter="[avp1code]" condition="number.equals" value="1018"/>
    <parameter name="[avp1code]" operation="protocol.setFromMessage" value="avp.1018.1024.code"/>
    <test parameter="[avp1code]" condition="string.equals" value="1024"/>
    <parameter name="[avp1value]" operation="protocol.setFromMessage" value="avp.1018.value"/>
    <test parameter="[avp1value]" condition="string.equals" value="grouped"/>
    <parameter name="[avp1binary]" operation="protocol.setFromMessage" value="avp.1018.binary"/>
    <!--test parameter="[avp1binary]" condition="string.equals" value="h49 h4e h56 h49 h54 h45 "/-->
    <parameter name="[avp1vendor]" operation="protocol.setFromMessage" value="avp.1018.vendorId"/>
    <test parameter="[avp1vendor]" condition="string.equals" value="0"/>
    
    <parameter name="[avp2code]" operation="protocol.setFromMessage" value="avp.1018.1024.code"/>
    <test parameter="[avp2code]" condition="number.equals" value="1024"/>
    <parameter name="[avp2value]" operation="protocol.setFromMessage" value="avp.1018.1024.value"/>
    <test parameter="[avp2value]" condition="string.equals" value="h49 h4e h56 h49 h54 h45 "/>
    <parameter name="[avp2binary]" operation="protocol.setFromMessage" value="avp.1018.1024.binary"/>
    <test parameter="[avp2binary]" condition="string.equals" value="494e56495445"/>    
    <parameter name="[avp2vendor]" operation="protocol.setFromMessage" value="avp.1018.1024.vendorId"/>
    <test parameter="[avp2vendor]" condition="string.equals" value="0"/>
        
    <parameter name="[avp3code]" operation="protocol.setFromMessage" value="avp.283.code"/>
    <test parameter="[avp3code]" condition="string.equals" value="283"/>
    <parameter name="[avp3value]" operation="protocol.setFromMessage" value="avp.283.value"/>
    <test parameter="[avp3value]" condition="string.equals" value="[remoteRealmDIAM]"/>
    <parameter name="[avp3binary]" operation="protocol.setFromMessage" value="avp.283.binary"/>
    <test parameter="[avp3binary]" condition="string.equals" value="636c69656e742e6672"/>
    <parameter name="[avp3vendor]" operation="protocol.setFromMessage" value="avp.283.vendorId"/>
    <test parameter="[avp3vendor]" condition="string.equals" value="0"/>

    <parameter name="[avp4val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Event-Type.value"/>
    <test parameter="[avp4val]" condition="list.isEmpty"/>

    <parameter name="[avp5val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Role-Of-Node.value"/>
    <test parameter="[avp5val]" condition="list.isEmpty"/>

    <parameter name="[avp6val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Node-Functionality.value"/>
    <test parameter="[avp6val]" condition="string.equals" value="1212121"/>

    <parameter name="[avp7val]" operation="protocol.setFromMessage" value="avp.IMS-Information.User-Session-ID.value"/>
    <test parameter="[avp7val]" condition="list.isEmpty"/>
    
    <parameter name="[avp8val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Calling-Party-Address.value"/>
    <test parameter="[avp8val]" condition="string.equals" value="badValue5"/>
    
    <parameter name="[avp9val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Called-Party-Address.value"/>
    <test parameter="[avp9val]" condition="list.isEmpty"/>
    
    <parameter name="[avp10code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Item-Number.code"/>
    <test parameter="[avp10code]" condition="number.equals" value="1021"/>
    <parameter name="[avp10val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Item-Number.value"/>
    <test parameter="[avp10val]" condition="number.equals" value="0"/>
    <parameter name="[avp10bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Item-Number.binary"/>
    <test parameter="[avp10bin]" condition="binary.equals" value="00000000"/>
    <parameter name="[avp10vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Item-Number.vendorId"/>
    <test parameter="[avp10vendor]" condition="number.equals" value="0"/>

    <parameter name="[avp11code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Scheme.code"/>
    <test parameter="[avp11code]" condition="number.equals" value="1020"/>
    <parameter name="[avp11val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Scheme.value"/>
    <test parameter="[avp11val]" condition="number.equals" value="2"/>
    <parameter name="[avp11bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Scheme.binary"/>
    <test parameter="[avp11bin]" condition="binary.equals" value="00000002"/>
    <parameter name="[avp11vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Scheme.vendorId"/>
    <test parameter="[avp11vendor]" condition="number.equals" value="0"/>

    <parameter name="[avp12code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authenticate.code"/>
    <test parameter="[avp12code]" condition="number.equals" value="1019"/>
    <parameter name="[avp12val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authenticate.value"/>
    <parameter name="[avp12val]" operation="binary.parse" value="[avp12val]"/>
    <parameter name="[avp12str]" operation="binary.toString" value="[avp12val]"/>
    <test parameter="[avp12str]" condition="string.equals" value='Digest username=\"33875631975@sip.pfdev.fr\",realm=\"sip.pfdev.fr\",cnonce=\"40b18ccf\",nc=00000001,qop=auth,uri=\"sip:sip.pfdev.fr\",nonce=\"21bc27679ddac8fd6c0088817c8ae385\",response=\"38179d99cc34ce0ad002ac4d70e37c0a\",algorithm=MD5'/>
    <parameter name="[avp12bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authenticate.binary"/>
    <test parameter="[avp12bin]" condition="binary.equals" value="[avp12val]"/>
    <parameter name="[avp12vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authenticate.vendorId"/>
    <test parameter="[avp12vendor]" condition="number.equals" value="0"/>    

    <parameter name="[avp13code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.code"/>
    <test parameter="[avp13code]" condition="number.equals" value="1024"/>
    <parameter name="[avp13val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.value"/>
    <parameter name="[avp13val]" operation="binary.parse" value="[avp13val]"/>
    <parameter name="[avp13str]" operation="binary.toString" value="[avp13val]"/>
    <test parameter="[avp13str]" condition="string.equals" value="INVITE"/>
    <parameter name="[avp13bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.binary"/>
    <test parameter="[avp13bin]" condition="binary.equals" value="[avp13val]"/>
    <parameter name="[avp13vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.vendorId"/>
    <test parameter="[avp13vendor]" condition="number.equals" value="0"/>
    <parameter name="[avp13vFlag]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.vendorFlag"/>
    <test parameter="[avp13vFlag]" condition="boolean.equals" value="false"/>
    <parameter name="[avp13mand]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.mandatory"/>
    <test parameter="[avp13mand]" condition="boolean.equals" value="true"/>
    <parameter name="[avp13priv]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.private"/>
    <test parameter="[avp13priv]" condition="boolean.equals" value="true"/>

    <parameter name="[avp14code]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.code"/>
    <test parameter="[avp14code]" condition="number.equals" value="260"/>
    <parameter name="[avp14vendor]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.vendorId"/>
    <test parameter="[avp14vendor]" condition="number.equals" value="0"/>
    <parameter name="[avp14Acct]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.Acct-Application-Id.value"/>
    <test parameter="[avp14Acct]" condition="number.equals" value="[applicationID]"/>
    <parameter name="[avp14Auth]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.Auth-Application-Id.value"/>
    <test parameter="[avp14Auth]" condition="number.equals" value="[applicationID]"/>    
    <parameter name="[avp14VendorId]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.Vendor-Id.value"/>
    <test parameter="[avp14VendorId]" condition="number.equals" value="10415"/>        
    <parameter name="[avp14999]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.999999999.binary"/>
    <test parameter="[avp14999]" condition="list.size" value="4"/>    
    <test parameter="[avp14999(0)]" condition="binary.equals" value="069f6bC7"/>    
    <test parameter="[avp14999(1)]" condition="binary.equals" value="05e30a78"/>
    <test parameter="[avp14999(2)]" condition="binary.equals" value="499602D2"/>
    <test parameter="[avp14999(3)]" condition="binary.equals" value="3b9Ac9ff"/>

    <parameter name="[avp15code]" operation="protocol.setFromMessage" value="avp.99999999.code"/>
    <test parameter="[avp15code]" condition="number.equals" value="99999999"/>
    <parameter name="[avp15val]" operation="protocol.setFromMessage" value="avp.99999999.value"/>
    <test parameter="[avp15val]" condition="string.equals" value="h49 h96 h02 hd2 "/>
    <parameter name="[avp15bin]" operation="protocol.setFromMessage" value="avp.99999999.binary"/>
    <test parameter="[avp15bin]" condition="binary.equals" value="499602d2"/>
    <parameter name="[avp15vendor]" operation="protocol.setFromMessage" value="avp.99999999.vendorId"/>
    <test parameter="[avp15vendor]" condition="number.equals" value="10415"/>

    <parameter name="[avp16code]" operation="protocol.setFromMessage" value="avp.Public-Identity.code"/>
    <test parameter="[avp16code]" condition="number.equals" value="601"/>
    <parameter name="[avp16code]" operation="protocol.setFromMessage" value="avp.2.code"/>
    <test parameter="[avp16code]" condition="number.equals" value="2"/>
    <parameter name="[avp16val]" operation="protocol.setFromMessage" value="avp.601.value"/>
    <test parameter="[avp16val]" condition="string.equals" value="sip:+33875631975@sip.pfdev.fr"/>
    <parameter name="[avp16val]" operation="protocol.setFromMessage" value="avp.2.value"/>
    <test parameter="[avp16val]" condition="string.equals" value="h73 h69 h70 h3a h2b h33 h33 h33 h33 h33 h33 h33 h33 h33 h33 h33 h40 h73 h69 h70 h2e h70 h66 h64 h65 h76 h2e h66 h72 "/>
    <parameter name="[avp16bin]" operation="protocol.setFromMessage" value="avp.Public-Identity.binary"/>
    <test parameter="[avp16bin]" condition="binary.equals" value="7369703a2b3333383735363331393735407369702e70666465762e6672"/>
    <parameter name="[avp16bin]" operation="protocol.setFromMessage" value="avp.2.binary"/>
    <test parameter="[avp16bin]" condition="binary.equals" value="7369703a2b3333333333333333333333407369702e70666465762e6672"/>
    <parameter name="[avp16vendor]" operation="protocol.setFromMessage" value="avp.601.vendorId"/>
    <test parameter="[avp16vendor]" condition="number.equals" value="10415"/>
    <parameter name="[avp16vendor]" operation="protocol.setFromMessage" value="avp.2.vendorId"/>
    <test parameter="[avp16vendor]" condition="number.equals" value="0"/>
    <parameter name="[avp16VFlag]" operation="protocol.setFromMessage" value="avp.Public-Identity.vendorFlag"/>
    <test parameter="[avp16VFlag]" condition="boolean.equals" value="true"/>
    <parameter name="[avp16VFlag]" operation="protocol.setFromMessage" value="avp.2.vendorFlag"/>
    <test parameter="[avp16VFlag]" condition="boolean.equals" value="false"/>
    <parameter name="[avp16mand]" operation="protocol.setFromMessage" value="avp.Public-Identity.mandatory"/>
    <test parameter="[avp16mand]" condition="boolean.equals" value="false"/>
    <parameter name="[avp16priv]" operation="protocol.setFromMessage" value="avp.Public-Identity.private"/>
    <test parameter="[avp16priv]" condition="boolean.equals" value="false"/>

    <!-- type = OctetString -->
    <parameter name="[avp17val]" operation="protocol.setFromMessage" value="avp.CHAP-Password.value"/>
    <test parameter="[avp17val]" condition="string.equals" value="h30 h31 h32 h33 h34 h35 h36 h37 h38 h39 h41 h42 h43 h44 h45 h46 h47 h48 h49 h4a h4b h4c h4d h4e h4f h50 h51 h52 h53 h54 h55 h56 h57 h58 h59 h5a h61 h62 h63 h64 h65 h66 h67 h68 h69 h6a h6b h6c h6d h6e h6f h70 h71 h72 h73 h74 h75 h76 h77 h78 h79 h7a "/>
    <parameter name="[avp17bin]" operation="protocol.setFromMessage" value="avp.3.binary"/>
    <test parameter="[avp17bin]" condition="binary.equals" value="303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a"/>

    <!-- type = UTF8String -->
    <parameter name="[avp18val]" operation="protocol.setFromMessage" value="avp.User-Name.value"/>
    <test parameter="[avp18val]" condition="string.equals" value="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"/>
    <parameter name="[avp18bin]" operation="protocol.setFromMessage" value="avp.1.binary"/>
    <test parameter="[avp18bin]" condition="binary.equals" value="303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a"/>

    <!-- type = IPAddress -->
    <parameter name="[avp19val]" operation="protocol.setFromMessage" value="avp.8.value"/>
    <test parameter="[avp19val]" condition="list.size" value="2"/>
    <test parameter="[avp19val(0)]" condition="string.equals" value="192.168.90.117"/>
    <test parameter="[avp19val(1)]" condition="string.equals" value="[2a01:cf00:33:5::6e01]"/>
    <parameter name="[avp19bin]" operation="protocol.setFromMessage" value="avp.8.binary"/>
    <test parameter="[avp19val]" condition="list.size" value="2"/>
    <test parameter="[avp19bin(0)]" condition="string.equals" value="c0a85a75"/>
    <test parameter="[avp19bin(1)]" condition="string.equals" value="2a01cf00003300050000000000006e01"/>

    <parameter name="[avp19val]" operation="protocol.setFromMessage" value="avp.Framed-IP-Address.value"/>
    <test parameter="[avp19val]" condition="list.size" value="2"/>
    <test parameter="[avp19val(0)]" condition="string.equals" value="192.168.90.117"/>
    <test parameter="[avp19val(1)]" condition="string.equals" value="[2a01:cf00:33:5::6e01]"/>
    <parameter name="[avp19bin]" operation="protocol.setFromMessage" value="avp.Framed-IP-Address.binary"/>
    <test parameter="[avp19bin]" condition="list.size" value="2"/>
    <test parameter="[avp19bin(0)]" condition="string.equals" value="c0a85a75"/>
    <test parameter="[avp19bin(1)]" condition="string.equals" value="2a01cf00003300050000000000006e01"/>

    <!-- type = Integer32 -->
    <parameter name="[avp20val]" operation="protocol.setFromMessage" value="avp.Management-Privilege-Level.value"/>
    <test parameter="[avp20val(0)]" condition="number.equals" value="-2000000000"/>
    <test parameter="[avp20val(1)]" condition="number.equals" value="2000000000"/>
    <parameter name="[avp20bin]" operation="protocol.setFromMessage" value="avp.136.binary"/>
    <test parameter="[avp20bin(0)]" condition="binary.equals" value="88ca6c00"/>
    <test parameter="[avp20bin(1)]" condition="binary.equals" value="77359400"/>

    <!-- type = Integer64 -->
    <parameter name="[avp21val]" operation="protocol.setFromMessage" value="avp.447.value"/>
    <test parameter="[avp21val(0)]" condition="number.equals" value="-2000000000000000000"/>
    <test parameter="[avp21val(1)]" condition="number.equals" value="2000000000000000000"/>
    <parameter name="[avp21bin]" operation="protocol.setFromMessage" value="avp.447.binary"/>
    <test parameter="[avp21bin(0)]" condition="binary.equals" value="e43e9298b1380000"/>
    <test parameter="[avp21bin(1)]" condition="binary.equals" value="1bc16d674EC80000"/>

    <!-- type = Unsigned32 -->
    <parameter name="[avp22val]" operation="protocol.setFromMessage" value="avp.NAS-Port.value"/>
    <test parameter="[avp22val(0)]" condition="number.equals" value="4000000000"/>
    <test parameter="[avp22val(1)]" condition="number.equals" value="2000000000"/>
    <parameter name="[avp22bin]" operation="protocol.setFromMessage" value="avp.5.binary"/>
    <test parameter="[avp22bin(0)]" condition="binary.equals" value="ee6b2800"/>
    <test parameter="[avp22bin(1)]" condition="binary.equals" value="77359400"/>

    <!-- type = Unsigned64 -->
    <parameter name="[avp23val]" operation="protocol.setFromMessage" value="avp.Framed-Interface-Id.value"/>
    <test parameter="[avp23val(0)]" condition="number.equals" value="8000000000000000000"/>
    <test parameter="[avp23val(1)]" condition="number.equals" value="4000000000000000000"/>    
    <parameter name="[avp23bin]" operation="protocol.setFromMessage" value="avp.96.binary"/>
    <test parameter="[avp23bin(0)]" condition="binary.equals" value="6f05b59d3b200000"/>
    <test parameter="[avp23bin(1)]" condition="binary.equals" value="3782dace9d900000"/>

    <!-- type = Time -->
    <parameter name="[avp24val]" operation="protocol.setFromMessage" value="avp.Event-Timestamp.value"/>
    <test parameter="[avp24val(0)]" condition="string.equals" value="20/02/2011 17:35:56:000"/>
    <test parameter="[avp24val(1)]" condition="string.equals" value="04/08/2015 11:12:59:000"/>
    <parameter name="[avp24bin]" operation="protocol.setFromMessage" value="avp.55.binary"/>
    <test parameter="[avp24bin(0)]" condition="binary.equals" value="d10bc16c"/>
    <test parameter="[avp24bin(1)]" condition="binary.equals" value="d96b009b"/>

    <!-- type = Float32 -->
    <parameter name="[avp25val]" operation="protocol.setFromMessage" value="avp.Peak-Traffic-Rate.value"/>
    <test parameter="[avp25val(0)]" condition="number.equals" value="1.2345679e29"/>
    <test parameter="[avp25val(1)]" condition="number.equals" value="9.8e-45"/>
    <test parameter="[avp25val(2)]" condition="number.equals" value="1.2345679E38"/>    
    <parameter name="[avp25bin]" operation="protocol.setFromMessage" value="avp.498.binary"/>
    <test parameter="[avp25bin(0)]" condition="binary.equals" value="6fc77488"/>
    <test parameter="[avp25bin(1)]" condition="binary.equals" value="00000007"/>
    <test parameter="[avp25bin(2)]" condition="binary.equals" value="7eb9C1D3"/>

        <!-- type = Float64 -->
    <parameter name="[avp26val]" operation="protocol.setFromMessage" value="avp.603.value"/>
    <test parameter="[avp26val(0)]" condition="string.equals" value="1.2345678901234567E69"/>
    <test parameter="[avp26val(1)]" condition="number.equals" value="-1.0E308"/>
    <test parameter="[avp26val(2)]" condition="number.equals" value="-1E-323"/>
    <parameter name="[avp26bin]" operation="protocol.setFromMessage" value="avp.603.binary"/>
    <test parameter="[avp26bin(0)]" condition="binary.equals" value="4e46e5762616fA13"/>
    <test parameter="[avp26bin(1)]" condition="binary.equals" value="ffe1ccf385ebc8a0"/>
    <test parameter="[avp26bin(2)]" condition="binary.equals" value="8000000000000002"/>

    <sendMessageDIAMETER name="SendAnswerMAA">
        <header request="false" command="[commandCode]" applicationId="[applicationID]"  
                hopByHop="[hopByHop]" endToEnd="[endToEnd]"
                proxiable="true" error="true" retransmit="true"/>
        <avp code="Session-Id" value="[sessionId]"/>
        <avp code="Origin-Host" value="[remoteHostDIAM]"/>
        <avp code="Origin-Realm" value="[remoteRealmDIAM]"/>
        <avp code="Vendor-Specific-Application-Id">                                      
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>              
            <avp code="Acct-Application-Id" value="[applicationID]"/>
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
            <avp code="Auth-Application-Id" value="[applicationID]"/>
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
            <avp code="Vendor-Id" value="TGPP"/>
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
        </avp>
        <avp code="Auth-Session-State" value="NO_STATE_MAINTAINED"/>
        <avp code="Result-Code" value="2001"/>		
        <avp code="Public-Identity" value="sip:+33875631975@sip.pfdev.fr"/>
        <avp code="Number-Authentication-Items" value="1"/>
        <avp code="Auth-Data-Item">
                <avp code="Item-Number" value="0"/>
                <avp code="Authentication-Scheme" value="DIGEST"/>
                <avp code="Authenticate" value='Digest username=\"33875631975@sip.pfdev.fr\",realm=\"sip.pfdev.fr\",cnonce=\"40b18ccf\",nc=00000001,qop=auth,uri=\"sip:sip.pfdev.fr\",nonce=\"21bc27679ddac8fd6c0088817c8ae385\",response=\"38179d99cc34ce0ad002ac4d70e37c0a\",algorithm=MD5'/>
                <avp code="Authentication-Context" value="INVITE"/>
        </avp>
    </sendMessageDIAMETER>
    
</scenario>

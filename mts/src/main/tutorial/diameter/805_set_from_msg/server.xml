<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->
<!-- name="Send 3GPP CX Multimedia Authentication answer (MAR/MAA)" -->

<scenario>
    
    <receiveMessageDIAMETER name="ReceiveRequestMAR" request="true" type="Multimedia-Authentitcation:506">
        <parameter name="[commandCode]" operation="protocol.setFromMessage" value=" header.command "/>
        <parameter name="[hopByHop]" operation="protocol.setFromMessage" value="header.hopByHop"/>
        <parameter name="[endToEnd]" operation="protocol.setFromMessage" value="header.endToEnd"/>
        <parameter name="[sessionId]" operation="protocol.setFromMessage" value="avp.Session-Id.value"/>
    </receiveMessageDIAMETER>
    
    <parameter name="[listenpointName]" operation="protocol.setFromMessage" value=" listenpoint.name  "/>
    <test parameter="[listenpointName]" condition="list.isEmpty"/>
    <parameter name="[listenpointHost]" operation="protocol.setFromMessage" value="listenpoint.localHost"/>
    <test parameter="[listenpointHost]" condition="string.equals" value="0.0.0.0"/>
    <parameter name="[listenpointPort]" operation="protocol.setFromMessage" value="listenpoint.localPort"/>
    <test parameter="[listenpointPort]" condition="string.equals" value="[localPortDIAM]"/>
    
    <parameter name="[request2]" operation="protocol.setFromMessage" value="message.request"/>
    <test parameter="[request2]" condition="string.equals" value="true"/>
    <parameter name="[type]" operation="protocol.setFromMessage" value="message.type"/>
    <test parameter="[type]" condition="string.equals" value="Multimedia-Authentitcation:506"/>
    <parameter name="[text]" operation="protocol.setFromMessage" value="message.text"/>
    <parameter name="[binary]" operation="string.toBinary" value="[text]"/>
    <parameter name="[binReference]" operation="set" value="01000278800001fa000010e106f8ad4e06f8ad4d000001074000001c653466363738396631626666653961363437343300000108600000143133372e35382e38342e37380000012840000011636c69656e742e667200000000000125400000143133372e35382e38342e37380000011b40000011636c69656e742e667200000000000104400000200000010a6000000c000028af000001024000000c000010e1000001156000000c0000000100000002e0000029000028af7369703a2b3333383735363331393735407369702e70666465762e667200000000000402e0000010000028af00000001000003fae0000138000028af000003fde0000010000028af00000000000003fce0000010000028af00000002000003fbe00000f8000028af44696765737420757365726e616d653d5c223333383735363331393735407369702e70666465762e66725c222c7265616c6d3d5c227369702e70666465762e66725c222c636e6f6e63653d5c2234306231386363665c222c6e633d30303030303030312c716f703d617574682c7572693d5c227369703a7369702e70666465762e66725c222c6e6f6e63653d5c2232316263323736373964646163386664366330303838383137633861653338355c222c726573706f6e73653d5c2233383137396439396363333463653061643030326163346437306533376330615c222c616c676f726974686d3d4d443500000400e0000012000028af494e5649544500000000036cc0000034000028af0000035ec0000010000028af00127ed90000033fc0000015000028af62616456616c756535000000000000086000000c893a544e00000008600000182a01cf00003300050000000000006e01"/>
    <!--test parameter="[text]" condition="binary.equals" value="[binReference]"/-->
    <parameter name="[xml]" operation="protocol.setFromMessage" value="message.xml"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2=" " value3=""/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="hopByHop=&quot;[0-9]*&quot;" value3="X"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="endToEnd=&quot;[0-9]*&quot;" value3="X"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="code=&quot;263&quot;value=&quot;[0-9,a,b,c,d,e,f]*&quot;" value3="X"/>
    <parameter name="[xmlReference]" operation="set"><![CDATA[<header command="506" applicationId="4321" X X request="true" proxiable="false" error="false" retransmit="false"/>
<avp X type="UTF8String" vendorId="0" mandatory="true" private="false"/>
<avp code="264" value="137.58.84.78" type="UTF8String" vendorId="0" mandatory="true" private="true"/>
<avp code="296" value="client.fr" type="UTF8String" vendorId="0" mandatory="true" private="false"/>
<avp code="293" value="137.58.84.78" type="UTF8String" vendorId="0" mandatory="true" private="false"/>
<avp code="283" value="client.fr" type="UTF8String" vendorId="0" mandatory="true" private="false"/>
<avp code="260" value="grouped" type="grouped" vendorId="0" mandatory="true" private="false">
   <avp code="266" value="10415" type="Integer32" vendorId="0" mandatory="true" private="true"/>
   <avp code="258" value="4321" type="Integer32" vendorId="0" mandatory="true" private="false"/>
</avp>
<avp code="277" value="1" type="Unsigned32" vendorId="0" mandatory="true" private="true"/>
<avp code="2" value="h73 h69 h70 h3a h2b h33 h33 h38 h37 h35 h36 h33 h31 h39 h37 h35 h40 h73 h69 h70 h2e h70 h66 h64 h65 h76 h2e h66 h72 " type="OctetString" vendorId="10415" mandatory="true" private="true"/>
<avp code="1026" value="1" type="Unsigned32" vendorId="10415" mandatory="true" private="true"/>
<avp code="1018" value="grouped" type="grouped" vendorId="10415" mandatory="true" private="true">
   <avp code="1021" value="0" type="Unsigned32" vendorId="10415" mandatory="true" private="true"/>
   <avp code="1020" value="2" type="Unsigned32" vendorId="10415" mandatory="true" private="true"/>
   <avp code="1019" value="h44 h69 h67 h65 h73 h74 h20 h75 h73 h65 h72 h6e h61 h6d h65 h3d h5c h22 h33 h33 h38 h37 h35 h36 h33 h31 h39 h37 h35 h40 h73 h69 h70 h2e h70 h66 h64 h65 h76 h2e h66 h72 h5c h22 h2c h72 h65 h61 h6c h6d h3d h5c h22 h73 h69 h70 h2e h70 h66 h64 h65 h76 h2e h66 h72 h5c h22 h2c h63 h6e h6f h6e h63 h65 h3d h5c h22 h34 h30 h62 h31 h38 h63 h63 h66 h5c h22 h2c h6e h63 h3d h30 h30 h30 h30 h30 h30 h30 h31 h2c h71 h6f h70 h3d h61 h75 h74 h68 h2c h75 h72 h69 h3d h5c h22 h73 h69 h70 h3a h73 h69 h70 h2e h70 h66 h64 h65 h76 h2e h66 h72 h5c h22 h2c h6e h6f h6e h63 h65 h3d h5c h22 h32 h31 h62 h63 h32 h37 h36 h37 h39 h64 h64 h61 h63 h38 h66 h64 h36 h63 h30 h30 h38 h38 h38 h31 h37 h63 h38 h61 h65 h33 h38 h35 h5c h22 h2c h72 h65 h73 h70 h6f h6e h73 h65 h3d h5c h22 h33 h38 h31 h37 h39 h64 h39 h39 h63 h63 h33 h34 h63 h65 h30 h61 h64 h30 h30 h32 h61 h63 h34 h64 h37 h30 h65 h33 h37 h63 h30 h61 h5c h22 h2c h61 h6c h67 h6f h72 h69 h74 h68 h6d h3d h4d h44 h35 " type="OctetString" vendorId="10415" mandatory="true" private="true"/>
   <avp code="1024" value="h49 h4e h56 h49 h54 h45 " type="OctetString" vendorId="10415" mandatory="true" private="true"/>
</avp>
<avp code="876" value="grouped" type="grouped" vendorId="10415" mandatory="true" private="false">
   <avp code="862" value="1212121" type="Unsigned32" vendorId="10415" mandatory="true" private="false"/>
   <avp code="831" value="badValue5" type="UTF8String" vendorId="10415" mandatory="true" private="false"/>
</avp>
<avp code="8" value="137.58.84.78" type="IPAddress" vendorId="0" mandatory="true" private="true"/>
<avp code="8" value="2a01:cf00:33:5:0:0:0:6e01" type="IPAddress" vendorId="0" mandatory="true" private="true"/>
]]>
    </parameter>
    <parameter name="[xmlReference]" operation="string.regexReplaces" value="[xmlReference]" value2=" " value3=""/>
    <!--test parameter="[xml]" condition="string.equals" value="[xmlReference]"/-->
    
    <parameter name="[protocol]" operation="protocol.setFromMessage" value="message.protocol"/>
    <test parameter="[protocol]" condition="string.equals" value="DIAMETER"/>
    <parameter name="[request1]" operation="protocol.setFromMessage" value="header.request"/>
    <test parameter="[request1]" condition="string.equals" value="true"/>
    <parameter name="[code]" operation="protocol.setFromMessage" value="header.command"/>
    <test parameter="[code]" condition="string.equals" value="506"/>
    <parameter name="[appId]" operation="protocol.setFromMessage" value="header.applicationId"/>
    <test parameter="[appId]" condition="string.equals" value="[applicationID]"/>
    <parameter name="[hopByHop]" operation="protocol.setFromMessage" value="header.hopByHop"/>
    <test parameter="[hopByHop]" condition="number.equals" value="[newHopByHop]"/>
    <parameter name="[endToEnd]" operation="protocol.setFromMessage" value="header.endToEnd"/>
    <test parameter="[endToEnd]" condition="number.equals" value="[newEndToEnd]"/>
    <parameter name="[error]" operation="protocol.setFromMessage" value="header.error"/>
    <test parameter="[error]" condition="string.equals" value="true"/>
    <parameter name="[proxiable]" operation="protocol.setFromMessage" value="header.proxiable"/>
    <test parameter="[proxiable]" condition="string.equals" value="true"/>
    <parameter name="[retransmit]" operation="protocol.setFromMessage" value="header.retransmit"/>
    <test parameter="[retransmit]" condition="string.equals" value="true"/>
    
    <parameter name="[avp1code]" operation="protocol.setFromMessage" value="avp.1018.code"/>
    <test parameter="[avp1code]" condition="number.equals" value="1018"/>
    <parameter name="[avp1code]" operation="protocol.setFromMessage" value="avp.1018.1024.code"/>
    <test parameter="[avp1code]" condition="string.equals" value="1024"/>
    <parameter name="[avp1value]" operation="protocol.setFromMessage" value="avp.1018.value"/>
    <test parameter="[avp1value]" condition="string.equals" value="grouped"/>
    <parameter name="[avp1binary]" operation="protocol.setFromMessage" value="avp.1018.binary"/>
    <!--test parameter="[avp1binary]" condition="string.equals" value="h49 h4e h56 h49 h54 h45 "/-->
    <parameter name="[avp1vendor]" operation="protocol.setFromMessage" value="avp.1018.vendorId"/>
    <test parameter="[avp1vendor]" condition="string.equals" value="[vendorID]"/>
    
    <parameter name="[avp2code]" operation="protocol.setFromMessage" value="avp.1018.1024.code"/>
    <test parameter="[avp2code]" condition="number.equals" value="1024"/>
    <parameter name="[avp2value]" operation="protocol.setFromMessage" value="avp.1018.1024.value"/>
    <test parameter="[avp2value]" condition="string.equals" value="h49 h4e h56 h49 h54 h45 "/>
    <parameter name="[avp2binary]" operation="protocol.setFromMessage" value="avp.1018.1024.binary"/>
    <test parameter="[avp2binary]" condition="string.equals" value="494e56495445"/>    
    <parameter name="[avp2vendor]" operation="protocol.setFromMessage" value="avp.1018.1024.vendorId"/>
    <test parameter="[avp2vendor]" condition="string.equals" value="[vendorID]"/>
        
    <parameter name="[avp3code]" operation="protocol.setFromMessage" value="avp.283.code"/>
    <test parameter="[avp3code]" condition="string.equals" value="283"/>
    <parameter name="[avp3value]" operation="protocol.setFromMessage" value="avp.283.value"/>
    <test parameter="[avp3value]" condition="string.equals" value="[remoteRealmDIAM]"/>
    <parameter name="[avp3binary]" operation="protocol.setFromMessage" value="avp.283.binary"/>
    <test parameter="[avp3binary]" condition="string.equals" value="636c69656e742e6672"/>
    <parameter name="[avp3vendor]" operation="protocol.setFromMessage" value="avp.283.vendorId"/>
    <test parameter="[avp3vendor]" condition="string.equals" value="0"/>

    <parameter name="[avp4val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Event-Type.value"/>
    <test parameter="[avp4val]" condition="list.isEmpty"/>

    <parameter name="[avp5val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Role-Of-Node.value"/>
    <test parameter="[avp5val]" condition="list.isEmpty"/>

    <parameter name="[avp6val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Node-Functionality.value"/>
    <test parameter="[avp6val]" condition="string.equals" value="1212121"/>

    <parameter name="[avp7val]" operation="protocol.setFromMessage" value="avp.IMS-Information.User-Session-ID.value"/>
    <test parameter="[avp7val]" condition="list.isEmpty"/>
    
    <parameter name="[avp8val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Calling-Party-Address.value"/>
    <test parameter="[avp8val]" condition="string.equals" value="badValue5"/>
    
    <parameter name="[avp9val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Called-Party-Address.value"/>
    <test parameter="[avp9val]" condition="list.isEmpty"/>
    
    <parameter name="[avp10val]" operation="protocol.setFromMessage" value="avp.8.value"/>
    <test parameter="[avp10val]" condition="list.size" value="2"/>
    <test parameter="[avp10val(0)]" condition="string.equals" value="192.168.90.117"/>
    <test parameter="[avp10val(1)]" condition="string.equals" value="2a01:cf00:33:5:0:0:0:6e01"/>
    <parameter name="[avp10bin]" operation="protocol.setFromMessage" value="avp.8.binary"/>
    <test parameter="[avp10val]" condition="list.size" value="2"/>
    <parameter name="[localHostDIAMBinary]" operation="binary.fromIp" value="192.168.90.117"/>
    <test parameter="[avp10bin(0)]" condition="binary.equals" value="[localHostDIAMBinary]"/>
    <parameter name="[localHostDIAMBinary]" operation="binary.fromIp" value="2a01:cf00:33:5::6e01"/>
    <test parameter="[avp10bin(1)]" condition="string.equals" value="[localHostDIAMBinary]"/>

    <parameter name="[avp10val]" operation="protocol.setFromMessage" value="avp.Framed-IP-Address.value"/>
    <test parameter="[avp10val]" condition="list.size" value="2"/>
    <test parameter="[avp10val(0)]" condition="string.equals" value="192.168.90.117"/>
    <test parameter="[avp10val(1)]" condition="string.equals" value="2a01:cf00:33:5:0:0:0:6e01"/>
    <parameter name="[avp10bin]" operation="protocol.setFromMessage" value="avp.Framed-IP-Address.binary"/>
    <test parameter="[avp10val]" condition="list.size" value="2"/>
    <parameter name="[localHostDIAMBinary]" operation="binary.fromIp" value="192.168.90.117"/>
    <test parameter="[avp10bin(0)]" condition="string.equals" value="[localHostDIAMBinary]"/>
    <parameter name="[localHostDIAMBinary]" operation="binary.fromIp" value="[2a01:cf00:33:5:0:0:0:6e01]"/>
    <test parameter="[avp10bin(1)]" condition="string.equals" value="[localHostDIAMBinary]"/>

    <parameter name="[avp11code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Item-Number.code"/>
    <test parameter="[avp11code]" condition="number.equals" value="1021"/>
    <parameter name="[avp11val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Item-Number.value"/>
    <test parameter="[avp11val]" condition="number.equals" value="0"/>
    <parameter name="[avp11bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Item-Number.binary"/>
    <test parameter="[avp11bin]" condition="binary.equals" value="00000000"/>
    <parameter name="[avp11vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Item-Number.vendorId"/>
    <test parameter="[avp11vendor]" condition="number.equals" value="10415"/>

    <parameter name="[avp12code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Scheme.code"/>
    <test parameter="[avp12code]" condition="number.equals" value="1020"/>
    <parameter name="[avp12val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Scheme.value"/>
    <test parameter="[avp12val]" condition="number.equals" value="2"/>
    <parameter name="[avp12bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Scheme.binary"/>
    <test parameter="[avp12bin]" condition="binary.equals" value="00000002"/>
    <parameter name="[avp12vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Scheme.vendorId"/>
    <test parameter="[avp12vendor]" condition="number.equals" value="10415"/>

    <parameter name="[avp13code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authenticate.code"/>
    <test parameter="[avp13code]" condition="number.equals" value="1019"/>
    <parameter name="[avp13val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authenticate.value"/>
    <parameter name="[avp13val]" operation="binary.parse" value="[avp13val]"/>
    <parameter name="[avp13str]" operation="binary.toString" value="[avp13val]"/>
    <test parameter="[avp13str]" condition="string.equals" value='Digest username=\"33875631975@sip.pfdev.fr\",realm=\"sip.pfdev.fr\",cnonce=\"40b18ccf\",nc=00000001,qop=auth,uri=\"sip:sip.pfdev.fr\",nonce=\"21bc27679ddac8fd6c0088817c8ae385\",response=\"38179d99cc34ce0ad002ac4d70e37c0a\",algorithm=MD5'/>
    <parameter name="[avp13bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authenticate.binary"/>
    <test parameter="[avp13bin]" condition="binary.equals" value="[avp13val]"/>
    <parameter name="[avp13vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authenticate.vendorId"/>
    <test parameter="[avp13vendor]" condition="number.equals" value="10415"/>    

    <parameter name="[avp14code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.code"/>
    <test parameter="[avp14code]" condition="number.equals" value="1024"/>
    <parameter name="[avp14val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.value"/>
    <parameter name="[avp14val]" operation="binary.parse" value="[avp14val]"/>
    <parameter name="[avp14str]" operation="binary.toString" value="[avp14val]"/>
    <test parameter="[avp14str]" condition="string.equals" value="INVITE"/>
    <parameter name="[avp14bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.binary"/>
    <test parameter="[avp14bin]" condition="binary.equals" value="[avp14val]"/>
    <parameter name="[avp14vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.vendorId"/>
    <test parameter="[avp14vendor]" condition="number.equals" value="10415"/>
    <parameter name="[avp14vFlag]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.vendorFlag"/>
    <test parameter="[avp14vFlag]" condition="boolean.equals" value="true"/>
    <parameter name="[avp14mand]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.mandatory"/>
    <test parameter="[avp14mand]" condition="boolean.equals" value="true"/>
    <parameter name="[avp14priv]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.private"/>
    <test parameter="[avp14priv]" condition="boolean.equals" value="true"/>

    <parameter name="[avp15code]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.code"/>
    <test parameter="[avp15code]" condition="number.equals" value="260"/>
    <parameter name="[avp15vendor]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.vendorId"/>
    <test parameter="[avp15vendor]" condition="number.equals" value="0"/>
    <parameter name="[avp15Acct]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.Acct-Application-Id.value"/>
    <test parameter="[avp15Acct]" condition="number.equals" value="[applicationID]"/>
    <parameter name="[avp15Auth]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.Auth-Application-Id.value"/>
    <test parameter="[avp15Auth]" condition="number.equals" value="[applicationID]"/>    
    <parameter name="[avp15VendorId]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.Vendor-Id.value"/>
    <test parameter="[avp15VendorId]" condition="number.equals" value="10415"/>        
    <parameter name="[avp15999]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id.999999999.binary"/>
    <test parameter="[avp15999]" condition="list.size" value="4"/>    
    <test parameter="[avp15999]" condition="binary.equals" value="499602d2"/>    

    <parameter name="[avp16code]" operation="protocol.setFromMessage" value="avp.99999999.code"/>
    <test parameter="[avp16code]" condition="number.equals" value="99999999"/>
    <parameter name="[avp16val]" operation="protocol.setFromMessage" value="avp.99999999.value"/>
    <test parameter="[avp16val]" condition="list.isEmpty"/>
    <parameter name="[avp16bin]" operation="protocol.setFromMessage" value="avp.99999999.binary"/>
    <test parameter="[avp16bin]" condition="binary.equals" value="499602d2"/>
    <parameter name="[avp16vendor]" operation="protocol.setFromMessage" value="avp.99999999.vendorId"/>
    <test parameter="[avp16vendor]" condition="number.equals" value="10415"/>

    <parameter name="[avp17code]" operation="protocol.setFromMessage" value="avp.Public-Identity.code"/>
    <test parameter="[avp17code]" condition="number.equals" value="2"/>
    <parameter name="[avp17val]" operation="protocol.setFromMessage" value="avp.Public-Identity.value"/>
    <!--test parameter="[avp17val]" condition="binary.equals" value="ffff"/-->
    <parameter name="[avp17bin]" operation="protocol.setFromMessage" value="avp.Public-Identity.binary"/>
    <!--test parameter="[avp17bin]" condition="binary.equals" value="ffff"/-->
    <parameter name="[avp17vendor]" operation="protocol.setFromMessage" value="avp.Public-Identity.vendorId"/>
    <test parameter="[avp17vendor]" condition="number.equals" value="10415"/>
    <parameter name="[avp17VFlag]" operation="protocol.setFromMessage" value="avp.Public-Identity.vendorFlag"/>
    <test parameter="[avp17VFlag]" condition="boolean.equals" value="true"/>
    <parameter name="[avp17mand]" operation="protocol.setFromMessage" value="avp.Public-Identity.mandatory"/>
    <test parameter="[avp17mand]" condition="boolean.equals" value="false"/>
    <parameter name="[avp17priv]" operation="protocol.setFromMessage" value="avp.Public-Identity.private"/>
    <test parameter="[avp17priv]" condition="boolean.equals" value="false"/>

    <sendMessageDIAMETER name="SendAnswerMAA">
        <header request="false" command="[commandCode]" applicationId="[applicationID]"  
                hopByHop="[hopByHop]" endToEnd="[endToEnd]"
                proxiable="false" error="false" retransmit="false"/>
        <avp code="Session-Id" value="[sessionId]"/>
        <avp code="Origin-Host" value="[remoteHostDIAM]"/>
        <avp code="Origin-Realm" value="[remoteRealmDIAM]"/>
        <avp code="Vendor-Specific-Application-Id">                                      
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>              
            <avp code="Acct-Application-Id" value="[applicationID]"/>
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
            <avp code="Auth-Application-Id" value="[applicationID]"/>
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
            <avp code="Vendor-Id" value="TGPP"/>
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
        </avp>
        <avp code="Auth-Session-State" value="NO_STATE_MAINTAINED"/>
        <avp code="Result-Code" value="2001"/>		
        <avp code="Public-Identity" value="sip:+33875631975@sip.pfdev.fr"/>
        <avp code="Number-Authentication-Items" value="1"/>
        <avp code="Auth-Data-Item">
                <avp code="Item-Number" value="0"/>
                <avp code="Authentication-Scheme" value="DIGEST"/>
                <avp code="Authenticate" value='Digest username=\"33875631975@sip.pfdev.fr\",realm=\"sip.pfdev.fr\",cnonce=\"40b18ccf\",nc=00000001,qop=auth,uri=\"sip:sip.pfdev.fr\",nonce=\"21bc27679ddac8fd6c0088817c8ae385\",response=\"38179d99cc34ce0ad002ac4d70e37c0a\",algorithm=MD5'/>
                <avp code="Authentication-Context" value="INVITE"/>
        </avp>
    </sendMessageDIAMETER>
    
</scenario>

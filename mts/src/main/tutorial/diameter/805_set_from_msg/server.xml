<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->
<!-- name="Send 3GPP CX Multimedia Authentication answer (MAR/MAA)" -->

<scenario>
    
    <receiveMessageDIAMETER name="ReceiveRequestMAR" request="true" type="Multimedia-Authentitcation:506">
        <parameter name="[listenpointName]" operation="protocol.setFromMessage" value="listenpoint.name"/>
        <parameter name="[remoteHost]" operation="protocol.setFromMessage" value="channel.remoteHost"/>
        <parameter name="[remotePort]" operation="protocol.setFromMessage" value="channel.remotePort"/>
        <parameter name="[commandCode]" operation="protocol.setFromMessage" value="header.command"/>
        <parameter name="[applicationId]" operation="protocol.setFromMessage" value="header.applicationId"/>
        <parameter name="[hopByHop]" operation="protocol.setFromMessage" value="header.hopByHop"/>
        <parameter name="[endToEnd]" operation="protocol.setFromMessage" value="header.endToEnd"/>
        <parameter name="[sessionId]" operation="protocol.setFromMessage" value="avp.Session-Id:263.value"/>
        <parameter name="[authApplicationId]" operation="protocol.setFromMessage" value="avp.Auth-Application-Id:258.value"/>
        <parameter name="[destinationHost]" operation="protocol.setFromMessage" value="avp.Destination-Host:293.value"/>
        <parameter name="[destinationRealm]" operation="protocol.setFromMessage" value="avp.Destination-Realm:283.value"/>
    </receiveMessageDIAMETER>

    <parameter name="[avp26type]" operation="protocol.setFromMessage" value="avp.Cost.type"/>
    <test parameter="[avp26type]" condition="string.equalsIgnoreCase" value="float64"/>
         
    <parameter name="[listenpointName]" operation="protocol.setFromMessage" value=" listenpoint.name  "/>
    <test parameter="[listenpointName]" condition="list.isEmpty"/>
    <parameter name="[listenpointHost]" operation="protocol.setFromMessage" value="listenpoint.localHost"/>
    <test parameter="[listenpointHost]" condition="string.equals" value="0.0.0.0"/>
    <parameter name="[listenpointPort]" operation="protocol.setFromMessage" value="listenpoint.localPort"/>
    <test parameter="[listenpointPort]" condition="string.equals" value="[localPortDIAM]"/>
    
    <parameter name="[request]" operation="protocol.setFromMessage" value="message.request"/>
    <test parameter="[request]" condition="string.equals" value="true"/>
    <parameter name="[type]" operation="protocol.setFromMessage" value="message.type"/>
    <test parameter="[type]" condition="string.equals" value="Multimedia-Authentitcation:506"/>
    
    <parameter name="[protocol]" operation="protocol.setFromMessage" value="message.protocol"/>
    <test parameter="[protocol]" condition="string.equals" value="DIAMETER"/>
    <parameter name="[request1]" operation="protocol.setFromMessage" value="header.request"/>
    <test parameter="[request1]" condition="string.equals" value="true"/>
    <parameter name="[code]" operation="protocol.setFromMessage" value="header.command"/>
    <test parameter="[code]" condition="string.equals" value="Multimedia-Authentitcation:506"/>
    <parameter name="[appId]" operation="protocol.setFromMessage" value="header.applicationId"/>
    <test parameter="[appId]" condition="string.equals" value="[applicationID]"/>
    <parameter name="[hopByHop]" operation="protocol.setFromMessage" value="header.hopByHop"/>
    <test parameter="[hopByHop]" condition="number.equals" value="[newHopByHop]"/>
    <parameter name="[endToEnd]" operation="protocol.setFromMessage" value="header.endToEnd"/>
    <test parameter="[endToEnd]" condition="number.equals" value="[newEndToEnd]"/>
    <parameter name="[error]" operation="protocol.setFromMessage" value="header.error"/>
    <test parameter="[error]" condition="string.equals" value="false"/>
    <parameter name="[proxiable]" operation="protocol.setFromMessage" value="header.proxiable"/>
    <test parameter="[proxiable]" condition="string.equals" value="false"/>
    <parameter name="[retransmit]" operation="protocol.setFromMessage" value="header.retransmit"/>
    <test parameter="[retransmit]" condition="string.equals" value="false"/>
    
    <parameter name="[avp0code]" operation="protocol.setFromMessage" value="avp.Session-Id:263.code"/>
    <test parameter="[avp0code]" condition="number.equals" value="263"/>
    <parameter name="[avp0code]" operation="protocol.setFromMessage" value="avp.263.code"/>
    <test parameter="[avp0code]" condition="number.equals" value="263"/>
    <parameter name="[avp0code]" operation="protocol.setFromMessage" value="avp.Session-Id.code"/>
    <test parameter="[avp0code]" condition="number.equals" value="263"/>
    <parameter name="[avp0code]" operation="protocol.setFromMessage" value="avp.Session-Id.value"/>
    <test parameter="[avp0code]" condition="string.equals" value="[testcase:newSessionId]"/>
    <parameter name="[avp0value]" operation="protocol.setFromMessage" value="avp.Session-Id:263.value"/>
    <test parameter="[avp0value]" condition="string.equals" value="[testcase:newSessionId]"/>
    <parameter name="[avp0binary]" operation="protocol.setFromMessage" value="avp.263.binary"/>
    <!--test parameter="[avp0binary]" condition="string.equals" value="494e56495445 "/-->
    <parameter name="[avp0vendor]" operation="protocol.setFromMessage" value="avp.Session-Id.vendorId"/>
    <test parameter="[avp0vendor]" condition="list.isEmpty"/>
    
    <parameter name="[avp1code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.code"/>  
    <test parameter="[avp1code]" condition="number.equals" value="1018"/>
    <parameter name="[avp1type]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.type"/>  
    <test parameter="[avp1type]" condition="string.equalsIgnoreCase" value="Grouped"/>
    <parameter name="[avp1code]" operation="protocol.setFromMessage" value="avp.1018.code"/>
    <test parameter="[avp1code]" condition="number.equals" value="1018"/>
    <parameter name="[avp1code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.code"/>
    <test parameter="[avp1code]" condition="number.equals" value="1018"/>
    <parameter name="[avp1value]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.value"/>
    <test parameter="[avp1value]" condition="list.isEmpty"/>
    <parameter name="[avp1binary]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.binary"/>
    <!--test parameter="[avp1binary]" condition="string.equals" value="h49 h4e h56 h49 h54 h45 "/-->
    <parameter name="[avp1vendor]" operation="protocol.setFromMessage" value="avp.1018.vendorId"/>
    <test parameter="[avp1vendor]" condition="string.equals" value="3GPP:10415"/>
        
    <parameter name="[avp10code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Item-Number:1021.code"/>
    <test parameter="[avp10code]" condition="number.equals" value="1021"/>
    <parameter name="[avp10val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Item-Number:1021.value"/>
    <test parameter="[avp10val]" condition="number.equals" value="0"/>
    <parameter name="[avp10bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Item-Number:1021.binary"/>
    <test parameter="[avp10bin]" condition="binary.equals" value="00000000"/>
    <parameter name="[avp10vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Item-Number:1021.vendorId"/>
    <!--test parameter="[avp10vendor]" condition="string.equals" value="3GPP:10415"/-->

    <parameter name="[avp11code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Scheme:1020.code"/>
    <test parameter="[avp11code]" condition="number.equals" value="1020"/>
    <parameter name="[avp11val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Scheme:1020.value"/>
    <test parameter="[avp11val(0)]" condition="string.equals" value="DIGEST:2"/>
    <test parameter="[avp11val(1)]" condition="string.equals" value="0000"/>
    <parameter name="[avp11bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Scheme:1020.binary"/>
    <test parameter="[avp11bin(0)]" condition="binary.equals" value="00000002"/>
    <test parameter="[avp11bin(1)]" condition="binary.equals" value="30303030"/>
    <parameter name="[avp11vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Scheme:1020.vendorId"/>
    <test parameter="[avp11vendor]" condition="string.equals" value="3GPP:10415"/>

    <parameter name="[avp12code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authenticate:1019.code"/>
    <test parameter="[avp12code]" condition="number.equals" value="1019"/>
    <parameter name="[avp12val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authenticate:1019.value"/>
    <test parameter="[avp12val(0)]" condition="string.equals" value="Digest username='33875631975@sip.pfdev.fr',realm='sip.pfdev.fr',cnonce='40b18ccf',nc=00000001,qop=auth,uri='sip:sip.pfdev.fr',nonce='21bc27679ddac8fd6c0088817c8ae385',response='38179d99cc34ce0ad002ac4d70e37c0a',algorithm=MD5"/>
    <parameter name="[avp12bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authenticate:1019.binary"/>
    <test parameter="[avp12bin]" condition="binary.equals" value="44696765737420757365726e616d653d273333383735363331393735407369702e70666465762e6672272c7265616c6d3d277369702e70666465762e6672272c636e6f6e63653d273430623138636366272c6e633d30303030303030312c716f703d617574682c7572693d277369703a7369702e70666465762e6672272c6e6f6e63653d273231626332373637396464616338666436633030383838313763386165333835272c726573706f6e73653d273338313739643939636333346365306164303032616334643730653337633061272c616c676f726974686d3d4d4435"/>
    <parameter name="[avp12vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authenticate:1019.vendorId"/>
    <test parameter="[avp12vendor]" condition="string.equals" value="3GPP:10415"/>    

    <parameter name="[avp2code]" operation="protocol.setFromMessage" value="avp.1018.Authentication-Context:1024.code"/>
    <test parameter="[avp2code]" condition="number.equals" value="1024"/>
    <parameter name="[avp2code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.1024.code"/>
    <test parameter="[avp2code]" condition="number.equals" value="1024"/>
    <parameter name="[avp2code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Context.code"/>
    <test parameter="[avp2code]" condition="number.equals" value="1024"/>
    <parameter name="[avp2value]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Context:1024.value"/>
    <test parameter="[avp2value(0)]" condition="string.equals" value="INVITE"/>
    <test parameter="[avp2value(1)]" condition="string.equals" value="494e56495445"/>    
    <parameter name="[avp2binary]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item.Authentication-Context.binary"/>
    <test parameter="[avp2binary]" condition="binary.equals" value="494e56495445"/>    
    <parameter name="[avp2vendor]" operation="protocol.setFromMessage" value="avp.1018.1024.vendorId"/>
    <test parameter="[avp2vendor]" condition="string.equals" value="3GPP:10415"/>

    <parameter name="[avp13code]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Context:1024.code"/>
    <test parameter="[avp13code]" condition="number.equals" value="1024"/>
    <parameter name="[avp13val]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Context:1024.value"/>
    <test parameter="[avp13val(0)]" condition="string.equals" value="INVITE"/>
    <test parameter="[avp13val(1)]" condition="string.equals" value="494e56495445"/>
    <parameter name="[avp13bin]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Context:1024.binary"/>
    <test parameter="[avp13bin]" condition="binary.equals" value="494e56495445"/>
    <parameter name="[avp13vendor]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Context:1024.vendorId"/>
    <test parameter="[avp13vendor]" condition="string.equals" value="3GPP:10415"/>
    <parameter name="[avp13vFlag]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Context:1024.vendor"/>
    <test parameter="[avp13vFlag(0)]" condition="boolean.equals" value="false"/>
    <test parameter="[avp13vFlag(1)]" condition="boolean.equals" value="true"/>
    <parameter name="[avp13mand]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Context:1024.mandatory"/>
    <test parameter="[avp13mand]" condition="boolean.equals" value="true"/>
    <parameter name="[avp13priv]" operation="protocol.setFromMessage" value="avp.Auth-Data-Item:1018.Authentication-Context:1024.private"/>
    <test parameter="[avp13priv]" condition="boolean.equals" value="true"/>
    
    <parameter name="[avp3code]" operation="protocol.setFromMessage" value="avp.Destination-Realm:283.code"/>
    <test parameter="[avp3code]" condition="string.equals" value="283"/>
    <parameter name="[avp3code]" operation="protocol.setFromMessage" value="avp.283.code"/>
    <test parameter="[avp3code]" condition="string.equals" value="283"/>
    <parameter name="[avp3code]" operation="protocol.setFromMessage" value="avp.Destination-Realm.code"/>
    <test parameter="[avp3code]" condition="string.equals" value="283"/>
    <parameter name="[avp3value]" operation="protocol.setFromMessage" value="avp.Destination-Realm:283.value"/>
    <test parameter="[avp3value]" condition="string.equals" value="[remoteRealmDIAM]"/>
    <parameter name="[avp3binary]" operation="protocol.setFromMessage" value="avp.Destination-Realm.binary"/>
    <test parameter="[avp3binary]" condition="binary.equals" value="636c69656e742e6672"/>
    <parameter name="[avp3vendor]" operation="protocol.setFromMessage" value="avp.283.vendorId"/>
    <test parameter="[avp3vendor]" condition="list.isEmpty"/>

    <parameter name="[avp4val]" operation="protocol.setFromMessage" value="avp.IMS-Information:876.Event-Type:823.value"/>
    <test parameter="[avp4val]" condition="list.isEmpty"/>
    <parameter name="[avp4val]" operation="protocol.setFromMessage" value="avp.876.823.value"/>
    <test parameter="[avp4val]" condition="list.isEmpty"/>
    <parameter name="[avp4val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Event-Type.value"/>
    <test parameter="[avp4val]" condition="list.isEmpty"/>

    <parameter name="[avp5val]" operation="protocol.setFromMessage" value="avp.IMS-Information:876.Role-Of-Node:829.value"/>
    <test parameter="[avp5val]" condition="list.isEmpty"/>
    <parameter name="[avp5val]" operation="protocol.setFromMessage" value="avp.876.829.value"/>
    <test parameter="[avp5val]" condition="list.isEmpty"/>
    <parameter name="[avp5val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Role-Of-Node.value"/>
    <test parameter="[avp5val]" condition="list.isEmpty"/>

    <parameter name="[avp6val]" operation="protocol.setFromMessage" value="avp.IMS-Information:876.Node-Functionality:862.value"/>
    <test parameter="[avp6val]" condition="string.equals" value="1212121"/>
    <parameter name="[avp6val]" operation="protocol.setFromMessage" value="avp.876.862.value"/>
    <test parameter="[avp6val]" condition="string.equals" value="1212121"/>
    <parameter name="[avp6val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Node-Functionality.value"/>
    <test parameter="[avp6val]" condition="string.equals" value="1212121"/>

    <parameter name="[avp7val]" operation="protocol.setFromMessage" value="avp.IMS-Information:876.User-Session-ID:830.value"/>
    <test parameter="[avp7val]" condition="list.isEmpty"/>
    <parameter name="[avp7val]" operation="protocol.setFromMessage" value="avp.876.830.value"/>
    <test parameter="[avp7val]" condition="list.isEmpty"/>
    <parameter name="[avp7val]" operation="protocol.setFromMessage" value="avp.IMS-Information.User-Session-ID.value"/>
    <test parameter="[avp7val]" condition="list.isEmpty"/>
    
    <parameter name="[avp8val]" operation="protocol.setFromMessage" value="avp.IMS-Information:876.Calling-Party-Address:831.value"/>
    <test parameter="[avp8val]" condition="string.equals" value="badValue5"/>
    <parameter name="[avp8val]" operation="protocol.setFromMessage" value="avp.876.831.value"/>
    <test parameter="[avp8val]" condition="string.equals" value="badValue5"/>
    <parameter name="[avp8val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Calling-Party-Address.value"/>
    <test parameter="[avp8val]" condition="string.equals" value="badValue5"/>
    
    <parameter name="[avp9val]" operation="protocol.setFromMessage" value="avp.IMS-Information:876.Called-Party-Address:832.value"/>
    <test parameter="[avp9val]" condition="list.isEmpty"/>
    <parameter name="[avp9val]" operation="protocol.setFromMessage" value="avp.876.832.value"/>
    <test parameter="[avp9val]" condition="list.isEmpty"/>
    <parameter name="[avp9val]" operation="protocol.setFromMessage" value="avp.IMS-Information.Called-Party-Address.value"/>
    <test parameter="[avp9val]" condition="list.isEmpty"/>
    
    <parameter name="[avp14code]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.code"/>
    <test parameter="[avp14code]" condition="number.equals" value="260"/>
    <parameter name="[avp14type]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.type"/>
    <test parameter="[avp14type]" condition="string.equals" value="Grouped"/>
    <parameter name="[avp14value]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.value"/>
    <test parameter="[avp1value]" condition="list.isEmpty"/>
    <parameter name="[avp14vendor]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.vendorId"/>
    <test parameter="[avp14vendor]" condition="list.isEmpty"/>
    <parameter name="[avp14Acct]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.Acct-Application-Id:259.value"/>
    <test parameter="[avp14Acct]" condition="string.equals" value="[applicationID]"/>
    <parameter name="[avp14Auth]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.Auth-Application-Id:258.value"/>
    <test parameter="[avp14Auth]" condition="string.equals" value="[applicationID]"/>    
    <parameter name="[avp14VendorId]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.Vendor-Id.value"/>
    <test parameter="[avp14VendorId]" condition="string.equals" value="3GPP:10415"/>
    <parameter name="[avp149990]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.2999999990.code"/>    
    <test parameter="[avp149990]" condition="number.equals" value="2999999990"/>
    <!-- Unsigned32 -->        
    <parameter name="[avp149990]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.2999999990.unsigned32"/>    
    <test parameter="[avp149990]" condition="number.equals" value="111111111"/>
    <!-- Integer32 -->
    <parameter name="[avp149991]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.2999999991.integer64"/>    
    <test parameter="[avp149991]" condition="number.equals" value="65432109876543210"/>
    <!-- Float32 -->
    <parameter name="[avp149992]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.2999999992.float32"/>    
    <test parameter="[avp149992]" condition="number.equals" value="-0.0012345678"/>
    <!-- Float64 -->
    <parameter name="[avp149993]" operation="protocol.setFromMessage" value="avp.Vendor-Specific-Application-Id:260.2999999993.float64"/>
    <test parameter="[avp149993]" condition="number.equals" value="999999999e123"/>

    <!-- OctetString -->
    <parameter name="[avp159994code]" operation="protocol.setFromMessage" value="avp.2999999994.code"/>
    <test parameter="[avp159994code]" condition="number.equals" value="2999999994"/>
    <parameter name="[avp159994val]" operation="protocol.setFromMessage" value="avp.2999999994.octetstring"/>
    <test parameter="[avp159994val]" condition="string.equals" value="abcdefghijklmnopqrstuvwxyz"/>
    <parameter name="[avp159994bin]" operation="protocol.setFromMessage" value="avp.2999999994.binary"/>
    <test parameter="[avp159994bin]" condition="binary.equals" value="6162636465666768696a6b6c6d6e6f707172737475767778797a"/>
    <parameter name="[avp159994vendor]" operation="protocol.setFromMessage" value="avp.2999999994.vendorId"/>
    <test parameter="[avp159994vendor]" condition="string.equals" value="3GPP:10415"/>
    <!-- UTF8String -->
    <parameter name="[avp159995val]" operation="protocol.setFromMessage" value="avp.2999999995.utf8string"/>
    <test parameter="[avp159995val]" condition="string.equals" value="AAAAAAAAAAaaaaaaaaaa"/>
    <!-- Time -->
    <parameter name="[avp159996val]" operation="protocol.setFromMessage" value="avp.2999999996.time"/>
    <test parameter="[avp159996val]" condition="string.equals" value="20/08/2015 11:26:59:000"/>
    <!-- Address -->
    <parameter name="[avp159997val]" operation="protocol.setFromMessage" value="avp.2999999997.address"/>
    <test parameter="[avp159997val]" condition="string.equals" value="111.111.111.111"/>
    <!-- Binary -->
    <parameter name="[avp159998val]" operation="protocol.setFromMessage" value="avp.2999999998.binary"/>
    <test parameter="[avp159998val]" condition="binary.equals" value="010203040506070809101112123141516171819120"/>
    <!-- Bad type -->
    <parameter name="[avp159999val]" operation="protocol.setFromMessage" value="avp.2999999999.value"/>
    <test parameter="[avp159999val]" condition="binary.equals" value="30313233343536373839"/>
    <parameter name="[avp159999val]" operation="protocol.setFromMessage" value="avp.2999999999.unsigned32"/>
    <test parameter="[avp159999val]" condition="binary.equals" value="30313233343536373839"/>
    <parameter name="[avp159999val]" operation="protocol.setFromMessage" value="avp.2999999999.float64"/>
    <test parameter="[avp159999val]" condition="binary.equals" value="30313233343536373839"/>
    <parameter name="[avp159999val]" operation="protocol.setFromMessage" value="avp.2999999999.octetstring"/>
    <test parameter="[avp159999val]" condition="string.equals" value="0123456789"/>
    <parameter name="[avp159999val]" operation="protocol.setFromMessage" value="avp.2999999999.utf8string"/>
    <test parameter="[avp159999val]" condition="string.equals" value="0123456789"/>                       
    <parameter name="[avp159999val]" operation="protocol.setFromMessage" value="avp.2999999999.time"/>
    <test parameter="[avp159999val]" condition="binary.equals" value="30313233343536373839"/>               
    <parameter name="[avp159999val]" operation="protocol.setFromMessage" value="avp.2999999999.ipaddress"/>
    <test parameter="[avp159999val]" condition="binary.equals" value="30313233343536373839"/>               
    <!-- Bad type -->
    <parameter name="[avp159999val]" operation="protocol.setFromMessage" value="avp.3000000000.value"/>
    <test parameter="[avp159999val]" condition="binary.equals" value="22222222"/>
    <parameter name="[avp150000val]" operation="protocol.setFromMessage" value="avp.3000000000.Unsigned32"/>
    <test parameter="[avp150000val]" condition="number.equals" value="572662306"/>
    <parameter name="[avp150000val]" operation="protocol.setFromMessage" value="avp.3000000000.float64"/>
    <test parameter="[avp150000val]" condition="binary.equals" value="22222222"/>
    <parameter name="[avp150000val]" operation="protocol.setFromMessage" value="avp.3000000000.octetstring"/>
    <test parameter="[avp150000val]" condition="string.equals" value="&quot;&quot;&quot;&quot;"/>
    <parameter name="[avp150000val]" operation="protocol.setFromMessage" value="avp.3000000000.utf8string"/>
    <test parameter="[avp150000val]" condition="string.equals" value="&quot;&quot;&quot;&quot;"/>                       
    <parameter name="[avp150000val]" operation="protocol.setFromMessage" value="avp.3000000000.time"/>
    <test parameter="[avp150000val]" condition="string.equals" value="01/04/2054 09:20:02:000"/>               
    <parameter name="[avp150000val]" operation="protocol.setFromMessage" value="avp.3000000000.ipaddress"/>
    <test parameter="[avp150000val]" condition="string.equals" value="34.34.34.34"/>               
            
    <parameter name="[avp16code]" operation="protocol.setFromMessage" value="avp.Public-Identity.code"/>
    <test parameter="[avp16code]" condition="number.equals" value="601"/>
    <parameter name="[avp16code]" operation="protocol.setFromMessage" value="avp.2.code"/>
    <test parameter="[avp16code]" condition="number.equals" value="2"/>
    <parameter name="[avp16val]" operation="protocol.setFromMessage" value="avp.601.value"/>
    <test parameter="[avp16val]" condition="string.equals" value="sip:+33875631975@sip.pfdev.fr"/>
    <parameter name="[avp16val]" operation="protocol.setFromMessage" value="avp.2.value"/>
    <test parameter="[avp16val]" condition="string.equals" value="sip:+33333333333@sip.pfdev.fr"/>
    <parameter name="[avp16bin]" operation="protocol.setFromMessage" value="avp.Public-Identity.binary"/>
    <test parameter="[avp16bin]" condition="binary.equals" value="7369703a2b3333383735363331393735407369702e70666465762e6672"/>
    <parameter name="[avp16bin]" operation="protocol.setFromMessage" value="avp.2.binary"/>
    <test parameter="[avp16bin]" condition="binary.equals" value="7369703a2b3333333333333333333333407369702e70666465762e6672"/>
    <parameter name="[avp16vendor]" operation="protocol.setFromMessage" value="avp.601.vendorId"/>
    <test parameter="[avp16vendor]" condition="string.equals" value="3GPP:10415"/>
    <parameter name="[avp16vendor]" operation="protocol.setFromMessage" value="avp.2.vendorId"/>
    <test parameter="[avp16vendor]" condition="list.isEmpty"/>
    <parameter name="[avp16VFlag]" operation="protocol.setFromMessage" value="avp.Public-Identity.vendor"/>
    <test parameter="[avp16VFlag]" condition="boolean.equals" value="true"/>
    <parameter name="[avp16VFlag]" operation="protocol.setFromMessage" value="avp.2.vendor"/>
    <test parameter="[avp16VFlag]" condition="boolean.equals" value="false"/>
    <parameter name="[avp16mand]" operation="protocol.setFromMessage" value="avp.Public-Identity.mandatory"/>
    <test parameter="[avp16mand]" condition="boolean.equals" value="false"/>
    <parameter name="[avp16priv]" operation="protocol.setFromMessage" value="avp.Public-Identity.private"/>
    <test parameter="[avp16priv]" condition="boolean.equals" value="false"/>

    <!-- type = OctetString -->
    <parameter name="[avp17type]" operation="protocol.setFromMessage" value="avp.CHAP-Password:3.type"/>
    <test parameter="[avp17type]" condition="string.equalsIgnoreCase" value="OctetString"/>
    <parameter name="[avp17val]" operation="protocol.setFromMessage" value="avp.CHAP-Password:3.value"/>
    <test parameter="[avp17val]" condition="string.equals" value="'&quot;+-*/&gt;&lt;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"/>
    <parameter name="[avp17val]" operation="protocol.setFromMessage" value="avp.CHAP-Password:3.OctetString"/>
    <test parameter="[avp17val]" condition="string.equals" value="'&quot;+-*/&gt;&lt;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"/>
    <parameter name="[avp17bin]" operation="protocol.setFromMessage" value="avp.3.binary"/>
    <test parameter="[avp17bin]" condition="binary.equals" value="27222b2d2a2f3e3c303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a"/>
    <parameter name="[avp17bin]" operation="protocol.setFromMessage" value="avp.CHAP-Password.binary"/>
    <test parameter="[avp17bin]" condition="binary.equals" value="27222b2d2a2f3e3c303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a"/>

    <!-- type = UTF8String -->
    <parameter name="[avp18type]" operation="protocol.setFromMessage" value="avp.User-Name:1.type"/>
    <test parameter="[avp18type]" condition="string.equalsIgnoreCase" value="UTF8String"/>
    <parameter name="[avp18val]" operation="protocol.setFromMessage" value="avp.User-Name:1.value"/>
    <test parameter="[avp18val]" condition="string.equals" value="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"/>
    <parameter name="[avp18val]" operation="protocol.setFromMessage" value="avp.User-Name:1.UTF8string"/>
    <test parameter="[avp18val]" condition="string.equals" value="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"/>
    <parameter name="[avp18bin]" operation="protocol.setFromMessage" value="avp.1.binary"/>
    <test parameter="[avp18bin]" condition="binary.equals" value="303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a"/>
    <parameter name="[avp18val]" operation="protocol.setFromMessage" value="avp.User-Name.value"/>
    <test parameter="[avp18val]" condition="string.equals" value="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"/>

    <!-- type = IPAddress -->
    <parameter name="[avp19type]" operation="protocol.setFromMessage" value="avp.Framed-IP-Address:8.type"/>
    <test parameter="[avp19type]" condition="string.equalsIgnoreCase" value="IPAddress"/>
    <parameter name="[avp19val]" operation="protocol.setFromMessage" value="avp.Framed-IP-Address:8.value"/>
    <test parameter="[avp19val]" condition="list.size" value="2"/>
    <test parameter="[avp19val(0)]" condition="string.equals" value="192.168.90.117"/>
    <test parameter="[avp19val(1)]" condition="string.equals" value="[2a01:cf00:33:5::6e01]"/>
    <parameter name="[avp19val]" operation="protocol.setFromMessage" value="avp.Framed-IP-Address:8.IPAddress"/>
    <test parameter="[avp19val]" condition="list.size" value="2"/>
    <test parameter="[avp19val(0)]" condition="string.equals" value="192.168.90.117"/>
    <test parameter="[avp19val(1)]" condition="string.equals" value="[2a01:cf00:33:5::6e01]"/>
    <parameter name="[avp19bin]" operation="protocol.setFromMessage" value="avp.8.binary"/>
    <test parameter="[avp19val]" condition="list.size" value="2"/>
    <test parameter="[avp19bin(0)]" condition="string.equals" value="c0a85a75"/>
    <test parameter="[avp19bin(1)]" condition="string.equals" value="2a01cf00003300050000000000006e01"/>
    <parameter name="[avp19vendor]" operation="protocol.setFromMessage" value="avp.Framed-IP-Address.vendorId"/>
    <test parameter="[avp19vendor]" condition="list.isEmpty"/>

    <!-- type = Integer32 -->
    <parameter name="[avp20type]" operation="protocol.setFromMessage" value="avp.Management-Privilege-Level:136.type"/>
    <test parameter="[avp20type]" condition="string.equalsIgnoreCase" value="Integer32"/>
    <parameter name="[avp20val]" operation="protocol.setFromMessage" value="avp.Management-Privilege-Level:136.value"/>
    <test parameter="[avp20val(0)]" condition="number.equals" value="-2000000000"/>
    <test parameter="[avp20val(1)]" condition="number.equals" value="2000000000"/>
    <parameter name="[avp20val]" operation="protocol.setFromMessage" value="avp.Management-Privilege-Level:136.Integer32"/>
    <test parameter="[avp20val(0)]" condition="number.equals" value="-2000000000"/>
    <test parameter="[avp20val(1)]" condition="number.equals" value="2000000000"/>
    <parameter name="[avp20bin]" operation="protocol.setFromMessage" value="avp.136.binary"/>
    <test parameter="[avp20bin(0)]" condition="binary.equals" value="88ca6c00"/>
    <test parameter="[avp20bin(1)]" condition="binary.equals" value="77359400"/>
    <parameter name="[avp20vendor]" operation="protocol.setFromMessage" value="avp.136.vendorId"/>
    <test parameter="[avp20vendor]" condition="list.isEmpty"/>

    <!-- type = Integer64 -->
    <parameter name="[avp21type]" operation="protocol.setFromMessage" value="avp.Value-Digits:447.type"/>
    <test parameter="[avp21type]" condition="string.equalsIgnoreCase" value="Integer64"/>
    <parameter name="[avp21val]" operation="protocol.setFromMessage" value="avp.Value-Digits:447.value"/>
    <test parameter="[avp21val(0)]" condition="number.equals" value="-2000000000000000000"/>
    <test parameter="[avp21val(1)]" condition="number.equals" value="2000000000000000000"/>
    <parameter name="[avp21val]" operation="protocol.setFromMessage" value="avp.Value-Digits:447.INTEGER64"/>
    <test parameter="[avp21val(0)]" condition="number.equals" value="-2000000000000000000"/>
    <test parameter="[avp21val(1)]" condition="number.equals" value="2000000000000000000"/>
    <parameter name="[avp21bin]" operation="protocol.setFromMessage" value="avp.447.binary"/>
    <test parameter="[avp21bin(0)]" condition="binary.equals" value="e43e9298b1380000"/>
    <test parameter="[avp21bin(1)]" condition="binary.equals" value="1bc16d674EC80000"/>
    <parameter name="[avp21vendor]" operation="protocol.setFromMessage" value="avp.Value-Digits.vendorId"/>
    <test parameter="[avp21vendor]" condition="list.isEmpty"/>

    <!-- type = Unsigned32 -->
    <parameter name="[avp22type]" operation="protocol.setFromMessage" value="avp.NAS-Port:5.type"/>
    <test parameter="[avp22type]" condition="string.equalsIgnoreCase" value="Unsigned32"/>
    <parameter name="[avp22val]" operation="protocol.setFromMessage" value="avp.NAS-Port:5.value"/>
    <test parameter="[avp22val(0)]" condition="number.equals" value="4000000000"/>
    <test parameter="[avp22val(1)]" condition="number.equals" value="2000000000"/>
    <parameter name="[avp22val]" operation="protocol.setFromMessage" value="avp.NAS-Port:5.Unsigned32"/>
    <test parameter="[avp22val(0)]" condition="number.equals" value="4000000000"/>
    <test parameter="[avp22val(1)]" condition="number.equals" value="2000000000"/>
    <parameter name="[avp22bin]" operation="protocol.setFromMessage" value="avp.5.binary"/>
    <test parameter="[avp22bin(0)]" condition="binary.equals" value="ee6b2800"/>
    <test parameter="[avp22bin(1)]" condition="binary.equals" value="77359400"/>
    <parameter name="[avp22vendor]" operation="protocol.setFromMessage" value="avp.NAS-Port.vendorId"/>
    <test parameter="[avp22vendor]" condition="list.isEmpty"/>

    <!-- type = Unsigned64 -->
    <parameter name="[avp23type]" operation="protocol.setFromMessage" value="avp.Framed-Interface-Id:96.type"/>
    <test parameter="[avp23type]" condition="string.equalsIgnoreCase" value="Unsigned64"/>
    <parameter name="[avp23val]" operation="protocol.setFromMessage" value="avp.Framed-Interface-Id:96.value"/>
    <test parameter="[avp23val(0)]" condition="number.equals" value="8000000000000000000"/>
    <test parameter="[avp23val(1)]" condition="number.equals" value="4000000000000000000"/>
   <parameter name="[avp23val]" operation="protocol.setFromMessage" value="avp.Framed-Interface-Id:96.unsigned64"/>
    <test parameter="[avp23val(0)]" condition="number.equals" value="8000000000000000000"/>
    <test parameter="[avp23val(1)]" condition="number.equals" value="4000000000000000000"/>        
    <parameter name="[avp23bin]" operation="protocol.setFromMessage" value="avp.96.binary"/>
    <test parameter="[avp23bin(0)]" condition="binary.equals" value="6f05b59d3b200000"/>
    <test parameter="[avp23bin(1)]" condition="binary.equals" value="3782dace9d900000"/>
    <parameter name="[avp23vendor]" operation="protocol.setFromMessage" value="avp.Framed-Interface-Id.vendorId"/>
    <test parameter="[avp23vendor]" condition="list.isEmpty"/>

    <!-- type = Time -->
    <parameter name="[avp24type]" operation="protocol.setFromMessage" value="avp.Event-Timestamp:55.type"/>
    <test parameter="[avp24type]" condition="string.equalsIgnoreCase" value="Time"/>
    <parameter name="[avp24val]" operation="protocol.setFromMessage" value="avp.Event-Timestamp:55.value"/>
    <test parameter="[avp24val(0)]" condition="string.equals" value="20/02/2011 17:35:56:000"/>
    <test parameter="[avp24val(1)]" condition="string.equals" value="04/08/2015 11:12:59:000"/>
    <parameter name="[avp24val]" operation="protocol.setFromMessage" value="avp.Event-Timestamp:55.TIME"/>
    <test parameter="[avp24val(0)]" condition="string.equals" value="20/02/2011 17:35:56:000"/>
    <test parameter="[avp24val(1)]" condition="string.equals" value="04/08/2015 11:12:59:000"/>
    <parameter name="[avp24bin]" operation="protocol.setFromMessage" value="avp.55.binary"/>
    <test parameter="[avp24bin(0)]" condition="binary.equals" value="d10bc16c"/>
    <test parameter="[avp24bin(1)]" condition="binary.equals" value="d96b009b"/>
    <parameter name="[avp24vendor]" operation="protocol.setFromMessage" value="avp.Event-Timestamp.vendorId"/>
    <test parameter="[avp24vendor]" condition="list.isEmpty"/>

    <!-- type = Float32 -->
    <parameter name="[avp25type]" operation="protocol.setFromMessage" value="avp.Peak-Traffic-Rate:498.type"/>
    <test parameter="[avp25type]" condition="string.equalsIgnoreCase" value="FLOAT32"/>
    <parameter name="[avp25val]" operation="protocol.setFromMessage" value="avp.Peak-Traffic-Rate:498.value"/>
    <test parameter="[avp25val(0)]" condition="number.equals" value="1.2345679e29"/>
    <test parameter="[avp25val(1)]" condition="number.equals" value="9.8e-45"/>
    <test parameter="[avp25val(2)]" condition="number.equals" value="1.2345679E38"/>    
    <parameter name="[avp25val]" operation="protocol.setFromMessage" value="avp.Peak-Traffic-Rate:498.float32"/>
    <test parameter="[avp25val(0)]" condition="number.equals" value="1.2345679e29"/>
    <test parameter="[avp25val(1)]" condition="number.equals" value="9.8e-45"/>
    <test parameter="[avp25val(2)]" condition="number.equals" value="1.2345679E38"/>    
    <parameter name="[avp25bin]" operation="protocol.setFromMessage" value="avp.498.binary"/>
    <test parameter="[avp25bin(0)]" condition="binary.equals" value="6fc77488"/>
    <test parameter="[avp25bin(1)]" condition="binary.equals" value="00000007"/>
    <test parameter="[avp25bin(2)]" condition="binary.equals" value="7eb9C1D3"/>
    <parameter name="[avp25vendor]" operation="protocol.setFromMessage" value="avp.Peak-Traffic-Rate.vendorId"/>
    <test parameter="[avp25vendor]" condition="list.isEmpty"/>

    <!-- type = Float64 -->
    <parameter name="[avp26type]" operation="protocol.setFromMessage" value="avp.Cost:603.type"/>
    <test parameter="[avp26type]" condition="string.equalsIgnoreCase" value="float64"/>
    <parameter name="[avp26val]" operation="protocol.setFromMessage" value="avp.Cost:603.value"/>
    <test parameter="[avp26val(0)]" condition="number.equals" value="1.2345678901234567E69"/>
    <test parameter="[avp26val(1)]" condition="number.equals" value="-1.0E308"/>
    <test parameter="[avp26val(2)]" condition="number.equals" value="-1E-323"/>
    <parameter name="[avp26val]" operation="protocol.setFromMessage" value="avp.Cost:603.FLOAT64"/>
    <test parameter="[avp26val(0)]" condition="number.equals" value="1.2345678901234567E69"/>
    <test parameter="[avp26val(1)]" condition="number.equals" value="-1.0E308"/>
    <test parameter="[avp26val(2)]" condition="number.equals" value="-1E-323"/>
    <parameter name="[avp26bin]" operation="protocol.setFromMessage" value="avp.603.binary"/>
    <test parameter="[avp26bin(0)]" condition="binary.equals" value="4e46e5762616fA13"/>
    <test parameter="[avp26bin(1)]" condition="binary.equals" value="ffe1ccf385ebc8a0"/>
    <test parameter="[avp26bin(2)]" condition="binary.equals" value="8000000000000002"/>
    <parameter name="[avp26vendor]" operation="protocol.setFromMessage" value="avp.Cost.vendorId"/>
    <test parameter="[avp26vendor]" condition="string.equals" value="Ericsson:193"/>

    <!-- Bad type-->
    <parameter name="[avp27type]" operation="protocol.setFromMessage" value="avp.Subscription-Id-Type:555.type"/>
    <test parameter="[avp27type]" condition="string.equalsIgnoreCase" value="unsigned32"/>
    <parameter name="[avp27val]" operation="protocol.setFromMessage" value="avp.Subscription-Id-Type:555.value"/>
    <test parameter="[avp27val(0)]" condition="number.equals" value="3999999999"/>
    <test parameter="[avp27val(1)]" condition="string.equals" value="End User PRIVATE (operator defined):4"/>
    <test parameter="[avp27val(2)]" condition="binary.equals" value="42616420747970653a393939393939393939"/>
    <parameter name="[avp27val]" operation="protocol.setFromMessage" value="avp.Subscription-Id-Type:555.Unsigned32"/>
    <test parameter="[avp27val(0)]" condition="number.equals" value="3999999999"/>
    <test parameter="[avp27val(1)]" condition="string.equals" value="End User PRIVATE (operator defined):4"/>
    <test parameter="[avp27val(2)]" condition="binary.equals" value="42616420747970653a393939393939393939"/>
    <parameter name="[avp26bin]" operation="protocol.setFromMessage" value="avp.555.binary"/>
    <test parameter="[avp26bin(0)]" condition="binary.equals" value="ee6b27ff"/>
    <test parameter="[avp26bin(1)]" condition="binary.equals" value="00000004"/>
    <test parameter="[avp26bin(2)]" condition="binary.equals" value="42616420747970653a393939393939393939"/>
    <parameter name="[avp26vendor]" operation="protocol.setFromMessage" value="avp.Subscription-Id-Type.vendorId"/>
    <test parameter="[avp26vendor]" condition="string.equals" value="Ericsson:193"/>

    <!-- check binary message data -->    
    <parameter name="[binary]" operation="protocol.setFromMessage" value="message.binary"/>    
    <test parameter="[binary]" condition="binary.equals" value="0100066c800001fa000010e1069f6bc70d3ed78e000001074000001c31323334353637383930313233343536373839300000010440000064b2d05df66000000c069f6bc7000001034000000c000010e1b2d05df76000001000e8762842187eea000001024000000c000010e1b2d05df86000000cbaa1d1390000010a6000000c000028afb2d05df9600000105b568a9c93ce6b0c000001156000000c0000000100000108600000153136342e34382e3231392e36320000000000012840000011636c69656e742e667200000000000125400000153136342e34382e3231392e36320000000000011b40000011636c69656e742e66720000000000025980000029000028af7369703a2b3333383735363331393735407369702e70666465762e667200000000000002000000257369703a2b3333333333333333333333407369702e70666465762e667200000000000402e0000010000028af00000001000003fa60000118000003fd6000000c00000000000003fc6000000c00000002000003fb600000e844696765737420757365726e616d653d273333383735363331393735407369702e70666465762e6672272c7265616c6d3d277369702e70666465762e6672272c636e6f6e63653d273430623138636366272c6e633d30303030303030312c716f703d617574682c7572693d277369703a7369702e70666465762e6672272c6e6f6e63653d273231626332373637396464616338666436633030383838313763386165333835272c726573706f6e73653d273338313739643939636333346365306164303032616334643730653337633061272c616c676f726974686d3d4d4435000004006000000e494e564954450000000003fae000012c000028af0000058be0000010000028af00000000000003fce0000010000028af30303030000003fbe00000ec000028af44696765737420757365726e616d653d273333383735363331393735407369702e70666465762e6672272c7265616c6d3d277369702e70666465762e6672272c636e6f6e63653d273430623138636366272c6e633d30303030303030312c716f703d617574682c7572693d277369703a7369702e70666465762e6672272c6e6f6e63653d273231626332373637396464616338666436633030383838313763386165333835272c726573706f6e73653d273338313739643939636333346365306164303032616334643730653337633061272c616c676f726974686d3d4d443500000400e0000012000028af494e564954450000b2d05dfae0000026000028af6162636465666768696a6b6c6d6e6f707172737475767778797a0000b2d05dfbe0000020000028af4141414141414141414161616161616161616161b2d05dfce0000010000028afd9801be3b2d05dfde0000010000028af6f6f6f6fb2d05dfee0000021000028af010203040506070809101112123141516171819120000000b2d05dffe0000016000028af303132333435363738390000b2d05e00e0000010000028af222222220000036cc0000034000028af0000035ec0000010000028af00127ed90000033fc0000015000028af62616456616c756535000000000000036000004e27222b2d2a2f3e3c303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a00000000000160000046303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a0000000000086000000cc0a85a7500000008600000182a01cf00003300050000000000006e01000000886000000c88ca6c00000000886000000c77359400000001bf60000010e43e9298b1380000000001bf600000101bc16d674ec80000000000056000000cee6b2800000000056000000c7735940000000060600000106f05b59d3b20000000000060600000103782dace9d900000000000374000000cd10bc16c000000374000000cd96b009b000001f26000000c6fc77488000001f26000000c00000007000001f26000000c7eb9c1d30000025be0000014000000c14e46e5762616fa130000025be0000014000000c1ffe1ccf385ebc8a00000025be0000014000000c180000000000000020000022be0000010000000c1ee6b27ff0000022be0000010000000c1000000040000022be000001e000000c142616420747970653a3939393939393939390000"/>
    
    <parameter name="[xml]" operation="protocol.setFromMessage" value="message.xml"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2=" " value3=""/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="hopByHop=&quot;[0-9]*&quot;" value3="X"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="endToEnd=&quot;[0-9]*&quot;" value3="X"/>
    <parameter name="[xml]" operation="string.regexReplaces" value="[xml]" value2="code=&quot;263&quot;value=&quot;[0-9,a,b,c,d,e,f]*&quot;" value3="X"/>


    <sendMessageDIAMETER name="SendAnswerMAA" listenpoint="[listenpointName]" 
                         remoteHost="[remoteHost]" remotePort="[remotePortDIAM]">
        <header request="false" command="[commandCode]" applicationId="[applicationID]"  
                hopByHop="[hopByHop]" endToEnd="[endToEnd]"
                proxiable="true" error="true" retransmit="true"/>
        <avp code="Session-Id:263" value="[sessionId]"/>
        <avp code="Origin-Host:264" value="[remoteHostDIAM]"/>
        <avp code="Origin-Realm:296" value="[remoteRealmDIAM]"/>
        <avp code="Vendor-Specific-Application-Id:260">                                      
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>              
            <avp code="Acct-Application-Id:259" value="[applicationID]"/>
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
            <avp code="Auth-Application-Id:258" value="[applicationID]"/>
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
            <avp code="Vendor-Id:266" value="TGPP"/>
            <avp code="999999999" mandatory="true" type="Unsigned32" value="1234567890"/>
        </avp>
        <avp code="Auth-Session-State:277" value="NO_STATE_MAINTAINED:1"/>
        <avp code="Result-Code:268" value="DIAMETER_SUCCESS:2001"/>		
        <avp code="Public-Identity" value="sip:+33875631975@sip.pfdev.fr"/>
        <avp code="Number-Authentication-Items:1026" value="1"/>
        <avp code="Auth-Data-Item:1018">
                <avp code="Item-Number:1021" value="0"/>
                <avp code="Authentication-Scheme:1020" value="DIGEST"/>
                <avp code="Authenticate:1019" value='Digest username=\"33875631975@sip.pfdev.fr\",realm=\"sip.pfdev.fr\",cnonce=\"40b18ccf\",nc=00000001,qop=auth,uri=\"sip:sip.pfdev.fr\",nonce=\"21bc27679ddac8fd6c0088817c8ae385\",response=\"38179d99cc34ce0ad002ac4d70e37c0a\",algorithm=MD5'/>
                <avp code="Authentication-Context:1024" value="INVITE"/>
        </avp>
    </sendMessageDIAMETER>
    
</scenario>

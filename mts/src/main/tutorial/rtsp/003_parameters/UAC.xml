<?xml version="1.0" encoding="UTF-8"?>
<scenario>

    <createListenpointRTSP name="session6" localHost="0.0.0.0" localPort="6666"/>

    <sendMessageRTSP name="Send Describe" listenpoint="session6">
<![CDATA[DESCRIBE rtsp://[remoteHostRTSP]:6666/demo/548/sound RTSP/1.0
CSeq: 1 
Accept: application/sdp, application/rtsl, application/mheg

]]>
    </sendMessageRTSP>

    <receiveMessageRTSP name="Wait 200 OK" type="DESCRIBE" result="200">
        <parameter name="[remoteHostRTSP]" operation="protocol.setFromMessage" value="channel.remoteHost"/>
        <parameter name="[remotePortRTSP]" operation="protocol.setFromMessage" value="channel.remotePort"/>
        <parameter name="[firstline]" operation="protocol.setFromMessage" value="firstline"/>
        <parameter name="[method]" operation="protocol.setFromMessage" value="firstline.method"/>
        <parameter name="[version]" operation="protocol.setFromMessage" value="firstline.version"/>
        <parameter name="[uri]" operation="protocol.setFromMessage" value="firstline.uri"/>
        <parameter name="[statuscode]" operation="protocol.setFromMessage" value="firstline.statuscode"/>
        <parameter name="[reason]" operation="protocol.setFromMessage" value="firstline.reasonphrase"/>

        <parameter name="[header]" operation="protocol.setFromMessage" value="header"/>
        <parameter name="[cseq]" operation="protocol.setFromMessage" value="header.cseq"/>
        <parameter name="[htype]" operation="protocol.setFromMessage" value="header.Content-Type"/>
        <parameter name="[transPort]" operation="protocol.setFromMessage" value="header.transport.port"/>
        <parameter name="[boundary]" operation="protocol.setFromMessage" value="header.content-type.boundary"/>

        <parameter name="[ctype]" operation="protocol.setFromMessage" value="content.content-type"/>

        <parameter name="[SDP0]" operation="protocol.setFromMessage" value="content(0)"/>
        <parameter name="[SDP1]" operation="protocol.setFromMessage" value="content(1)"/>
        <parameter name="[SDPType0]" operation="protocol.setFromMessage" value="content(0).Type"/>
        <parameter name="[SDPType1]" operation="protocol.setFromMessage" value="content(1).Type"/>
        <parameter name="[SDPSDP0]" operation="protocol.setFromMessage" value="content(0).Sdp"/>
        <parameter name="[SDPSDP1]" operation="protocol.setFromMessage" value="content(1).Sdp"/>
        <parameter name="[SDPVersion0]" operation="protocol.setFromMessage" value="content(0).Sdp.Version"/>
        <parameter name="[SDPOrigin0]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin"/>
        <parameter name="[SDPOriginSessionId0]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.SessionId"/>
        <parameter name="[SDPOriginSessionVersion0]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.SessionVersion"/>
        <parameter name="[SDPOriginAddress]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.Address"/>
        <parameter name="[SDPOriginAddressType]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.AddressType"/>
        <parameter name="[SDPOriginNetworkType]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.NetworkType"/>
        <parameter name="[SDPUserName0]" operation="protocol.setFromMessage" value="content(0).Sdp.Origin.UserName"/>
        <parameter name="[SDPEmail0]" operation="protocol.setFromMessage" value="content(0).Sdp.Email"/>
        <parameter name="[SDPConnection0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection"/>
        <parameter name="[SDPConnectionAddress0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection.Address"/>
        <parameter name="[SDPConnectionAddressType0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection.AddressType"/>
        <parameter name="[SDPConnectionNetworkType0]" operation="protocol.setFromMessage" value="content(0).Sdp.Connection.NetworkType"/>
        <parameter name="[SDPInformation0]" operation="protocol.setFromMessage" value="content(0).Sdp.Information"/>
        <parameter name="[SDPUri0]" operation="protocol.setFromMessage" value="content(0).Sdp.Uri"/>
        <parameter name="[SDPMedia0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media"/>
        <parameter name="[SDPMediaInformation0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Information"/>
        <parameter name="[SDPMediaAttribute0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Attribut"/>
        <parameter name="[SDPMediaAttributeRTPMAPValue0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Attribut.rtpmap"/>
        <parameter name="[SDPMediaAttributeFMTPValue0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Attribut.fmtp"/>
        <parameter name="[SDPMediaPort0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Port"/>
        <parameter name="[SDPMediaProtocol0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Protocol"/>
        <parameter name="[SDPMediaFormat0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Format"/>
        <parameter name="[SDPMediaPortCount0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.PortCount"/>
        <parameter name="[SDPMediaType0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Type"/>
        <parameter name="[SDPMediaBandWidth]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.BandWidth"/>
        <parameter name="[SDPMediaBandWidthType]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.BandWidth.Type"/>
        <parameter name="[SDPMediaBandWidthValue]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.BandWidth.Value"/>
        <parameter name="[SDPSessionName]" operation="protocol.setFromMessage" value="content(0).Sdp.SessionName"/>
        <parameter name="[SDPTime]" operation="protocol.setFromMessage" value="content(0).Sdp.Time"/>
        <parameter name="[SDPBandWidth]" operation="protocol.setFromMessage" value="content(0).Sdp.BandWidth"/>
        <parameter name="[SDPBandWidthType]" operation="protocol.setFromMessage" value="content(0).Sdp.BandWidth.Type"/>
        <parameter name="[SDPBandWidthValue]" operation="protocol.setFromMessage" value="content(0).Sdp.BandWidth.Value"/>
        <parameter name="[SDPAttribute0]" operation="protocol.setFromMessage" value="content(0).Sdp.Attribut"/>
        <parameter name="[SDPAttributeRecvonly0]" operation="protocol.setFromMessage" value="content(0).Sdp.Attribut.recvonly"/>
        <parameter name="[SDPTimeStart]" operation="protocol.setFromMessage" value="content(0).Sdp.Time.Start"/>
        <parameter name="[SDPTimeStop]" operation="protocol.setFromMessage" value="content(0).Sdp.Time.Stop"/>
        <parameter name="[SDPMediaConnection0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Connection"/>
        <parameter name="[SDPMediaConnectionAddress0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Connection.Address"/>
        <parameter name="[SDPMediaConnectionddressType0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Connection.AddressType"/>
        <parameter name="[SDPMediaConnectionNetworkType0]" operation="protocol.setFromMessage" value="content(0).Sdp.Media.Connection.NetworkType"/>

    </receiveMessageRTSP>

    <test parameter="[remoteHostRTSP]" condition="string.equals" value="[remoteHostRTSP]"/>
    <test parameter="[firstline]" condition="string.equals" value="RTSP/1.0 200 OK"/>
    <test parameter="[method]" condition="list.isEmpty"/>
    <test parameter="[version]" condition="string.equals" value="RTSP/1.0"/>
    <test parameter="[uri]" condition="list.isEmpty"/>
    <test parameter="[statuscode]" condition="string.equals" value="200"/>
    <test parameter="[reason]" condition="string.equals" value="OK"/>
    <test parameter="[header]" condition="string.contains" value="CSeq: 1"/>
    <test parameter="[header]" condition="string.contains" value="Content-Type: multipart/mixed;boundary=&quot;----=_Part_0&quot;"/>
    <test parameter="[header]" condition="string.contains" value="Content-Length: 911"/>
    <test parameter="[cseq]" condition="string.equals" value="1"/>
    <test parameter="[htype]" condition="string.equals" value="multipart/mixed;boundary=&quot;----=_Part_0&quot;"/>
    <test parameter="[transPort]" condition="list.isEmpty"/>
    <test parameter="[boundary]" condition="list.isEmpty"/>
    <test parameter="[ctype]" condition="list.isEmpty"/>
    <test parameter="[SDP0]" condition="string.contains" value="s=RTSP Session"/>
    <test parameter="[SDP1]" condition="string.contains" value="Content-Disposition: recipient-list"/>
    <test parameter="[SDPType0]" condition="string.equals" value="Content-Type: application/sdp"/>
    <test parameter="[SDPType1]" condition="string.equals" value="Content-Type: application/resource-lists+xml"/>
    <test parameter="[SDPSDP0]" condition="string.contains" value="t=3034423619 3042462419"/>
    <test parameter="[SDPSDP1]" condition="string.contains" value="resource-lists"/>
    <test parameter="[SDPVersion0]" condition="string.equals" value="0"/>
    <test parameter="[SDPOrigin0]" condition="string.contains" value="mhandley 2890844526 2890842807 IN IP4 126.16.64.4"/>
    <test parameter="[SDPOriginAddress]" condition="string.equals" value="126.16.64.4"/>
    <test parameter="[SDPOriginAddressType]" condition="string.equals" value="IP4"/>
    <test parameter="[SDPOriginSessionVersion0]" condition="string.equals" value="2890842807"/>
    <test parameter="[SDPOriginSessionId0]" condition="string.equals" value="2890844526"/>
    <test parameter="[SDPOriginNetworkType]" condition="string.equals" value="IN"/>
    <test parameter="[SDPOriginAddress]" condition="string.equals" value="126.16.64.4"/>
    <test parameter="[SDPEmail0]" condition="string.contains" value="mjh@isi.edu"/>
    <test parameter="[SDPUserName0]" condition="string.equals" value="mhandley"/>
    <test parameter="[SDPConnection0]" condition="string.contains" value="IN IP4 224.2.17.12/127"/>
    <test parameter="[SDPConnectionAddress0]" condition="string.equals" value="224.2.17.12"/>
    <test parameter="[SDPConnectionAddressType0]" condition="string.equals" value="IP4"/>
    <test parameter="[SDPConnectionNetworkType0]" condition="string.equals" value="IN"/>
    <test parameter="[SDPInformation0]" condition="string.contains" value="An Example of RTSP Session Usage"/>
    <test parameter="[SDPUri0]" condition="string.contains" value="http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps"/>
    <test parameter="[SDPMedia0(0)]" condition="string.contains" value="49232/2 RTP/AVP 98"/>
    <test parameter="[SDPMedia0(1)]" condition="string.contains" value="49230/3 RTP/AVP 96"/>
    <test parameter="[SDPMediaInformation0(0)]" condition="string.equals" value="mavideo"/>
    <test parameter="[SDPMediaInformation0(1)]" condition="string.equals" value="monaudio"/>
    <test parameter="[SDPMediaPortCount0(0)]" condition="string.equals" value="2"/>
    <test parameter="[SDPMediaPortCount0(1)]" condition="string.equals" value="3"/>
    <test parameter="[SDPMediaPort0(0)]" condition="string.equals" value="49232"/>
    <test parameter="[SDPMediaPort0(1)]" condition="string.equals" value="49230"/>
    <test parameter="[SDPMediaProtocol0(0)]" condition="string.equals" value="RTP/AVP"/>
    <test parameter="[SDPMediaProtocol0(1)]" condition="string.equals" value="RTP/AVP"/>
    <test parameter="[SDPMediaType0(0)]" condition="string.equals" value="video"/>
    <test parameter="[SDPMediaType0(1)]" condition="string.equals" value="audio"/>
    <test parameter="[SDPMediaFormat0(0)]" condition="string.equals" value="98"/>
    <test parameter="[SDPMediaFormat0(1)]" condition="string.equals" value="96"/>
    <test parameter="[SDPSessionName]" condition="string.contains" value="RTSP Session"/>
    <test parameter="[SDPTime]" condition="string.contains" value="t=3034423619 3042462419"/>
    <test parameter="[SDPMediaBandWidth(0)]" condition="string.contains" value="b=SA:256"/>
    <test parameter="[SDPMediaBandWidthType(0)]" condition="string.equals" value="SA"/>
    <test parameter="[SDPMediaBandWidthValue(0)]" condition="string.equals" value="256"/>
    <test parameter="[SDPMediaBandWidth(1)]" condition="string.contains" value="b=CT:128"/>
    <test parameter="[SDPMediaBandWidthType(1)]" condition="string.equals" value="CT"/>
    <test parameter="[SDPMediaBandWidthValue(1)]" condition="string.equals" value="128"/>

    <test parameter="[SDPBandWidth]" condition="string.contains" value="b=CT:128"/>
    <test parameter="[SDPBandWidthType]" condition="string.equals" value="CT"/>
    <test parameter="[SDPBandWidthValue]" condition="string.equals" value="128"/>
    <test parameter="[SDPAttribute0(0)]" condition="string.contains" value="a=type:H332"/>
    <test parameter="[SDPAttribute0(1)]" condition="string.contains" value="a=recvonly:20"/>
    <test parameter="[SDPAttributeRecvonly0]" condition="string.equals" value="20"/>
    <test parameter="[SDPMediaAttribute0(0)]" condition="string.contains" value="a=rtpmap:97 amr/8000/1"/>
    <test parameter="[SDPMediaAttributeRTPMAPValue0(0)]" condition="string.equals" value="97 amr/8000/1"/>
    <test parameter="[SDPMediaAttributeRTPMAPValue0(1)]" condition="string.equals" value="96 L8/8000"/>
    <test parameter="[SDPMediaAttributeFMTPValue0(0)]" condition="string.contains" value="97 mode-set=1;octet-align=1;crc=0"/>

    <sendMessageRTSP name="Send Setup" listenpoint="session6">
<![CDATA[SETUP rtsp://[remoteHostRTSP]:6666/demo/548/sound RTSP/1.0
CSeq: 2
Transport:RTP/AVP;multicast;destination=225.219.201.15;port=7000-7001;ttl=127
Conference:199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr

]]>
    </sendMessageRTSP>

    <receiveMessageRTSP name="Wait 200 OK" type="SETUP" result="200">
        <parameter name="[listenpointName]" operation="protocol.setFromMessage" value="listenpoint.name"/>
        <parameter name="[remoteHostRTSP]" operation="protocol.setFromMessage" value="channel.remoteHost"/>
        <parameter name="[remotePortRTSP]" operation="protocol.setFromMessage" value="channel.remotePort"/>
        <parameter name="[firstline]" operation="protocol.setFromMessage" value="firstline"/>
        <parameter name="[method]" operation="protocol.setFromMessage" value="firstline.method"/>
        <parameter name="[version]" operation="protocol.setFromMessage" value="firstline.version"/>
        <parameter name="[uri]" operation="protocol.setFromMessage" value="firstline.uri"/>
        <parameter name="[statuscode]" operation="protocol.setFromMessage" value="firstline.statuscode"/>
        <parameter name="[reason]" operation="protocol.setFromMessage" value="firstline.reasonphrase"/>

        <parameter name="[header]" operation="protocol.setFromMessage" value="header"/>
        <parameter name="[cseq]" operation="protocol.setFromMessage" value="header.cseq"/>
        <parameter name="[htype]" operation="protocol.setFromMessage" value="header.content-type"/>
        <parameter name="[transPort]" operation="protocol.setFromMessage" value="header.transport.port"/>
        <parameter name="[boundary]" operation="protocol.setFromMessage" value="header.content-type.boundary"/>

        <parameter name="[content]" operation="protocol.setFromMessage" value="content"/>
        <parameter name="[ctype]" operation="protocol.setFromMessage" value="content.content-type"/>
    </receiveMessageRTSP>

    <log level="INFO">
header = [header]
htype = [htype]
transPort = [transPort]
boundary = [boundary]
content = [content]
ctype = [ctype]

    </log>

    <finally>    
        <removeListenpointRTSP name="session6"/>
    </finally>    

</scenario>

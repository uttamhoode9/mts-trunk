
################################################################################
#                                                                              #
#                         RTPFLOW Protocol                                     #
#                                                                              #
################################################################################



###############################################################################
#                                                                             #
# DEFAULT LISTENPOINT : to receive messages.                                  #
# If no channel nor listenpoint are specified in <sendMessagePPP> operations, #
# then this default one is used to fixe the source information (host and port)#
# on the transport layer like UDP based protocol                              #
#                                                                             #
###############################################################################

# Default listen host (IP addresses or DNS name); empty value means to listen
# on all local IP adresses (similar to 0.0.0.0) and that the source IP address 
# is the first local IP address
# [string]
listenpoint.LOCAL_HOST =

# Default listen port; empty or zero value means no listen port
# [integer]
listenpoint.LOCAL_PORT = 0

# Flag to listen to UDP transport
# [boolean]
listenpoint.LISTEN_UDP = true

# Flag to listen to TCP transport
# [boolean]
# NOT SUPPORTED
listenpoint.LISTEN_TCP = false

# Flag to listen to SCTP transport
# [boolean]
listenpoint.LISTEN_SCTP = false

# Flag to listen to TLS transport
# [boolean]
# NOT SUPPORTED
listenpoint.LISTEN_TLS = false

# Default listen port for TLS transport; empty or zero means listen.LOCAL_PORT + 1
# [integer]
listenpoint.LOCAL_PORT_TLS =

# Default transport for endpoints; possible values are : udp, tcp, tls, sctp
# [enumeration] udp|tcp|sctp|tls
listenpoint.TRANSPORT = udp


###############################################################################
#                                                                             #
# end timer : timer values in seconds to detect the end of a RTP flow.        #
#                                                                             #
###############################################################################

# A RTPflow message is return by the tool when no packet is received 
# during this timer value (in seconds)
# default 1 (standard value)
# [float]
endtimer.NO_PACKET = 5

# A RTPflow is return by the tool when silent packets are received 
# during this timer value (in seconds).
# default 0 (mean infinity so never used)
# [float]
endtimer.SILENT_FLOW = 0

# A RTPflow is return by the tool when silent packets are received 
# during this timer value (in seconds); this time is periodic. 
# So every x seconds a RTPFLOW message will be created up to there is no flow.
# default 0 (mean infinity so never used)
# [float]
endtimer.PERIODIC = 0


###############################################################################
#                                                                             #
# silent detection :  parameter for the silent detection.                     #
# (communication with analog lines)                                           #
#                                                                             #
###############################################################################

# If this paramter is set (true), then the application filters the silent RTP packets
# when building the RTPflow messages; the detection of such packet is based on the 
# following 2 parameters defining 2 differnt conditions : 
# * a pattern contained in the payload and 
# * the frequency of the most popular bytes in the payload
# [boolean]
silent.FILTERING = true
# silent.FILTERING = false

# During transmission, some pakets could be lost and the tool will replace them
# (in operation setFromMessage with value="flow.payload.player") by empty pakets by
# default (with 00) or user can choose a pattern for those "empty" pakets which will be insert.
# This parameter is also used for silent packets detection; we search whether each RTP packets 
# contains the following pattern as an hexadecimal value (example 01D57E0289)
# Default 00000000000000000000
# [binary]
silent.PATTERN_HEXA =
# silent.PATTERN_HEXA = 000102030405060708090A0B0C0D0E0F10

# This parameter is used for silent packets detection; we consider a RTP packet as a silent packets
# if the frequency of the most popular bytes is greater than a given frequence (value between 0 and 1)
# [float]
silent.FREQUENCY_THRESHOLD = 0.2
# silent.FREQUENCY_THRESHOLD = 0.5

# By default, the application will calcul some qos information during a transmission.
# But this can be deactivated to have better performance.
# default true
# [boolean]
QOS_MEASURMENT = true
# QOS_MEASURMENT = false

# Number of thread dedicated to execute scheduler's tasks used by the light
# RTP flow stack
# default 2
# [integer]
SCHEDULER_THREAD_NUMBER = 2


#####################################################
# Common settings                                   #
#####################################################

# Time (in seconds) of life the messages and transactions
# [float]
MESSAGE_TIME_LIFE = 30

# Timeout duration (in seconds) for the receive operations
# [float]
operations.RECEIVE_TIMEOUT = 30


#######################################################
# route
#######################################################

# The tool automatically routes a received response to the scenario which has sent the corresponding request.
# The transactionID is used internally to make the corresponding between requests and responses.
# This parameter is used to get the transactionID from the message given a list of paths (separated
# by ',' character). The paths are defined with the setFromMessage operation and are of course
# protocol dependant
# type list<string> (list of path keywords)
# [string]
route.TRANSACTION_ID =

# The tool automatically routes a received request to the scenario given in the "destScenario" parameter
# of the send operation in the same testcase. In this case, the tool is simulating a client and server
# at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by
# the tool and the same requests the tool has received
# This parameter is used to get the messageID from the message given a list of paths (separated
# by ',' character). The path are defined with the setFromMessage operation and are protocol of
# course dependant
# type list<string> (list of path keywords)
# [string]
route.MESSAGE_ID = header.ssrc

# The tool routes a received request to the scenario given by its name. In this case, the tool is
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage
# operation and are of course protocol dependant
# type list<string> (list of path keywords)
# [string]
route.SCENARIO_NAME = listenpoint.localPort|listenpoint.name|message.protocol

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled has a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type list<string> (list of path keywords)
# [string]
route.RETRANSMISSION_ID =

# By default, the tool routes a received responses to the scenario which has sent the corresponding
# request; if this parameter equals to false, then this mechanism is deasctivated and the responses
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and
# dispatch the response to the scenario with the same name
# [boolean]
route.DEFAULT_RESPONSE = true


#######################################################
# test use only
# [integer]
NB_ITERATION = 100000

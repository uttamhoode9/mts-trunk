# To change this template, choose Tools | Templates
# and open the template in the editor.

################################################################################
#                                                                              #
#                         STUN Protocol                                         #
#                                                                              #
################################################################################



###############################################################################
#                                                                             #
# DEFAULT LISTENPOINT : to receive messages.                                  #
# If no channel nor listenpoint are specified in <sendMessagePPP> operations, #
# then this default one is used to fixe the source information (host and port)#
# on the transport layer like UDP based protocol                              #
#                                                                             #
###############################################################################

# Default listen host (IP addresses or DNS name); empty value means to listen
# on all local IP adresses (similar to 0.0.0.0) and that the source IP address 
# is the first local IP address
# [string]
listenpoint.LOCAL_HOST =

# Default listen port; empty or zero value means no listen port
# [integer]
listenpoint.LOCAL_PORT = 34780

# Flag to listen to UDP transport
# [boolean]
listenpoint.LISTEN_UDP = true

# Flag to listen to TCP transport
# [boolean]
# NOT SUPPORTED
listenpoint.LISTEN_TCP = false

# Flag to listen to SCTP transport
# [boolean]
listenpoint.LISTEN_SCTP = false

# Flag to listen to TLS transport
# [boolean]
# NOT SUPPORTED
listenpoint.LISTEN_TLS = false

# Default listen port for TLS transport; empty or zero means listen.LOCAL_PORT + 1
# [integer]
listenpoint.LOCAL_PORT_TLS =

# Default transport for sending messages; possible values are : udp, tcp, sctp, tls
# (where rfc means that transport is chosen using the RFC 3261)
# [enumeration] udp|tcp|sctp|tls
listenpoint.TRANSPORT = udp








#######################################################

# Time (in seconds) of life the messages and transactions and retransmission objects
# [float]
MESSAGE_TIME_LIFE = 35

# Time (in seconds) of life the session objects
# [float]
SESSION_TIME_LIFE = 60

# Timeout duration (in seconds) for the receive operations
# [float]
operations.RECEIVE_TIMEOUT = 35


###############################################################################
#                                                                             #
# retransmit: parameters concerning the retransmit mechanism                  #
#                                                                             #
###############################################################################

# Flag to activate the automatic retransmission sending for messages
# if true then a retransmission messages are sent
# [boolean]
retransmit.MANAGEMENT = true

# Flag to activate the retransmission filtering on messages receipt;
# if true then a retransmission messages are not routed to the scenario
# they are ignored
# [boolean]
retransmit.FILTERING = true

# Retransmission list of timers in seconds
# type list<float>
# [string]
retransmit.TIMERS = 0.5, 1, 2, 4, 4, 4, 4, 4, 4, 4


#######################################################
# route
#######################################################
# ------------------
# | A message is   |
# | received.      |
# |                |
# ------------------
#        |
#        V
#        |
# ------------------                 --------------------------
# | Is there a     |                 | Scenario found  in     |
# | MESSAGE_ID     |-- Yes -->-------| Scenario/messageId     |-- Yes -->---|
# |      ?         |                 | table ?                |             |
# ------------------                 --------------------------             |
#        |                              |  This table is filled when        |
#     No |              /---<----- No --|  sending the message with         |
#        |             /                   "destScenario" attribute.        |
#        V            /                                                     |
#        |           /                                                      |
# ------------------/                --------------------------             |
# | Is there a     |                 | Scenario found  in     |             |
# | TRANSACTION_ID |-- Yes -->-------| Scenario/transactionId |-- Yes -->---|
# |      ?         |                 | table ?                |             |
# ------------------                 --------------------------             |
#        |                              |  This table is filled when        |
#     No |              /---<----- No --|  sending the request.             |
#        |             /                                                    |
#        V            /                                                     |
#        |           /                                                      |
# ------------------/                --------------------------             |
# | Is there a     |                 | Scenario found  in     |             |
# | SCENARIO_NAME  |-- Yes -->-------| Scenario/ScenarioName  |--- Yes -->--|
# |      ?         |                 | table ?                |             |
# ------------------                 --------------------------             |
#        |                              |  This table is filled when        |
#     No |              /---<----- No --|  starting the scenario.           |
#        |             /                                                    |
#        V            /                                                     |
#        |           /                                                      |
# ------------------/                --------------------------             |
# | The message is |                 | The scenario treats    |             |
# | silently       |                 | the message.           |--<----------|
# | discarded.     |                 |                        |
# ------------------                 --------------------------
#######################################################

# The transactionID is used internally to make the corresponding between requests and responses.
# The tool uses transaction for internal routing : it automatically routes a received response
# to the scenario which has sent the corresponding request.
# This parameter is used to get the transactionID from the message given a list of paths (separated
# by ',' character). The paths are defined with the setFromMessage operation and are of course
# protocol dependant
# type list<string> (list of path keywords)
# [string]
route.TRANSACTION_ID = header.transactionId

# The sessionID is used internally to maintain sessions ie the correspondance between many
# messages that are linked each together.
# The tool uses session for internal routing : it automatically routes a received message
# to the scenario which has initiated the session.
# This parameter is used to get the sessionID from the message given a list of paths (separated
# by ',' character). The paths are defined with the setFromMessage operation and are of course
# protocol dependant
# type list<string> (list of path keywords)
# [string]
route.SESSION_ID =
# route.SESSION_ID =

# The tool automatically routes a received request to the scenario given in the "destScenario" parameter
# of the send operation in the same testcase. In this case, the tool is simulating a client and server
# at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by
# the tool and the same requests the tool has received
# This parameter is used to get the messageID from the message given a list of paths (separated
# by ',' character). The path are defined with the setFromMessage operation and are protocol of
# course dependant
# type list<string> (list of path keywords)
# [string]
route.MESSAGE_ID = header.transactionId

# The tool routes a received request to the scenario given by its name. In this case, the tool is
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage
# operation and are of course protocol dependant
# type list<string> (list of path keywords)
# [string]
route.SCENARIO_NAME = message.protocol
# route.SCENARIO_NAME = header.To.Address.URI.User

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled as a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type list<string> (list of path keywords)
# [string]
route.RETRANSMISSION_ID = header.transactionId

# By default, the tool routes a received responses to the scenario which has sent the corresponding
# request; if this parameter equals to false, then this mechanism is deasctivated and the responses
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and
# dispatch the response to the scenario with the same name
# [boolean]
route.DEFAULT_RESPONSE = true


###################################################

# test use only
NB_ITERATION=100000


# To change this template, choose Tools | Templates
# and open the template in the editor.


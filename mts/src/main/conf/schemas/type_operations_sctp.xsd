<!--                                                                      BEGIN OF SCTP PROTOCOL -->

<!--                                                                          openChannel -->
	<xs:complexType name="openChannelSCTPType">
		<xs:complexContent>
			<xs:extension base="operationType">
        <xs:sequence>
            <xs:element name="sctp" type="channelSctpType" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
				<xs:attribute name="localHost" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The channel local host (sometimes called the source host). It should of course be one of the local addresses of the host or a host name with a DNS resolution.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localPort" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The channel local port (sometimes called the source port). The default value is chosen by the tool.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localURL" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (url)</xs:appinfo>
						<xs:documentation>The local URL of the channel (sometimes called the source information).</xs:documentation>
					</xs:annotation>
				</xs:attribute>             
				<xs:attribute name="remoteHost" type="xs:string" use="required">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The channel remote host (sometimes called the destination host). It could be an IP address or a host name with a DNS resolution.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remotePort" type="xs:string" use="required">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The channel remote port (sometimes called the remote port).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remoteURL" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (url)</xs:appinfo>
						<xs:documentation>The remote URL of the channel (sometimes called the destination information).</xs:documentation>
					</xs:annotation>
				</xs:attribute> 
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<!--                                                                         closeChannel -->
	<xs:complexType name="closeChannelSCTPType">
		<xs:complexContent>
			<xs:extension base="operationType"/>
		</xs:complexContent>
	</xs:complexType>

    <!--                                                                                       sctp message -->
    <xs:complexType name="channelSctpType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
              <xs:attribute name="num_ostreams"      	type="xs:string" >
      					<xs:annotation>
      						<xs:appinfo>Integer</xs:appinfo>
      						<xs:documentation>This is an integer number representing the number 
                  of streams that the application wishes to be able to send to.  
                  This number is confirmed in the SCTP_COMM_UP notification and must 
                  be verified since it is a negotiated number with the remote endpoint.  
                  The default value of 0 indicates to use the endpoint default value.
                  </xs:documentation>
      					</xs:annotation>                                                         
      				</xs:attribute>
              <xs:attribute name="max_instreams"      type="xs:string" >
      					<xs:annotation>
      						<xs:appinfo>Integer</xs:appinfo>
      						<xs:documentation>This value represents the maximum number of inbound 
                  streams the application is prepared to support. This value is bounded 
                  by the actual implementation.  In other words the user MAY be able to 
                  support more streams than the Operating System.  In such a case, the 
                  Operating System limit overrides the value requested by the user. 
                  The default value of 0 indicates to use the endpoints default value.
                  </xs:documentation>
      					</xs:annotation>
      				</xs:attribute>
              <xs:attribute name="max_attempts"     	type="xs:string" >
      					<xs:annotation>
      						<xs:appinfo>Integer</xs:appinfo>
      						<xs:documentation>This integer specifies how many attempts the SCTP 
                  endpoint should make at resending the INIT.  This value overrides 
                  the system SCTP 'Max.Init.Retransmits' value.  
                  The default value of 0 indicates to use the endpoints default value.  
                  This is normally set to the system's default 'Max.Init.Retransmit' 
                  value.
                  </xs:documentation>
      					</xs:annotation>
      				</xs:attribute>
              <xs:attribute name="max_initTimeo"      	type="xs:string" >
      					<xs:annotation>
      						<xs:appinfo>Integer</xs:appinfo>
      						<xs:documentation>This value represents the largest Time-Out or 
                  RTO value (in milliseconds) to use in attempting an INIT.  
                  Normally the 'RTO.Max' is used to limit the doubling of the RTO 
                  upon timeout.  For the INIT message this value MAY override 
                  'RTO.Max'.  This value MUST NOT influence 'RTO.Max' during 
                  data transmission and is only used to bound the initial setup time.  
                  A default value of 0 indicates to use the endpoints default value.  
                  This is normally set to the system's 'RTO.Max' value (60 seconds).
      	          </xs:documentation>
      					</xs:annotation>
      				</xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

<!--                                                                          createListenpoint -->
	<xs:complexType name="createListenpointSCTPType">
		<xs:complexContent>
			<xs:extension base="operationType">
				<xs:attribute name="localHost" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The listenpoint local host i.e. the IP address we are listening to. It should of course be one of the local addresses of the host or a host name with a DNS resolution. The default value is configurable(ppp.properties/listenpoint.LOCAL_HOST)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localPort" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The listenpoint local port i.e. the port we are listening to. The default value is configurable(ppp.properties/listenpoint.LOCAL_PORT)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localURL" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (url)</xs:appinfo>
						<xs:documentation>The listenpoint local URL we are listening to.</xs:documentation>
					</xs:annotation>
				</xs:attribute>             
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

    <!--                                                                         removeListenpoint -->
	<xs:complexType name="removeListenpointSCTPType">
		<xs:complexContent>
			<xs:extension base="operationType"/>
		</xs:complexContent>
	</xs:complexType>

    <!--                                                                          sendMessage -->
	<xs:complexType name="sendMessageSCTPType">
		<xs:complexContent>
			<xs:extension base="operationType">
                <xs:sequence>
                    <xs:element name="sctp" type="messageSctpType" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="data" type="dataSctpType" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
				<xs:attribute name="channel" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The name of the channel to transport the message. Don't use it with listenpoint (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="destScenario" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (scenario name)</xs:appinfo>
						<xs:documentation>The destination scenario if the request commes to IMSloader again (case of proxy testing). This attribute should contain the name of the scenario to route the same message to.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="delay" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Float</xs:appinfo>
						<xs:documentation>The time delay (in seconds) when the message sending is differed.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

    <!--                                                                         receiveMessage -->
	<xs:complexType name="receiveMessageSCTPType">
		<xs:complexContent>
			<xs:extension base="operationType">
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="parameter"  type="parameterType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="test"       type="testType"      minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="and"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="or"         type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="not"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
				<xs:attribute name="channel" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The channel name to transport the message. Don't use it with listenpoint (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="listenpoint" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The listenpoint name to transport the message. Don't use it with channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="request" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are waiting for a request whereas false means a response. If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The message type we are waiting for. If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="result" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The message result (for response only) we are waiting for. If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>								
				<xs:attribute name="timeout" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Float</xs:appinfo>
						<xs:documentation>The timeout i.e. the maximum time (in seconds) we are waiting for. The default value is configurable (ppp.properties/operations.RECEIVE_TIMEOUT) If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="failedOnReceive" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are not waiting a message i.e. if we will receive a message , then the operation status is set to FAILED. The default value is false.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="failedOnTimeout" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are waiting a message i.e. if we won't receive any message , then the operation status is set to FAILED. The default value is true.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

  <!--                                                                                       sctp message -->
    <xs:complexType name="messageSctpType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="stream" type="xs:string">
        					<xs:annotation>
        						<xs:appinfo>Integer 16 bits unsigned</xs:appinfo>
        						<xs:documentation>Stream identifier: Identifies the stream to which the following user data belongs.</xs:documentation>
        					</xs:annotation>
        				</xs:attribute>                
                <xs:attribute name="ssn" type="xs:string">
        					<xs:annotation>
        						<xs:appinfo>Integer 16 bits unsigned</xs:appinfo>
        						<xs:documentation>Stream Sequence Number: Represents the stream sequence number of the following user data within the stream S.</xs:documentation>
        					</xs:annotation>
        				</xs:attribute>                                    
                <xs:attribute name="ppid" type="xs:string">
        					<xs:annotation>
        						<xs:appinfo>Integer 32 bits unsigned</xs:appinfo>
        						<xs:documentation>Payload Protocol Identifier: Represents an application (or upper layer) specified protocol identifier.</xs:documentation>
        					</xs:annotation>
        				</xs:attribute>                
                <xs:attribute name="flags" type="xs:string">
        					<xs:annotation>
        						<xs:appinfo>Boolean 0|1</xs:appinfo>
        						<xs:documentation>U bit: The (U)nordered bit, if set to '1', indicates that this is an unordered DATA chunk, and there is no Stream Sequence Number assigned to this DATA chunk.</xs:documentation>
        					</xs:annotation>
        				</xs:attribute>                
                <xs:attribute name="context" type="xs:string">
        					<xs:annotation>
        						<xs:appinfo>Integer 32 bits unsigned</xs:appinfo>
        						<xs:documentation>Context: Not part of the protocol but it’s internal data in the SCTP stack. So you are not able to set it.</xs:documentation>
        					</xs:annotation>
        				</xs:attribute>                
                <xs:attribute name="ttl" type="xs:string">
        					<xs:annotation>
        						<xs:appinfo>Integer 32 bits unsigned</xs:appinfo>
        						<xs:documentation>TTL=Time To Live: Not part of the protocol but it’s internal data in the SCTP stack. So you are not able to set it.</xs:documentation>
        					</xs:annotation>
        				</xs:attribute>                                
                <xs:attribute name="tsn" type="xs:string">
        					<xs:annotation>
        						<xs:appinfo>Integer 32 bits unsigned</xs:appinfo>
        						<xs:documentation>TSN = Transmission Sequence Number: Represents the TSN for this DATA chunk. So you are not able to set it.</xs:documentation>
        					</xs:annotation>
        				</xs:attribute>                
                <xs:attribute name="cumtsn" type="xs:string">
        					<xs:annotation>
        						<xs:appinfo>Integer 32 bits unsigned</xs:appinfo>
        						<xs:documentation>Cumulative TSN: Represents the cumulative TSN for this DATA chunk. So you are not able to set it.</xs:documentation>
        					</xs:annotation>
        				</xs:attribute>                
                <xs:attribute name="aid" type="xs:string">
        					<xs:annotation>
        						<xs:appinfo>Integer 32 bits unsigned</xs:appinfo>
        						<xs:documentation>Association Identifier: Not part of the protocol but it’s internal data in the SCTP stack. So you are not able to set it.</xs:documentation>
        					</xs:annotation>
        				</xs:attribute>                
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

<!--                                                                                       data -->
    <xs:complexType name="dataSctpType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="format"       type="dataSctpFormatType" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

<!--                                                                                   dataSctpFormatType -->
    <xs:simpleType name="dataSctpFormatType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="text" />
            <xs:enumeration value="binary" />
        </xs:restriction>
    </xs:simpleType>


<!--                                                                        END OF SCTP PROTOCOL -->

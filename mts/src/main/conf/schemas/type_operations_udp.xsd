<!--                                                                      BEGIN OF UDP PROTOCOL -->


<!--                                                                          createListenpoint -->
	<xs:complexType name="createListenpointUDPType">
		<xs:complexContent>
			<xs:extension base="operationType">
				<xs:attribute name="localHost" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The listenpoint local host i.e. the IP address we are listening to. It should of course be one of the local addresses of the host or a host name with a DNS resolution. The default value is configurable(ppp.properties/listenpoint.LOCAL_HOST)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="localPort" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The listenpoint local port i.e. the port we are listening to. The default value is configurable(ppp.properties/listenpoint.LOCAL_PORT)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<!--                                                                         removeListenpoint -->
	<xs:complexType name="removeListenpointUDPType">
		<xs:complexContent>
			<xs:extension base="operationType"/>
		</xs:complexContent>
	</xs:complexType>

	<!--                                                                          sendMessage -->
	<xs:complexType name="sendMessageUDPType">
		<xs:complexContent>
			<xs:extension base="operationType">
                <xs:sequence>
                    <xs:element name="data" type="dataUdpType" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
				<xs:attribute name="listenpoint" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The name of the listenpoint to transport the message. Don't use it with channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remoteHost" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The remote host to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remotePort" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The remote port to send the message to. Don't use it with the channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="remoteURL" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (url)</xs:appinfo>
						<xs:documentation>The remote URL to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="transport" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>enumeration (UDP, TCP, SCTP, TLS)</xs:appinfo>
						<xs:documentation>The protocol transport to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="destScenario" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String (scenario name)</xs:appinfo>
						<xs:documentation>The destination scenario if the request commes to IMSloader again (case of proxy testing). This attribute should contain the name of the scenario to route the same message to.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="delay" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Float</xs:appinfo>
						<xs:documentation>The time delay (in seconds) when the message sending is differed.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
                <xs:attribute name="length"      	type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Integer</xs:appinfo>
						<xs:documentation>The length of the message.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<!--                                                                         receiveMessage -->
	<xs:complexType name="receiveMessageUDPType">
		<xs:complexContent>
			<xs:extension base="operationType">
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="parameter"  type="parameterType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="test"       type="testType"      minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="and"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="or"         type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="not"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
				<xs:attribute name="listenpoint" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>String</xs:appinfo>
						<xs:documentation>The listenpoint name to transport the message. Don't use it with channel (incompatible)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="timeout" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Float</xs:appinfo>
						<xs:documentation>The timeout i.e. the maximum time (in seconds) we are waiting for. The default value is configurable (ppp.properties/operations.RECEIVE_TIMEOUT) If not specified, then no filtering is required</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="failedOnReceive" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are not waiting a message i.e. if we will receive a message , then the operation status is set to FAILED. The default value is false.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="failedOnTimeout" type="xs:string" use="optional">
					<xs:annotation>
						<xs:appinfo>Boolean</xs:appinfo>
						<xs:documentation>True means that we are waiting a message i.e. if we won't receive any message , then the operation status is set to FAILED. The default value is true.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

<!--                                                                                       data -->
    <xs:complexType name="dataUdpType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="format"       type="dataUdpFormatType" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

<!--                                                                                   dataUdpFormatType -->
    <xs:simpleType name="dataUdpFormatType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="text" />
            <xs:enumeration value="binary" />
        </xs:restriction>
    </xs:simpleType>

<!--************************************************************************************************-->
<!--**************************************** OBSOLETE **********************************************-->
<!--************************************************************************************************-->

<!--                                                                          openSocketUDP -->
    <xs:complexType name="openSocketUDPType">
        <xs:complexContent>
            <xs:extension base="operationType">
                <xs:attribute name="socketName"     type="xs:string" use="required" />
                <xs:attribute name="localHost"      type="xs:string" />
                <xs:attribute name="localPort"      type="xs:string" />
                <xs:attribute name="remoteHost"     type="xs:string" />
                <xs:attribute name="remotePort"     type="xs:string" />   
                <xs:attribute name="connected"      type="xs:string" />              
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                         closeSocketUDP -->
    <xs:complexType name="closeSocketUDPType">
        <xs:complexContent>
            <xs:extension base="operationType" >
                <xs:attribute name="socketName" 	type="xs:string" use="required" />
            </xs:extension>

        </xs:complexContent>
    </xs:complexType>

<!--                                                                                sendDataUDP -->
    <xs:complexType name="sendDataUDPType">
        <xs:complexContent>
            <xs:extension base="operationType">
                <xs:sequence>
                    <xs:element name="data" type="dataUdpType" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute name="socketName" 	type="xs:string" use="required" />
                <xs:attribute name="remoteHost"  	type="xs:string" />
                <xs:attribute name="remotePort"  	type="xs:string" />
                <xs:attribute name="length"      	type="xs:string" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                             receiveDataUDP -->
    <xs:complexType name="receiveDataUDPType">
        <xs:complexContent>
            <xs:extension base="operationType">
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="parameter"  	type="parameterType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="test"      	type="testType"      minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="and"          type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="or"           type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="not"          type="conditionType" minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
                <xs:attribute name="socketName" 		type="xs:string" />
                <xs:attribute name="timeout"    	  	type="xs:string" />
                <xs:attribute name="failedOnTimeout"    type="xs:string" />
                <xs:attribute name="failedOnReceive"    type="xs:string" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

<!--                                                                        END OF UDP PROTOCOL -->

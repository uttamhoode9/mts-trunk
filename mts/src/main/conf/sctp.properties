
################################################################################
#                                                                              #
#                         SCTP Protocol                                        #
#                                                                              #
################################################################################



###############################################################################
#                                                                             #
# DEFAULT LISTENPOINT : to receive messages.                                  #
# If no channel nor listenpoint are specified in <sendMessagePPP> operations, #
# then this default one is used to fixe the source information (host and port)#
# on the transport layer like UDP based protocol                              #
#                                                                             #
###############################################################################

# Default listen host (IP addresses or DNS name); empty value means to listen
# on all local IP adresses (similar to 0.0.0.0) and that the source IP address 
# is the first local IP address 
# [string]
listenpoint.LOCAL_HOST =

# Default listen port; empty or zero value means no listen port
# [integer]
listenpoint.LOCAL_PORT = 14000


#######################################################

# Time (in seconds) of life the messages and transactions
MESSAGE_TIME_LIFE = 10

# Timeout duration (in seconds) for the receive operations
# [float]
operations.RECEIVE_TIMEOUT = 10


#######################################################
# connect specific parameters
#######################################################

# This is an integer number representing the number 
# of streams that the application wishes to be able to send to.  
# This number is confirmed in the SCTP_COMM_UP notification and must 
# be verified since it is a negotiated number with the remote endpoint.  
# The default value of 0 indicates to use the endpoint default value.
# [integer]
connect.NUM_OSTREAMS = 10

# This value represents the maximum number of inbound 
# streams the application is prepared to support. This value is bounded 
# by the actual implementation.  In other words the user MAY be able to 
# support more streams than the Operating System.  In such a case, the 
# Operating System limit overrides the value requested by the user. 
# The default value of 0 indicates to use the endpoints default  value.
# [integer]
connect.MAX_INSTREAMS = 10

# This integer specifies how many attempts the SCTP 
# endpoint should make at resending the INIT.  This value overrides 
# the system SCTP 'Max.Init.Retransmits' value.  
# The default value of 0 indicates to use the endpoints default value.  
# This is normally set to the system's default 'Max.Init.Retransmit' 
# value.
# [integer]
connect.MAX_ATTEMPTS = 20

# This value represents the largest Time-Out or 
# RTO value (in milliseconds) to use in attempting an INIT.  
# Normally the 'RTO.Max' is used to limit the doubling of the RTO 
# upon timeout.  For the INIT message this value MAY override 
# RTO.Max'.  This value MUST NOT influence 'RTO.Max' during 
# data transmission and is only used to bound the initial setup time.  
# A default value of 0 indicates to use the endpoints default value.  
# This is normally set to the system's 'RTO.Max' value (60 seconds).
# [integer]
connect.MAX_INIT_TIMEO = 20


#######################################################
# send specific parameters
#######################################################

# Default client data chunk 'stream' parameter (Stream Identifier) 
# [integer]
client.DEFAULT_STREAM = 111

# Default client data chunk 'SSN' attribute (Stream Sequence Number)
# [integer]
client.DEFAULT_SSN = 255

# Default client data chunk 'PPID' attribute (Payload Protocol Identifier)
# [integer]
client.DEFAULT_PPID = 987654321

# Default client TODO
# [integer]
client.DEFAULT_FLAGS = 11111111

# Default client TODO
# [integer]
client.DEFAULT_CONTEXT = 22222222

# Default client TODO
# [integer]
client.DEFAULT_TTL = 33333333

# Default client data chunk 'TSN' attribute (Transmission Sequence Number)
# [integer]
client.DEFAULT_TSN = 10000000

# Default client data chunk 'CUMTSN' attribute (Cumulative Transmission Sequence Number)
# [integer]
client.DEFAULT_CUMTSN = 90000000

# Default client data chunk 'AID' attribute (Association Identifier)
# [integer]
client.DEFAULT_AID = 55555555


# Flag to define whether IMSloader shall generate a message (empty) 
# when a server side receives a transport connection opening or closing.
# [boolean]
GENERATE_TRANSPORT_MESSAGE = false


#######################################################
# route
#######################################################

# The tool automatically routes a received response to the scenario which has sent the corresponding request.
# The transactionID is used internally to make the corresponding between requests and responses.
# This parameter is used to get the transactionID from the message given a list of paths (separated 
# by ',' character). The paths are defined with the setFromMessage operation and are of course 
# protocol dependant
# type list<string> (list of path keywords)
# [string]
route.TRANSACTION_ID = 

# The tool automatically routes a received request to the scenario given in the "destScenario" parameter 
# of the send operation in the same testcase. In this case, the tool is simulating a client and server 
# at the same time.
# The messageID is used internally to make the corresponding between requests which are sent by 
# the tool and the same requests the tool has received 
# This parameter is used to get the messageID from the message given a list of paths (separated 
# by ',' character). The path are defined with the setFromMessage operation and are protocol of 
# course dependant
# type list<string> (list of path keywords)
# [string]
route.MESSAGE_ID = 

# The tool routes a received request to the scenario given by its name. In this case, the tool is 
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message 
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage 
# operation and are of course protocol dependant
# type list<string> (list of path keywords)
# [string]
route.SCENARIO_NAME = message.protocol

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled has a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type list<string> (list of path keywords)
# [string]
route.RETRANSMISSION_ID =

# By default, the tool routes a received responses to the scenario which has sent the corresponding 
# request; if this parameter equals to false, then this mechanism is deasctivated and the responses 
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and 
# dispatch the response to the scenario with the same name
# [boolean]
route.DEFAULT_RESPONSE = true
